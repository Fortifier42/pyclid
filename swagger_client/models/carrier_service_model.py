# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierServiceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_id': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'display_name': 'str',
        'custom_disclaimer_message': 'str',
        'custom_eta_interpolation_string': 'str',
        'carrier_service_surcharges': 'list[Surcharge]',
        'carrier': 'Carrier',
        'carrier_service_group_id': 'int',
        'accumulate_time': 'bool',
        'accumulate_distance': 'bool',
        'accumulate_weight': 'bool',
        'accumulate_pieces': 'bool',
        'accumulate_pallet_spaces': 'bool',
        'foot_print_pro_rata_type': 'ProRataType',
        'weight_pro_rata_type': 'ProRataType',
        'pro_rata_decimal_places': 'int',
        'pro_rata_rounding_type': 'WeightRoundingType',
        'total_volume_calculation_type': 'TotalVolumeCalculationType',
        'max_total_volume': 'float',
        'max_total_footprint': 'float',
        'max_item_length': 'float',
        'max_item_width': 'float',
        'max_item_height': 'float',
        'max_item_weight': 'float',
        'max_total_weight': 'float',
        'max_item_volume': 'float',
        'default_time_duration': 'float',
        'default_distance_duration': 'float',
        'carrier_lane_rates': 'list[CarrierLaneRate]',
        'custom_field_sets': 'list[CustomFieldSet]',
        'custom_values': 'list[CustomValue]',
        'service_containers': 'list[CarrierServiceContainer]',
        'serialised_custom_fields': 'str',
        'weight_rounding_type': 'WeightRoundingType',
        'pallet_spaces_rounding_type': 'WeightRoundingType',
        'business_days_only': 'bool',
        'runs_on_public_holidays': 'bool',
        'weight_pro_rata_calculation_type': 'WeightProRataCalculationType',
        'consignment_batching_allowed': 'bool',
        'routing_no_lane_rates_type': 'RoutingNoLaneRatesType',
        'carrier_service_group_order': 'int',
        'pricing_mechanism_type': 'PricingMechanismType',
        'enable_receiver_pays': 'bool',
        'is_hourly': 'bool',
        'dg_enabled': 'bool',
        'allow_consignment_consolidation': 'bool',
        'pallet_space_pro_rata_type': 'ProRataType'
    }

    attribute_map = {
        'id': 'id',
        'carrier_id': 'carrierId',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'display_name': 'displayName',
        'custom_disclaimer_message': 'customDisclaimerMessage',
        'custom_eta_interpolation_string': 'customEtaInterpolationString',
        'carrier_service_surcharges': 'carrierServiceSurcharges',
        'carrier': 'carrier',
        'carrier_service_group_id': 'carrierServiceGroupId',
        'accumulate_time': 'accumulateTime',
        'accumulate_distance': 'accumulateDistance',
        'accumulate_weight': 'accumulateWeight',
        'accumulate_pieces': 'accumulatePieces',
        'accumulate_pallet_spaces': 'accumulatePalletSpaces',
        'foot_print_pro_rata_type': 'footPrintProRataType',
        'weight_pro_rata_type': 'weightProRataType',
        'pro_rata_decimal_places': 'proRataDecimalPlaces',
        'pro_rata_rounding_type': 'proRataRoundingType',
        'total_volume_calculation_type': 'totalVolumeCalculationType',
        'max_total_volume': 'maxTotalVolume',
        'max_total_footprint': 'maxTotalFootprint',
        'max_item_length': 'maxItemLength',
        'max_item_width': 'maxItemWidth',
        'max_item_height': 'maxItemHeight',
        'max_item_weight': 'maxItemWeight',
        'max_total_weight': 'maxTotalWeight',
        'max_item_volume': 'maxItemVolume',
        'default_time_duration': 'defaultTimeDuration',
        'default_distance_duration': 'defaultDistanceDuration',
        'carrier_lane_rates': 'carrierLaneRates',
        'custom_field_sets': 'customFieldSets',
        'custom_values': 'customValues',
        'service_containers': 'serviceContainers',
        'serialised_custom_fields': 'serialisedCustomFields',
        'weight_rounding_type': 'weightRoundingType',
        'pallet_spaces_rounding_type': 'palletSpacesRoundingType',
        'business_days_only': 'businessDaysOnly',
        'runs_on_public_holidays': 'runsOnPublicHolidays',
        'weight_pro_rata_calculation_type': 'weightProRataCalculationType',
        'consignment_batching_allowed': 'consignmentBatchingAllowed',
        'routing_no_lane_rates_type': 'routingNoLaneRatesType',
        'carrier_service_group_order': 'carrierServiceGroupOrder',
        'pricing_mechanism_type': 'pricingMechanismType',
        'enable_receiver_pays': 'enableReceiverPays',
        'is_hourly': 'isHourly',
        'dg_enabled': 'dgEnabled',
        'allow_consignment_consolidation': 'allowConsignmentConsolidation',
        'pallet_space_pro_rata_type': 'palletSpaceProRataType'
    }

    def __init__(self, id=None, carrier_id=None, name=None, abbreviation=None, display_name=None, custom_disclaimer_message=None, custom_eta_interpolation_string=None, carrier_service_surcharges=None, carrier=None, carrier_service_group_id=None, accumulate_time=None, accumulate_distance=None, accumulate_weight=None, accumulate_pieces=None, accumulate_pallet_spaces=None, foot_print_pro_rata_type=None, weight_pro_rata_type=None, pro_rata_decimal_places=None, pro_rata_rounding_type=None, total_volume_calculation_type=None, max_total_volume=None, max_total_footprint=None, max_item_length=None, max_item_width=None, max_item_height=None, max_item_weight=None, max_total_weight=None, max_item_volume=None, default_time_duration=None, default_distance_duration=None, carrier_lane_rates=None, custom_field_sets=None, custom_values=None, service_containers=None, serialised_custom_fields=None, weight_rounding_type=None, pallet_spaces_rounding_type=None, business_days_only=None, runs_on_public_holidays=None, weight_pro_rata_calculation_type=None, consignment_batching_allowed=None, routing_no_lane_rates_type=None, carrier_service_group_order=None, pricing_mechanism_type=None, enable_receiver_pays=None, is_hourly=None, dg_enabled=None, allow_consignment_consolidation=None, pallet_space_pro_rata_type=None):  # noqa: E501
        """CarrierServiceModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_id = None
        self._name = None
        self._abbreviation = None
        self._display_name = None
        self._custom_disclaimer_message = None
        self._custom_eta_interpolation_string = None
        self._carrier_service_surcharges = None
        self._carrier = None
        self._carrier_service_group_id = None
        self._accumulate_time = None
        self._accumulate_distance = None
        self._accumulate_weight = None
        self._accumulate_pieces = None
        self._accumulate_pallet_spaces = None
        self._foot_print_pro_rata_type = None
        self._weight_pro_rata_type = None
        self._pro_rata_decimal_places = None
        self._pro_rata_rounding_type = None
        self._total_volume_calculation_type = None
        self._max_total_volume = None
        self._max_total_footprint = None
        self._max_item_length = None
        self._max_item_width = None
        self._max_item_height = None
        self._max_item_weight = None
        self._max_total_weight = None
        self._max_item_volume = None
        self._default_time_duration = None
        self._default_distance_duration = None
        self._carrier_lane_rates = None
        self._custom_field_sets = None
        self._custom_values = None
        self._service_containers = None
        self._serialised_custom_fields = None
        self._weight_rounding_type = None
        self._pallet_spaces_rounding_type = None
        self._business_days_only = None
        self._runs_on_public_holidays = None
        self._weight_pro_rata_calculation_type = None
        self._consignment_batching_allowed = None
        self._routing_no_lane_rates_type = None
        self._carrier_service_group_order = None
        self._pricing_mechanism_type = None
        self._enable_receiver_pays = None
        self._is_hourly = None
        self._dg_enabled = None
        self._allow_consignment_consolidation = None
        self._pallet_space_pro_rata_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_id is not None:
            self.carrier_id = carrier_id
        self.name = name
        self.abbreviation = abbreviation
        if display_name is not None:
            self.display_name = display_name
        if custom_disclaimer_message is not None:
            self.custom_disclaimer_message = custom_disclaimer_message
        if custom_eta_interpolation_string is not None:
            self.custom_eta_interpolation_string = custom_eta_interpolation_string
        if carrier_service_surcharges is not None:
            self.carrier_service_surcharges = carrier_service_surcharges
        if carrier is not None:
            self.carrier = carrier
        if carrier_service_group_id is not None:
            self.carrier_service_group_id = carrier_service_group_id
        if accumulate_time is not None:
            self.accumulate_time = accumulate_time
        if accumulate_distance is not None:
            self.accumulate_distance = accumulate_distance
        if accumulate_weight is not None:
            self.accumulate_weight = accumulate_weight
        if accumulate_pieces is not None:
            self.accumulate_pieces = accumulate_pieces
        if accumulate_pallet_spaces is not None:
            self.accumulate_pallet_spaces = accumulate_pallet_spaces
        if foot_print_pro_rata_type is not None:
            self.foot_print_pro_rata_type = foot_print_pro_rata_type
        if weight_pro_rata_type is not None:
            self.weight_pro_rata_type = weight_pro_rata_type
        if pro_rata_decimal_places is not None:
            self.pro_rata_decimal_places = pro_rata_decimal_places
        if pro_rata_rounding_type is not None:
            self.pro_rata_rounding_type = pro_rata_rounding_type
        if total_volume_calculation_type is not None:
            self.total_volume_calculation_type = total_volume_calculation_type
        if max_total_volume is not None:
            self.max_total_volume = max_total_volume
        if max_total_footprint is not None:
            self.max_total_footprint = max_total_footprint
        if max_item_length is not None:
            self.max_item_length = max_item_length
        if max_item_width is not None:
            self.max_item_width = max_item_width
        if max_item_height is not None:
            self.max_item_height = max_item_height
        if max_item_weight is not None:
            self.max_item_weight = max_item_weight
        if max_total_weight is not None:
            self.max_total_weight = max_total_weight
        if max_item_volume is not None:
            self.max_item_volume = max_item_volume
        if default_time_duration is not None:
            self.default_time_duration = default_time_duration
        if default_distance_duration is not None:
            self.default_distance_duration = default_distance_duration
        if carrier_lane_rates is not None:
            self.carrier_lane_rates = carrier_lane_rates
        if custom_field_sets is not None:
            self.custom_field_sets = custom_field_sets
        if custom_values is not None:
            self.custom_values = custom_values
        if service_containers is not None:
            self.service_containers = service_containers
        if serialised_custom_fields is not None:
            self.serialised_custom_fields = serialised_custom_fields
        if weight_rounding_type is not None:
            self.weight_rounding_type = weight_rounding_type
        if pallet_spaces_rounding_type is not None:
            self.pallet_spaces_rounding_type = pallet_spaces_rounding_type
        if business_days_only is not None:
            self.business_days_only = business_days_only
        if runs_on_public_holidays is not None:
            self.runs_on_public_holidays = runs_on_public_holidays
        if weight_pro_rata_calculation_type is not None:
            self.weight_pro_rata_calculation_type = weight_pro_rata_calculation_type
        if consignment_batching_allowed is not None:
            self.consignment_batching_allowed = consignment_batching_allowed
        if routing_no_lane_rates_type is not None:
            self.routing_no_lane_rates_type = routing_no_lane_rates_type
        if carrier_service_group_order is not None:
            self.carrier_service_group_order = carrier_service_group_order
        if pricing_mechanism_type is not None:
            self.pricing_mechanism_type = pricing_mechanism_type
        if enable_receiver_pays is not None:
            self.enable_receiver_pays = enable_receiver_pays
        if is_hourly is not None:
            self.is_hourly = is_hourly
        if dg_enabled is not None:
            self.dg_enabled = dg_enabled
        if allow_consignment_consolidation is not None:
            self.allow_consignment_consolidation = allow_consignment_consolidation
        if pallet_space_pro_rata_type is not None:
            self.pallet_space_pro_rata_type = pallet_space_pro_rata_type

    @property
    def id(self):
        """Gets the id of this CarrierServiceModel.  # noqa: E501


        :return: The id of this CarrierServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierServiceModel.


        :param id: The id of this CarrierServiceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CarrierServiceModel.  # noqa: E501


        :return: The carrier_id of this CarrierServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CarrierServiceModel.


        :param carrier_id: The carrier_id of this CarrierServiceModel.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def name(self):
        """Gets the name of this CarrierServiceModel.  # noqa: E501


        :return: The name of this CarrierServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierServiceModel.


        :param name: The name of this CarrierServiceModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CarrierServiceModel.  # noqa: E501


        :return: The abbreviation of this CarrierServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CarrierServiceModel.


        :param abbreviation: The abbreviation of this CarrierServiceModel.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def display_name(self):
        """Gets the display_name of this CarrierServiceModel.  # noqa: E501


        :return: The display_name of this CarrierServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CarrierServiceModel.


        :param display_name: The display_name of this CarrierServiceModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def custom_disclaimer_message(self):
        """Gets the custom_disclaimer_message of this CarrierServiceModel.  # noqa: E501


        :return: The custom_disclaimer_message of this CarrierServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_disclaimer_message

    @custom_disclaimer_message.setter
    def custom_disclaimer_message(self, custom_disclaimer_message):
        """Sets the custom_disclaimer_message of this CarrierServiceModel.


        :param custom_disclaimer_message: The custom_disclaimer_message of this CarrierServiceModel.  # noqa: E501
        :type: str
        """

        self._custom_disclaimer_message = custom_disclaimer_message

    @property
    def custom_eta_interpolation_string(self):
        """Gets the custom_eta_interpolation_string of this CarrierServiceModel.  # noqa: E501


        :return: The custom_eta_interpolation_string of this CarrierServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_eta_interpolation_string

    @custom_eta_interpolation_string.setter
    def custom_eta_interpolation_string(self, custom_eta_interpolation_string):
        """Sets the custom_eta_interpolation_string of this CarrierServiceModel.


        :param custom_eta_interpolation_string: The custom_eta_interpolation_string of this CarrierServiceModel.  # noqa: E501
        :type: str
        """

        self._custom_eta_interpolation_string = custom_eta_interpolation_string

    @property
    def carrier_service_surcharges(self):
        """Gets the carrier_service_surcharges of this CarrierServiceModel.  # noqa: E501


        :return: The carrier_service_surcharges of this CarrierServiceModel.  # noqa: E501
        :rtype: list[Surcharge]
        """
        return self._carrier_service_surcharges

    @carrier_service_surcharges.setter
    def carrier_service_surcharges(self, carrier_service_surcharges):
        """Sets the carrier_service_surcharges of this CarrierServiceModel.


        :param carrier_service_surcharges: The carrier_service_surcharges of this CarrierServiceModel.  # noqa: E501
        :type: list[Surcharge]
        """

        self._carrier_service_surcharges = carrier_service_surcharges

    @property
    def carrier(self):
        """Gets the carrier of this CarrierServiceModel.  # noqa: E501


        :return: The carrier of this CarrierServiceModel.  # noqa: E501
        :rtype: Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CarrierServiceModel.


        :param carrier: The carrier of this CarrierServiceModel.  # noqa: E501
        :type: Carrier
        """

        self._carrier = carrier

    @property
    def carrier_service_group_id(self):
        """Gets the carrier_service_group_id of this CarrierServiceModel.  # noqa: E501


        :return: The carrier_service_group_id of this CarrierServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_group_id

    @carrier_service_group_id.setter
    def carrier_service_group_id(self, carrier_service_group_id):
        """Sets the carrier_service_group_id of this CarrierServiceModel.


        :param carrier_service_group_id: The carrier_service_group_id of this CarrierServiceModel.  # noqa: E501
        :type: int
        """

        self._carrier_service_group_id = carrier_service_group_id

    @property
    def accumulate_time(self):
        """Gets the accumulate_time of this CarrierServiceModel.  # noqa: E501

        When true, all time breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by time * number of hours  # noqa: E501

        :return: The accumulate_time of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._accumulate_time

    @accumulate_time.setter
    def accumulate_time(self, accumulate_time):
        """Sets the accumulate_time of this CarrierServiceModel.

        When true, all time breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by time * number of hours  # noqa: E501

        :param accumulate_time: The accumulate_time of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._accumulate_time = accumulate_time

    @property
    def accumulate_distance(self):
        """Gets the accumulate_distance of this CarrierServiceModel.  # noqa: E501

        When true, all distance breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by distance * number of kms  # noqa: E501

        :return: The accumulate_distance of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._accumulate_distance

    @accumulate_distance.setter
    def accumulate_distance(self, accumulate_distance):
        """Sets the accumulate_distance of this CarrierServiceModel.

        When true, all distance breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by distance * number of kms  # noqa: E501

        :param accumulate_distance: The accumulate_distance of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._accumulate_distance = accumulate_distance

    @property
    def accumulate_weight(self):
        """Gets the accumulate_weight of this CarrierServiceModel.  # noqa: E501

        When true, all weight breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by weight * number of kms  # noqa: E501

        :return: The accumulate_weight of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._accumulate_weight

    @accumulate_weight.setter
    def accumulate_weight(self, accumulate_weight):
        """Sets the accumulate_weight of this CarrierServiceModel.

        When true, all weight breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by weight * number of kms  # noqa: E501

        :param accumulate_weight: The accumulate_weight of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._accumulate_weight = accumulate_weight

    @property
    def accumulate_pieces(self):
        """Gets the accumulate_pieces of this CarrierServiceModel.  # noqa: E501

        When true, all pieces breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by weight * number of kms  # noqa: E501

        :return: The accumulate_pieces of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._accumulate_pieces

    @accumulate_pieces.setter
    def accumulate_pieces(self, accumulate_pieces):
        """Sets the accumulate_pieces of this CarrierServiceModel.

        When true, all pieces breaks calculate a route by accumulating the various breaks.  When false, a route is calculated by weight * number of kms  # noqa: E501

        :param accumulate_pieces: The accumulate_pieces of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._accumulate_pieces = accumulate_pieces

    @property
    def accumulate_pallet_spaces(self):
        """Gets the accumulate_pallet_spaces of this CarrierServiceModel.  # noqa: E501

        When true, all pallet space breaks calculate a route by accumulating the various breaks.  When false, a route uses a singular matching break  # noqa: E501

        :return: The accumulate_pallet_spaces of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._accumulate_pallet_spaces

    @accumulate_pallet_spaces.setter
    def accumulate_pallet_spaces(self, accumulate_pallet_spaces):
        """Sets the accumulate_pallet_spaces of this CarrierServiceModel.

        When true, all pallet space breaks calculate a route by accumulating the various breaks.  When false, a route uses a singular matching break  # noqa: E501

        :param accumulate_pallet_spaces: The accumulate_pallet_spaces of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._accumulate_pallet_spaces = accumulate_pallet_spaces

    @property
    def foot_print_pro_rata_type(self):
        """Gets the foot_print_pro_rata_type of this CarrierServiceModel.  # noqa: E501


        :return: The foot_print_pro_rata_type of this CarrierServiceModel.  # noqa: E501
        :rtype: ProRataType
        """
        return self._foot_print_pro_rata_type

    @foot_print_pro_rata_type.setter
    def foot_print_pro_rata_type(self, foot_print_pro_rata_type):
        """Sets the foot_print_pro_rata_type of this CarrierServiceModel.


        :param foot_print_pro_rata_type: The foot_print_pro_rata_type of this CarrierServiceModel.  # noqa: E501
        :type: ProRataType
        """

        self._foot_print_pro_rata_type = foot_print_pro_rata_type

    @property
    def weight_pro_rata_type(self):
        """Gets the weight_pro_rata_type of this CarrierServiceModel.  # noqa: E501


        :return: The weight_pro_rata_type of this CarrierServiceModel.  # noqa: E501
        :rtype: ProRataType
        """
        return self._weight_pro_rata_type

    @weight_pro_rata_type.setter
    def weight_pro_rata_type(self, weight_pro_rata_type):
        """Sets the weight_pro_rata_type of this CarrierServiceModel.


        :param weight_pro_rata_type: The weight_pro_rata_type of this CarrierServiceModel.  # noqa: E501
        :type: ProRataType
        """

        self._weight_pro_rata_type = weight_pro_rata_type

    @property
    def pro_rata_decimal_places(self):
        """Gets the pro_rata_decimal_places of this CarrierServiceModel.  # noqa: E501


        :return: The pro_rata_decimal_places of this CarrierServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._pro_rata_decimal_places

    @pro_rata_decimal_places.setter
    def pro_rata_decimal_places(self, pro_rata_decimal_places):
        """Sets the pro_rata_decimal_places of this CarrierServiceModel.


        :param pro_rata_decimal_places: The pro_rata_decimal_places of this CarrierServiceModel.  # noqa: E501
        :type: int
        """

        self._pro_rata_decimal_places = pro_rata_decimal_places

    @property
    def pro_rata_rounding_type(self):
        """Gets the pro_rata_rounding_type of this CarrierServiceModel.  # noqa: E501


        :return: The pro_rata_rounding_type of this CarrierServiceModel.  # noqa: E501
        :rtype: WeightRoundingType
        """
        return self._pro_rata_rounding_type

    @pro_rata_rounding_type.setter
    def pro_rata_rounding_type(self, pro_rata_rounding_type):
        """Sets the pro_rata_rounding_type of this CarrierServiceModel.


        :param pro_rata_rounding_type: The pro_rata_rounding_type of this CarrierServiceModel.  # noqa: E501
        :type: WeightRoundingType
        """

        self._pro_rata_rounding_type = pro_rata_rounding_type

    @property
    def total_volume_calculation_type(self):
        """Gets the total_volume_calculation_type of this CarrierServiceModel.  # noqa: E501


        :return: The total_volume_calculation_type of this CarrierServiceModel.  # noqa: E501
        :rtype: TotalVolumeCalculationType
        """
        return self._total_volume_calculation_type

    @total_volume_calculation_type.setter
    def total_volume_calculation_type(self, total_volume_calculation_type):
        """Sets the total_volume_calculation_type of this CarrierServiceModel.


        :param total_volume_calculation_type: The total_volume_calculation_type of this CarrierServiceModel.  # noqa: E501
        :type: TotalVolumeCalculationType
        """

        self._total_volume_calculation_type = total_volume_calculation_type

    @property
    def max_total_volume(self):
        """Gets the max_total_volume of this CarrierServiceModel.  # noqa: E501


        :return: The max_total_volume of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_total_volume

    @max_total_volume.setter
    def max_total_volume(self, max_total_volume):
        """Sets the max_total_volume of this CarrierServiceModel.


        :param max_total_volume: The max_total_volume of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_total_volume = max_total_volume

    @property
    def max_total_footprint(self):
        """Gets the max_total_footprint of this CarrierServiceModel.  # noqa: E501


        :return: The max_total_footprint of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_total_footprint

    @max_total_footprint.setter
    def max_total_footprint(self, max_total_footprint):
        """Sets the max_total_footprint of this CarrierServiceModel.


        :param max_total_footprint: The max_total_footprint of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_total_footprint = max_total_footprint

    @property
    def max_item_length(self):
        """Gets the max_item_length of this CarrierServiceModel.  # noqa: E501


        :return: The max_item_length of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_item_length

    @max_item_length.setter
    def max_item_length(self, max_item_length):
        """Sets the max_item_length of this CarrierServiceModel.


        :param max_item_length: The max_item_length of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_item_length = max_item_length

    @property
    def max_item_width(self):
        """Gets the max_item_width of this CarrierServiceModel.  # noqa: E501


        :return: The max_item_width of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_item_width

    @max_item_width.setter
    def max_item_width(self, max_item_width):
        """Sets the max_item_width of this CarrierServiceModel.


        :param max_item_width: The max_item_width of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_item_width = max_item_width

    @property
    def max_item_height(self):
        """Gets the max_item_height of this CarrierServiceModel.  # noqa: E501


        :return: The max_item_height of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_item_height

    @max_item_height.setter
    def max_item_height(self, max_item_height):
        """Sets the max_item_height of this CarrierServiceModel.


        :param max_item_height: The max_item_height of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_item_height = max_item_height

    @property
    def max_item_weight(self):
        """Gets the max_item_weight of this CarrierServiceModel.  # noqa: E501


        :return: The max_item_weight of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_item_weight

    @max_item_weight.setter
    def max_item_weight(self, max_item_weight):
        """Sets the max_item_weight of this CarrierServiceModel.


        :param max_item_weight: The max_item_weight of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_item_weight = max_item_weight

    @property
    def max_total_weight(self):
        """Gets the max_total_weight of this CarrierServiceModel.  # noqa: E501


        :return: The max_total_weight of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_total_weight

    @max_total_weight.setter
    def max_total_weight(self, max_total_weight):
        """Sets the max_total_weight of this CarrierServiceModel.


        :param max_total_weight: The max_total_weight of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_total_weight = max_total_weight

    @property
    def max_item_volume(self):
        """Gets the max_item_volume of this CarrierServiceModel.  # noqa: E501


        :return: The max_item_volume of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._max_item_volume

    @max_item_volume.setter
    def max_item_volume(self, max_item_volume):
        """Sets the max_item_volume of this CarrierServiceModel.


        :param max_item_volume: The max_item_volume of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._max_item_volume = max_item_volume

    @property
    def default_time_duration(self):
        """Gets the default_time_duration of this CarrierServiceModel.  # noqa: E501

        This is the default time for each lane rate for this service. This gets used if no transit duration is specified for a lane rate  # noqa: E501

        :return: The default_time_duration of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._default_time_duration

    @default_time_duration.setter
    def default_time_duration(self, default_time_duration):
        """Sets the default_time_duration of this CarrierServiceModel.

        This is the default time for each lane rate for this service. This gets used if no transit duration is specified for a lane rate  # noqa: E501

        :param default_time_duration: The default_time_duration of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._default_time_duration = default_time_duration

    @property
    def default_distance_duration(self):
        """Gets the default_distance_duration of this CarrierServiceModel.  # noqa: E501

        This is the default distance for each lane rate for this service. This gets used if no transit duration is specified for a lane rate  # noqa: E501

        :return: The default_distance_duration of this CarrierServiceModel.  # noqa: E501
        :rtype: float
        """
        return self._default_distance_duration

    @default_distance_duration.setter
    def default_distance_duration(self, default_distance_duration):
        """Sets the default_distance_duration of this CarrierServiceModel.

        This is the default distance for each lane rate for this service. This gets used if no transit duration is specified for a lane rate  # noqa: E501

        :param default_distance_duration: The default_distance_duration of this CarrierServiceModel.  # noqa: E501
        :type: float
        """

        self._default_distance_duration = default_distance_duration

    @property
    def carrier_lane_rates(self):
        """Gets the carrier_lane_rates of this CarrierServiceModel.  # noqa: E501


        :return: The carrier_lane_rates of this CarrierServiceModel.  # noqa: E501
        :rtype: list[CarrierLaneRate]
        """
        return self._carrier_lane_rates

    @carrier_lane_rates.setter
    def carrier_lane_rates(self, carrier_lane_rates):
        """Sets the carrier_lane_rates of this CarrierServiceModel.


        :param carrier_lane_rates: The carrier_lane_rates of this CarrierServiceModel.  # noqa: E501
        :type: list[CarrierLaneRate]
        """

        self._carrier_lane_rates = carrier_lane_rates

    @property
    def custom_field_sets(self):
        """Gets the custom_field_sets of this CarrierServiceModel.  # noqa: E501


        :return: The custom_field_sets of this CarrierServiceModel.  # noqa: E501
        :rtype: list[CustomFieldSet]
        """
        return self._custom_field_sets

    @custom_field_sets.setter
    def custom_field_sets(self, custom_field_sets):
        """Sets the custom_field_sets of this CarrierServiceModel.


        :param custom_field_sets: The custom_field_sets of this CarrierServiceModel.  # noqa: E501
        :type: list[CustomFieldSet]
        """

        self._custom_field_sets = custom_field_sets

    @property
    def custom_values(self):
        """Gets the custom_values of this CarrierServiceModel.  # noqa: E501


        :return: The custom_values of this CarrierServiceModel.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CarrierServiceModel.


        :param custom_values: The custom_values of this CarrierServiceModel.  # noqa: E501
        :type: list[CustomValue]
        """

        self._custom_values = custom_values

    @property
    def service_containers(self):
        """Gets the service_containers of this CarrierServiceModel.  # noqa: E501


        :return: The service_containers of this CarrierServiceModel.  # noqa: E501
        :rtype: list[CarrierServiceContainer]
        """
        return self._service_containers

    @service_containers.setter
    def service_containers(self, service_containers):
        """Sets the service_containers of this CarrierServiceModel.


        :param service_containers: The service_containers of this CarrierServiceModel.  # noqa: E501
        :type: list[CarrierServiceContainer]
        """

        self._service_containers = service_containers

    @property
    def serialised_custom_fields(self):
        """Gets the serialised_custom_fields of this CarrierServiceModel.  # noqa: E501

        String'ed version of the carrier reference to this service.  This should only ever be used for carrier integration  # noqa: E501

        :return: The serialised_custom_fields of this CarrierServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._serialised_custom_fields

    @serialised_custom_fields.setter
    def serialised_custom_fields(self, serialised_custom_fields):
        """Sets the serialised_custom_fields of this CarrierServiceModel.

        String'ed version of the carrier reference to this service.  This should only ever be used for carrier integration  # noqa: E501

        :param serialised_custom_fields: The serialised_custom_fields of this CarrierServiceModel.  # noqa: E501
        :type: str
        """

        self._serialised_custom_fields = serialised_custom_fields

    @property
    def weight_rounding_type(self):
        """Gets the weight_rounding_type of this CarrierServiceModel.  # noqa: E501


        :return: The weight_rounding_type of this CarrierServiceModel.  # noqa: E501
        :rtype: WeightRoundingType
        """
        return self._weight_rounding_type

    @weight_rounding_type.setter
    def weight_rounding_type(self, weight_rounding_type):
        """Sets the weight_rounding_type of this CarrierServiceModel.


        :param weight_rounding_type: The weight_rounding_type of this CarrierServiceModel.  # noqa: E501
        :type: WeightRoundingType
        """

        self._weight_rounding_type = weight_rounding_type

    @property
    def pallet_spaces_rounding_type(self):
        """Gets the pallet_spaces_rounding_type of this CarrierServiceModel.  # noqa: E501


        :return: The pallet_spaces_rounding_type of this CarrierServiceModel.  # noqa: E501
        :rtype: WeightRoundingType
        """
        return self._pallet_spaces_rounding_type

    @pallet_spaces_rounding_type.setter
    def pallet_spaces_rounding_type(self, pallet_spaces_rounding_type):
        """Sets the pallet_spaces_rounding_type of this CarrierServiceModel.


        :param pallet_spaces_rounding_type: The pallet_spaces_rounding_type of this CarrierServiceModel.  # noqa: E501
        :type: WeightRoundingType
        """

        self._pallet_spaces_rounding_type = pallet_spaces_rounding_type

    @property
    def business_days_only(self):
        """Gets the business_days_only of this CarrierServiceModel.  # noqa: E501


        :return: The business_days_only of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._business_days_only

    @business_days_only.setter
    def business_days_only(self, business_days_only):
        """Sets the business_days_only of this CarrierServiceModel.


        :param business_days_only: The business_days_only of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._business_days_only = business_days_only

    @property
    def runs_on_public_holidays(self):
        """Gets the runs_on_public_holidays of this CarrierServiceModel.  # noqa: E501


        :return: The runs_on_public_holidays of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._runs_on_public_holidays

    @runs_on_public_holidays.setter
    def runs_on_public_holidays(self, runs_on_public_holidays):
        """Sets the runs_on_public_holidays of this CarrierServiceModel.


        :param runs_on_public_holidays: The runs_on_public_holidays of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._runs_on_public_holidays = runs_on_public_holidays

    @property
    def weight_pro_rata_calculation_type(self):
        """Gets the weight_pro_rata_calculation_type of this CarrierServiceModel.  # noqa: E501


        :return: The weight_pro_rata_calculation_type of this CarrierServiceModel.  # noqa: E501
        :rtype: WeightProRataCalculationType
        """
        return self._weight_pro_rata_calculation_type

    @weight_pro_rata_calculation_type.setter
    def weight_pro_rata_calculation_type(self, weight_pro_rata_calculation_type):
        """Sets the weight_pro_rata_calculation_type of this CarrierServiceModel.


        :param weight_pro_rata_calculation_type: The weight_pro_rata_calculation_type of this CarrierServiceModel.  # noqa: E501
        :type: WeightProRataCalculationType
        """

        self._weight_pro_rata_calculation_type = weight_pro_rata_calculation_type

    @property
    def consignment_batching_allowed(self):
        """Gets the consignment_batching_allowed of this CarrierServiceModel.  # noqa: E501

        A flag indicating whether this service allows Consignment Batching - ie multiple consignments  to be booked at once  # noqa: E501

        :return: The consignment_batching_allowed of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._consignment_batching_allowed

    @consignment_batching_allowed.setter
    def consignment_batching_allowed(self, consignment_batching_allowed):
        """Sets the consignment_batching_allowed of this CarrierServiceModel.

        A flag indicating whether this service allows Consignment Batching - ie multiple consignments  to be booked at once  # noqa: E501

        :param consignment_batching_allowed: The consignment_batching_allowed of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._consignment_batching_allowed = consignment_batching_allowed

    @property
    def routing_no_lane_rates_type(self):
        """Gets the routing_no_lane_rates_type of this CarrierServiceModel.  # noqa: E501


        :return: The routing_no_lane_rates_type of this CarrierServiceModel.  # noqa: E501
        :rtype: RoutingNoLaneRatesType
        """
        return self._routing_no_lane_rates_type

    @routing_no_lane_rates_type.setter
    def routing_no_lane_rates_type(self, routing_no_lane_rates_type):
        """Sets the routing_no_lane_rates_type of this CarrierServiceModel.


        :param routing_no_lane_rates_type: The routing_no_lane_rates_type of this CarrierServiceModel.  # noqa: E501
        :type: RoutingNoLaneRatesType
        """

        self._routing_no_lane_rates_type = routing_no_lane_rates_type

    @property
    def carrier_service_group_order(self):
        """Gets the carrier_service_group_order of this CarrierServiceModel.  # noqa: E501


        :return: The carrier_service_group_order of this CarrierServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_group_order

    @carrier_service_group_order.setter
    def carrier_service_group_order(self, carrier_service_group_order):
        """Sets the carrier_service_group_order of this CarrierServiceModel.


        :param carrier_service_group_order: The carrier_service_group_order of this CarrierServiceModel.  # noqa: E501
        :type: int
        """

        self._carrier_service_group_order = carrier_service_group_order

    @property
    def pricing_mechanism_type(self):
        """Gets the pricing_mechanism_type of this CarrierServiceModel.  # noqa: E501


        :return: The pricing_mechanism_type of this CarrierServiceModel.  # noqa: E501
        :rtype: PricingMechanismType
        """
        return self._pricing_mechanism_type

    @pricing_mechanism_type.setter
    def pricing_mechanism_type(self, pricing_mechanism_type):
        """Sets the pricing_mechanism_type of this CarrierServiceModel.


        :param pricing_mechanism_type: The pricing_mechanism_type of this CarrierServiceModel.  # noqa: E501
        :type: PricingMechanismType
        """

        self._pricing_mechanism_type = pricing_mechanism_type

    @property
    def enable_receiver_pays(self):
        """Gets the enable_receiver_pays of this CarrierServiceModel.  # noqa: E501


        :return: The enable_receiver_pays of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable_receiver_pays

    @enable_receiver_pays.setter
    def enable_receiver_pays(self, enable_receiver_pays):
        """Sets the enable_receiver_pays of this CarrierServiceModel.


        :param enable_receiver_pays: The enable_receiver_pays of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._enable_receiver_pays = enable_receiver_pays

    @property
    def is_hourly(self):
        """Gets the is_hourly of this CarrierServiceModel.  # noqa: E501


        :return: The is_hourly of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_hourly

    @is_hourly.setter
    def is_hourly(self, is_hourly):
        """Sets the is_hourly of this CarrierServiceModel.


        :param is_hourly: The is_hourly of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._is_hourly = is_hourly

    @property
    def dg_enabled(self):
        """Gets the dg_enabled of this CarrierServiceModel.  # noqa: E501


        :return: The dg_enabled of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._dg_enabled

    @dg_enabled.setter
    def dg_enabled(self, dg_enabled):
        """Sets the dg_enabled of this CarrierServiceModel.


        :param dg_enabled: The dg_enabled of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._dg_enabled = dg_enabled

    @property
    def allow_consignment_consolidation(self):
        """Gets the allow_consignment_consolidation of this CarrierServiceModel.  # noqa: E501

        This flag controls whether other consignments can be consolidated into a consignment of this service, and if  consignments of this service can be consolidated onto other consignments. Machship.Common.Models.Carriers.Carrier.AllowConsignmentConsolidation  will have to be set to true in addition to this for consolidation to happen  # noqa: E501

        :return: The allow_consignment_consolidation of this CarrierServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_consignment_consolidation

    @allow_consignment_consolidation.setter
    def allow_consignment_consolidation(self, allow_consignment_consolidation):
        """Sets the allow_consignment_consolidation of this CarrierServiceModel.

        This flag controls whether other consignments can be consolidated into a consignment of this service, and if  consignments of this service can be consolidated onto other consignments. Machship.Common.Models.Carriers.Carrier.AllowConsignmentConsolidation  will have to be set to true in addition to this for consolidation to happen  # noqa: E501

        :param allow_consignment_consolidation: The allow_consignment_consolidation of this CarrierServiceModel.  # noqa: E501
        :type: bool
        """

        self._allow_consignment_consolidation = allow_consignment_consolidation

    @property
    def pallet_space_pro_rata_type(self):
        """Gets the pallet_space_pro_rata_type of this CarrierServiceModel.  # noqa: E501


        :return: The pallet_space_pro_rata_type of this CarrierServiceModel.  # noqa: E501
        :rtype: ProRataType
        """
        return self._pallet_space_pro_rata_type

    @pallet_space_pro_rata_type.setter
    def pallet_space_pro_rata_type(self, pallet_space_pro_rata_type):
        """Sets the pallet_space_pro_rata_type of this CarrierServiceModel.


        :param pallet_space_pro_rata_type: The pallet_space_pro_rata_type of this CarrierServiceModel.  # noqa: E501
        :type: ProRataType
        """

        self._pallet_space_pro_rata_type = pallet_space_pro_rata_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierServiceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierServiceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
