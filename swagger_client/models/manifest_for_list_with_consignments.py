# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ManifestForListWithConsignments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'pickup_name_and_location': 'str',
        'despatch_date_local': 'datetime',
        'total': 'float',
        'carrier_name': 'str',
        'service_names': 'str',
        'carrier_and_service_name': 'str',
        'consignment_count': 'int',
        'pickup_location_description': 'str',
        'pickup_location': 'Location',
        'pickup_name': 'str',
        'is_dg_manifest': 'bool',
        'is_test': 'bool',
        'consignment_sub_dg_class_types': 'list[ConsignmentSubDgClassTypes]',
        'dg_class_type_and_sub_class_type_for_consignment': 'str',
        'total_rows': 'int',
        'can_remanifest': 'bool',
        'carrier_can_remanifest': 'bool',
        'carrier_account_id': 'int',
        'carrier_can_rebook_pickup': 'bool',
        'is_international': 'bool',
        'international_pickup_city': 'str',
        'international_pickup_province': 'str',
        'international_pickup_postcode': 'str',
        'international_pickup_country_id': 'int',
        'international_pickup_country': 'Country',
        'consignments': 'list[ManifestForListConsignment]'
    }

    attribute_map = {
        'id': 'id',
        'pickup_name_and_location': 'pickupNameAndLocation',
        'despatch_date_local': 'despatchDateLocal',
        'total': 'total',
        'carrier_name': 'carrierName',
        'service_names': 'serviceNames',
        'carrier_and_service_name': 'carrierAndServiceName',
        'consignment_count': 'consignmentCount',
        'pickup_location_description': 'pickupLocationDescription',
        'pickup_location': 'pickupLocation',
        'pickup_name': 'pickupName',
        'is_dg_manifest': 'isDgManifest',
        'is_test': 'isTest',
        'consignment_sub_dg_class_types': 'consignmentSubDgClassTypes',
        'dg_class_type_and_sub_class_type_for_consignment': 'dgClassTypeAndSubClassTypeForConsignment',
        'total_rows': 'totalRows',
        'can_remanifest': 'canRemanifest',
        'carrier_can_remanifest': 'carrierCanRemanifest',
        'carrier_account_id': 'carrierAccountId',
        'carrier_can_rebook_pickup': 'carrierCanRebookPickup',
        'is_international': 'isInternational',
        'international_pickup_city': 'internationalPickupCity',
        'international_pickup_province': 'internationalPickupProvince',
        'international_pickup_postcode': 'internationalPickupPostcode',
        'international_pickup_country_id': 'internationalPickupCountryId',
        'international_pickup_country': 'internationalPickupCountry',
        'consignments': 'consignments'
    }

    def __init__(self, id=None, pickup_name_and_location=None, despatch_date_local=None, total=None, carrier_name=None, service_names=None, carrier_and_service_name=None, consignment_count=None, pickup_location_description=None, pickup_location=None, pickup_name=None, is_dg_manifest=None, is_test=None, consignment_sub_dg_class_types=None, dg_class_type_and_sub_class_type_for_consignment=None, total_rows=None, can_remanifest=None, carrier_can_remanifest=None, carrier_account_id=None, carrier_can_rebook_pickup=None, is_international=None, international_pickup_city=None, international_pickup_province=None, international_pickup_postcode=None, international_pickup_country_id=None, international_pickup_country=None, consignments=None):  # noqa: E501
        """ManifestForListWithConsignments - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._pickup_name_and_location = None
        self._despatch_date_local = None
        self._total = None
        self._carrier_name = None
        self._service_names = None
        self._carrier_and_service_name = None
        self._consignment_count = None
        self._pickup_location_description = None
        self._pickup_location = None
        self._pickup_name = None
        self._is_dg_manifest = None
        self._is_test = None
        self._consignment_sub_dg_class_types = None
        self._dg_class_type_and_sub_class_type_for_consignment = None
        self._total_rows = None
        self._can_remanifest = None
        self._carrier_can_remanifest = None
        self._carrier_account_id = None
        self._carrier_can_rebook_pickup = None
        self._is_international = None
        self._international_pickup_city = None
        self._international_pickup_province = None
        self._international_pickup_postcode = None
        self._international_pickup_country_id = None
        self._international_pickup_country = None
        self._consignments = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if pickup_name_and_location is not None:
            self.pickup_name_and_location = pickup_name_and_location
        if despatch_date_local is not None:
            self.despatch_date_local = despatch_date_local
        if total is not None:
            self.total = total
        if carrier_name is not None:
            self.carrier_name = carrier_name
        if service_names is not None:
            self.service_names = service_names
        if carrier_and_service_name is not None:
            self.carrier_and_service_name = carrier_and_service_name
        if consignment_count is not None:
            self.consignment_count = consignment_count
        if pickup_location_description is not None:
            self.pickup_location_description = pickup_location_description
        if pickup_location is not None:
            self.pickup_location = pickup_location
        if pickup_name is not None:
            self.pickup_name = pickup_name
        if is_dg_manifest is not None:
            self.is_dg_manifest = is_dg_manifest
        if is_test is not None:
            self.is_test = is_test
        if consignment_sub_dg_class_types is not None:
            self.consignment_sub_dg_class_types = consignment_sub_dg_class_types
        if dg_class_type_and_sub_class_type_for_consignment is not None:
            self.dg_class_type_and_sub_class_type_for_consignment = dg_class_type_and_sub_class_type_for_consignment
        if total_rows is not None:
            self.total_rows = total_rows
        if can_remanifest is not None:
            self.can_remanifest = can_remanifest
        if carrier_can_remanifest is not None:
            self.carrier_can_remanifest = carrier_can_remanifest
        if carrier_account_id is not None:
            self.carrier_account_id = carrier_account_id
        if carrier_can_rebook_pickup is not None:
            self.carrier_can_rebook_pickup = carrier_can_rebook_pickup
        if is_international is not None:
            self.is_international = is_international
        if international_pickup_city is not None:
            self.international_pickup_city = international_pickup_city
        if international_pickup_province is not None:
            self.international_pickup_province = international_pickup_province
        if international_pickup_postcode is not None:
            self.international_pickup_postcode = international_pickup_postcode
        if international_pickup_country_id is not None:
            self.international_pickup_country_id = international_pickup_country_id
        if international_pickup_country is not None:
            self.international_pickup_country = international_pickup_country
        if consignments is not None:
            self.consignments = consignments

    @property
    def id(self):
        """Gets the id of this ManifestForListWithConsignments.  # noqa: E501


        :return: The id of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManifestForListWithConsignments.


        :param id: The id of this ManifestForListWithConsignments.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pickup_name_and_location(self):
        """Gets the pickup_name_and_location of this ManifestForListWithConsignments.  # noqa: E501


        :return: The pickup_name_and_location of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._pickup_name_and_location

    @pickup_name_and_location.setter
    def pickup_name_and_location(self, pickup_name_and_location):
        """Sets the pickup_name_and_location of this ManifestForListWithConsignments.


        :param pickup_name_and_location: The pickup_name_and_location of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._pickup_name_and_location = pickup_name_and_location

    @property
    def despatch_date_local(self):
        """Gets the despatch_date_local of this ManifestForListWithConsignments.  # noqa: E501


        :return: The despatch_date_local of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: datetime
        """
        return self._despatch_date_local

    @despatch_date_local.setter
    def despatch_date_local(self, despatch_date_local):
        """Sets the despatch_date_local of this ManifestForListWithConsignments.


        :param despatch_date_local: The despatch_date_local of this ManifestForListWithConsignments.  # noqa: E501
        :type: datetime
        """

        self._despatch_date_local = despatch_date_local

    @property
    def total(self):
        """Gets the total of this ManifestForListWithConsignments.  # noqa: E501


        :return: The total of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ManifestForListWithConsignments.


        :param total: The total of this ManifestForListWithConsignments.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def carrier_name(self):
        """Gets the carrier_name of this ManifestForListWithConsignments.  # noqa: E501


        :return: The carrier_name of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this ManifestForListWithConsignments.


        :param carrier_name: The carrier_name of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._carrier_name = carrier_name

    @property
    def service_names(self):
        """Gets the service_names of this ManifestForListWithConsignments.  # noqa: E501


        :return: The service_names of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this ManifestForListWithConsignments.


        :param service_names: The service_names of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._service_names = service_names

    @property
    def carrier_and_service_name(self):
        """Gets the carrier_and_service_name of this ManifestForListWithConsignments.  # noqa: E501


        :return: The carrier_and_service_name of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._carrier_and_service_name

    @carrier_and_service_name.setter
    def carrier_and_service_name(self, carrier_and_service_name):
        """Sets the carrier_and_service_name of this ManifestForListWithConsignments.


        :param carrier_and_service_name: The carrier_and_service_name of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._carrier_and_service_name = carrier_and_service_name

    @property
    def consignment_count(self):
        """Gets the consignment_count of this ManifestForListWithConsignments.  # noqa: E501


        :return: The consignment_count of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: int
        """
        return self._consignment_count

    @consignment_count.setter
    def consignment_count(self, consignment_count):
        """Sets the consignment_count of this ManifestForListWithConsignments.


        :param consignment_count: The consignment_count of this ManifestForListWithConsignments.  # noqa: E501
        :type: int
        """

        self._consignment_count = consignment_count

    @property
    def pickup_location_description(self):
        """Gets the pickup_location_description of this ManifestForListWithConsignments.  # noqa: E501


        :return: The pickup_location_description of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._pickup_location_description

    @pickup_location_description.setter
    def pickup_location_description(self, pickup_location_description):
        """Sets the pickup_location_description of this ManifestForListWithConsignments.


        :param pickup_location_description: The pickup_location_description of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._pickup_location_description = pickup_location_description

    @property
    def pickup_location(self):
        """Gets the pickup_location of this ManifestForListWithConsignments.  # noqa: E501


        :return: The pickup_location of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: Location
        """
        return self._pickup_location

    @pickup_location.setter
    def pickup_location(self, pickup_location):
        """Sets the pickup_location of this ManifestForListWithConsignments.


        :param pickup_location: The pickup_location of this ManifestForListWithConsignments.  # noqa: E501
        :type: Location
        """

        self._pickup_location = pickup_location

    @property
    def pickup_name(self):
        """Gets the pickup_name of this ManifestForListWithConsignments.  # noqa: E501


        :return: The pickup_name of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._pickup_name

    @pickup_name.setter
    def pickup_name(self, pickup_name):
        """Sets the pickup_name of this ManifestForListWithConsignments.


        :param pickup_name: The pickup_name of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._pickup_name = pickup_name

    @property
    def is_dg_manifest(self):
        """Gets the is_dg_manifest of this ManifestForListWithConsignments.  # noqa: E501


        :return: The is_dg_manifest of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: bool
        """
        return self._is_dg_manifest

    @is_dg_manifest.setter
    def is_dg_manifest(self, is_dg_manifest):
        """Sets the is_dg_manifest of this ManifestForListWithConsignments.


        :param is_dg_manifest: The is_dg_manifest of this ManifestForListWithConsignments.  # noqa: E501
        :type: bool
        """

        self._is_dg_manifest = is_dg_manifest

    @property
    def is_test(self):
        """Gets the is_test of this ManifestForListWithConsignments.  # noqa: E501


        :return: The is_test of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this ManifestForListWithConsignments.


        :param is_test: The is_test of this ManifestForListWithConsignments.  # noqa: E501
        :type: bool
        """

        self._is_test = is_test

    @property
    def consignment_sub_dg_class_types(self):
        """Gets the consignment_sub_dg_class_types of this ManifestForListWithConsignments.  # noqa: E501


        :return: The consignment_sub_dg_class_types of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: list[ConsignmentSubDgClassTypes]
        """
        return self._consignment_sub_dg_class_types

    @consignment_sub_dg_class_types.setter
    def consignment_sub_dg_class_types(self, consignment_sub_dg_class_types):
        """Sets the consignment_sub_dg_class_types of this ManifestForListWithConsignments.


        :param consignment_sub_dg_class_types: The consignment_sub_dg_class_types of this ManifestForListWithConsignments.  # noqa: E501
        :type: list[ConsignmentSubDgClassTypes]
        """

        self._consignment_sub_dg_class_types = consignment_sub_dg_class_types

    @property
    def dg_class_type_and_sub_class_type_for_consignment(self):
        """Gets the dg_class_type_and_sub_class_type_for_consignment of this ManifestForListWithConsignments.  # noqa: E501


        :return: The dg_class_type_and_sub_class_type_for_consignment of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._dg_class_type_and_sub_class_type_for_consignment

    @dg_class_type_and_sub_class_type_for_consignment.setter
    def dg_class_type_and_sub_class_type_for_consignment(self, dg_class_type_and_sub_class_type_for_consignment):
        """Sets the dg_class_type_and_sub_class_type_for_consignment of this ManifestForListWithConsignments.


        :param dg_class_type_and_sub_class_type_for_consignment: The dg_class_type_and_sub_class_type_for_consignment of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._dg_class_type_and_sub_class_type_for_consignment = dg_class_type_and_sub_class_type_for_consignment

    @property
    def total_rows(self):
        """Gets the total_rows of this ManifestForListWithConsignments.  # noqa: E501


        :return: The total_rows of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this ManifestForListWithConsignments.


        :param total_rows: The total_rows of this ManifestForListWithConsignments.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def can_remanifest(self):
        """Gets the can_remanifest of this ManifestForListWithConsignments.  # noqa: E501


        :return: The can_remanifest of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: bool
        """
        return self._can_remanifest

    @can_remanifest.setter
    def can_remanifest(self, can_remanifest):
        """Sets the can_remanifest of this ManifestForListWithConsignments.


        :param can_remanifest: The can_remanifest of this ManifestForListWithConsignments.  # noqa: E501
        :type: bool
        """

        self._can_remanifest = can_remanifest

    @property
    def carrier_can_remanifest(self):
        """Gets the carrier_can_remanifest of this ManifestForListWithConsignments.  # noqa: E501


        :return: The carrier_can_remanifest of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: bool
        """
        return self._carrier_can_remanifest

    @carrier_can_remanifest.setter
    def carrier_can_remanifest(self, carrier_can_remanifest):
        """Sets the carrier_can_remanifest of this ManifestForListWithConsignments.


        :param carrier_can_remanifest: The carrier_can_remanifest of this ManifestForListWithConsignments.  # noqa: E501
        :type: bool
        """

        self._carrier_can_remanifest = carrier_can_remanifest

    @property
    def carrier_account_id(self):
        """Gets the carrier_account_id of this ManifestForListWithConsignments.  # noqa: E501


        :return: The carrier_account_id of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: int
        """
        return self._carrier_account_id

    @carrier_account_id.setter
    def carrier_account_id(self, carrier_account_id):
        """Sets the carrier_account_id of this ManifestForListWithConsignments.


        :param carrier_account_id: The carrier_account_id of this ManifestForListWithConsignments.  # noqa: E501
        :type: int
        """

        self._carrier_account_id = carrier_account_id

    @property
    def carrier_can_rebook_pickup(self):
        """Gets the carrier_can_rebook_pickup of this ManifestForListWithConsignments.  # noqa: E501


        :return: The carrier_can_rebook_pickup of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: bool
        """
        return self._carrier_can_rebook_pickup

    @carrier_can_rebook_pickup.setter
    def carrier_can_rebook_pickup(self, carrier_can_rebook_pickup):
        """Sets the carrier_can_rebook_pickup of this ManifestForListWithConsignments.


        :param carrier_can_rebook_pickup: The carrier_can_rebook_pickup of this ManifestForListWithConsignments.  # noqa: E501
        :type: bool
        """

        self._carrier_can_rebook_pickup = carrier_can_rebook_pickup

    @property
    def is_international(self):
        """Gets the is_international of this ManifestForListWithConsignments.  # noqa: E501


        :return: The is_international of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: bool
        """
        return self._is_international

    @is_international.setter
    def is_international(self, is_international):
        """Sets the is_international of this ManifestForListWithConsignments.


        :param is_international: The is_international of this ManifestForListWithConsignments.  # noqa: E501
        :type: bool
        """

        self._is_international = is_international

    @property
    def international_pickup_city(self):
        """Gets the international_pickup_city of this ManifestForListWithConsignments.  # noqa: E501


        :return: The international_pickup_city of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._international_pickup_city

    @international_pickup_city.setter
    def international_pickup_city(self, international_pickup_city):
        """Sets the international_pickup_city of this ManifestForListWithConsignments.


        :param international_pickup_city: The international_pickup_city of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._international_pickup_city = international_pickup_city

    @property
    def international_pickup_province(self):
        """Gets the international_pickup_province of this ManifestForListWithConsignments.  # noqa: E501


        :return: The international_pickup_province of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._international_pickup_province

    @international_pickup_province.setter
    def international_pickup_province(self, international_pickup_province):
        """Sets the international_pickup_province of this ManifestForListWithConsignments.


        :param international_pickup_province: The international_pickup_province of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._international_pickup_province = international_pickup_province

    @property
    def international_pickup_postcode(self):
        """Gets the international_pickup_postcode of this ManifestForListWithConsignments.  # noqa: E501


        :return: The international_pickup_postcode of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: str
        """
        return self._international_pickup_postcode

    @international_pickup_postcode.setter
    def international_pickup_postcode(self, international_pickup_postcode):
        """Sets the international_pickup_postcode of this ManifestForListWithConsignments.


        :param international_pickup_postcode: The international_pickup_postcode of this ManifestForListWithConsignments.  # noqa: E501
        :type: str
        """

        self._international_pickup_postcode = international_pickup_postcode

    @property
    def international_pickup_country_id(self):
        """Gets the international_pickup_country_id of this ManifestForListWithConsignments.  # noqa: E501


        :return: The international_pickup_country_id of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: int
        """
        return self._international_pickup_country_id

    @international_pickup_country_id.setter
    def international_pickup_country_id(self, international_pickup_country_id):
        """Sets the international_pickup_country_id of this ManifestForListWithConsignments.


        :param international_pickup_country_id: The international_pickup_country_id of this ManifestForListWithConsignments.  # noqa: E501
        :type: int
        """

        self._international_pickup_country_id = international_pickup_country_id

    @property
    def international_pickup_country(self):
        """Gets the international_pickup_country of this ManifestForListWithConsignments.  # noqa: E501


        :return: The international_pickup_country of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: Country
        """
        return self._international_pickup_country

    @international_pickup_country.setter
    def international_pickup_country(self, international_pickup_country):
        """Sets the international_pickup_country of this ManifestForListWithConsignments.


        :param international_pickup_country: The international_pickup_country of this ManifestForListWithConsignments.  # noqa: E501
        :type: Country
        """

        self._international_pickup_country = international_pickup_country

    @property
    def consignments(self):
        """Gets the consignments of this ManifestForListWithConsignments.  # noqa: E501


        :return: The consignments of this ManifestForListWithConsignments.  # noqa: E501
        :rtype: list[ManifestForListConsignment]
        """
        return self._consignments

    @consignments.setter
    def consignments(self, consignments):
        """Sets the consignments of this ManifestForListWithConsignments.


        :param consignments: The consignments of this ManifestForListWithConsignments.  # noqa: E501
        :type: list[ManifestForListConsignment]
        """

        self._consignments = consignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManifestForListWithConsignments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManifestForListWithConsignments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
