# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleRouteV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'carrier': 'CarrierLiteWithCustomFieldSets',
        'carrier_service': 'CarrierServiceLite',
        'carrier_account': 'CarrierAccountLite',
        'company_carrier_account_id': 'int',
        'company_id': 'int',
        'consignment_total': 'ConsignmentTotal',
        'from_company_location_id': 'int',
        'from_address': 'Address',
        'from_location': 'LocationV2',
        'from_zone': 'CarrierZoneLite',
        'to_company_location_id': 'int',
        'to_address': 'Address',
        'to_location': 'LocationV2',
        'to_zone': 'CarrierZoneLite',
        'despatch_options': 'list[RouteDespatchOptionLite]',
        'fuel_levy_percentage': 'float',
        'sell_fuel_levy_percentage': 'float',
        'tax_percentage': 'float',
        'elective_surcharges': 'list[ConsignmentSurchargeV2]',
        'automatic_surcharges': 'list[ConsignmentSurchargeV2]',
        'total_weight': 'float',
        'total_cubic': 'float',
        'total_volume': 'float',
        'carrier_logo_file_name': 'str',
        'price_display': 'float',
        'price_display_type': 'QuoteTotalDisplayType',
        'is_hourly': 'bool'
    }

    attribute_map = {
        'request_id': 'requestId',
        'carrier': 'carrier',
        'carrier_service': 'carrierService',
        'carrier_account': 'carrierAccount',
        'company_carrier_account_id': 'companyCarrierAccountId',
        'company_id': 'companyId',
        'consignment_total': 'consignmentTotal',
        'from_company_location_id': 'fromCompanyLocationId',
        'from_address': 'fromAddress',
        'from_location': 'fromLocation',
        'from_zone': 'fromZone',
        'to_company_location_id': 'toCompanyLocationId',
        'to_address': 'toAddress',
        'to_location': 'toLocation',
        'to_zone': 'toZone',
        'despatch_options': 'despatchOptions',
        'fuel_levy_percentage': 'fuelLevyPercentage',
        'sell_fuel_levy_percentage': 'sellFuelLevyPercentage',
        'tax_percentage': 'taxPercentage',
        'elective_surcharges': 'electiveSurcharges',
        'automatic_surcharges': 'automaticSurcharges',
        'total_weight': 'totalWeight',
        'total_cubic': 'totalCubic',
        'total_volume': 'totalVolume',
        'carrier_logo_file_name': 'carrierLogoFileName',
        'price_display': 'priceDisplay',
        'price_display_type': 'priceDisplayType',
        'is_hourly': 'isHourly'
    }

    def __init__(self, request_id=None, carrier=None, carrier_service=None, carrier_account=None, company_carrier_account_id=None, company_id=None, consignment_total=None, from_company_location_id=None, from_address=None, from_location=None, from_zone=None, to_company_location_id=None, to_address=None, to_location=None, to_zone=None, despatch_options=None, fuel_levy_percentage=None, sell_fuel_levy_percentage=None, tax_percentage=None, elective_surcharges=None, automatic_surcharges=None, total_weight=None, total_cubic=None, total_volume=None, carrier_logo_file_name=None, price_display=None, price_display_type=None, is_hourly=None):  # noqa: E501
        """SimpleRouteV2 - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._carrier = None
        self._carrier_service = None
        self._carrier_account = None
        self._company_carrier_account_id = None
        self._company_id = None
        self._consignment_total = None
        self._from_company_location_id = None
        self._from_address = None
        self._from_location = None
        self._from_zone = None
        self._to_company_location_id = None
        self._to_address = None
        self._to_location = None
        self._to_zone = None
        self._despatch_options = None
        self._fuel_levy_percentage = None
        self._sell_fuel_levy_percentage = None
        self._tax_percentage = None
        self._elective_surcharges = None
        self._automatic_surcharges = None
        self._total_weight = None
        self._total_cubic = None
        self._total_volume = None
        self._carrier_logo_file_name = None
        self._price_display = None
        self._price_display_type = None
        self._is_hourly = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if carrier is not None:
            self.carrier = carrier
        if carrier_service is not None:
            self.carrier_service = carrier_service
        if carrier_account is not None:
            self.carrier_account = carrier_account
        if company_carrier_account_id is not None:
            self.company_carrier_account_id = company_carrier_account_id
        if company_id is not None:
            self.company_id = company_id
        if consignment_total is not None:
            self.consignment_total = consignment_total
        if from_company_location_id is not None:
            self.from_company_location_id = from_company_location_id
        if from_address is not None:
            self.from_address = from_address
        if from_location is not None:
            self.from_location = from_location
        if from_zone is not None:
            self.from_zone = from_zone
        if to_company_location_id is not None:
            self.to_company_location_id = to_company_location_id
        if to_address is not None:
            self.to_address = to_address
        if to_location is not None:
            self.to_location = to_location
        if to_zone is not None:
            self.to_zone = to_zone
        if despatch_options is not None:
            self.despatch_options = despatch_options
        if fuel_levy_percentage is not None:
            self.fuel_levy_percentage = fuel_levy_percentage
        if sell_fuel_levy_percentage is not None:
            self.sell_fuel_levy_percentage = sell_fuel_levy_percentage
        if tax_percentage is not None:
            self.tax_percentage = tax_percentage
        if elective_surcharges is not None:
            self.elective_surcharges = elective_surcharges
        if automatic_surcharges is not None:
            self.automatic_surcharges = automatic_surcharges
        if total_weight is not None:
            self.total_weight = total_weight
        if total_cubic is not None:
            self.total_cubic = total_cubic
        if total_volume is not None:
            self.total_volume = total_volume
        if carrier_logo_file_name is not None:
            self.carrier_logo_file_name = carrier_logo_file_name
        if price_display is not None:
            self.price_display = price_display
        if price_display_type is not None:
            self.price_display_type = price_display_type
        if is_hourly is not None:
            self.is_hourly = is_hourly

    @property
    def request_id(self):
        """Gets the request_id of this SimpleRouteV2.  # noqa: E501

        The GUID which can be used to match a response back to the request made for it  # noqa: E501

        :return: The request_id of this SimpleRouteV2.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SimpleRouteV2.

        The GUID which can be used to match a response back to the request made for it  # noqa: E501

        :param request_id: The request_id of this SimpleRouteV2.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def carrier(self):
        """Gets the carrier of this SimpleRouteV2.  # noqa: E501


        :return: The carrier of this SimpleRouteV2.  # noqa: E501
        :rtype: CarrierLiteWithCustomFieldSets
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this SimpleRouteV2.


        :param carrier: The carrier of this SimpleRouteV2.  # noqa: E501
        :type: CarrierLiteWithCustomFieldSets
        """

        self._carrier = carrier

    @property
    def carrier_service(self):
        """Gets the carrier_service of this SimpleRouteV2.  # noqa: E501


        :return: The carrier_service of this SimpleRouteV2.  # noqa: E501
        :rtype: CarrierServiceLite
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this SimpleRouteV2.


        :param carrier_service: The carrier_service of this SimpleRouteV2.  # noqa: E501
        :type: CarrierServiceLite
        """

        self._carrier_service = carrier_service

    @property
    def carrier_account(self):
        """Gets the carrier_account of this SimpleRouteV2.  # noqa: E501


        :return: The carrier_account of this SimpleRouteV2.  # noqa: E501
        :rtype: CarrierAccountLite
        """
        return self._carrier_account

    @carrier_account.setter
    def carrier_account(self, carrier_account):
        """Sets the carrier_account of this SimpleRouteV2.


        :param carrier_account: The carrier_account of this SimpleRouteV2.  # noqa: E501
        :type: CarrierAccountLite
        """

        self._carrier_account = carrier_account

    @property
    def company_carrier_account_id(self):
        """Gets the company_carrier_account_id of this SimpleRouteV2.  # noqa: E501

        The Company Carrier Account for the route  # noqa: E501

        :return: The company_carrier_account_id of this SimpleRouteV2.  # noqa: E501
        :rtype: int
        """
        return self._company_carrier_account_id

    @company_carrier_account_id.setter
    def company_carrier_account_id(self, company_carrier_account_id):
        """Sets the company_carrier_account_id of this SimpleRouteV2.

        The Company Carrier Account for the route  # noqa: E501

        :param company_carrier_account_id: The company_carrier_account_id of this SimpleRouteV2.  # noqa: E501
        :type: int
        """

        self._company_carrier_account_id = company_carrier_account_id

    @property
    def company_id(self):
        """Gets the company_id of this SimpleRouteV2.  # noqa: E501

        The Machship ID of the Company the route is connected to  # noqa: E501

        :return: The company_id of this SimpleRouteV2.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this SimpleRouteV2.

        The Machship ID of the Company the route is connected to  # noqa: E501

        :param company_id: The company_id of this SimpleRouteV2.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def consignment_total(self):
        """Gets the consignment_total of this SimpleRouteV2.  # noqa: E501


        :return: The consignment_total of this SimpleRouteV2.  # noqa: E501
        :rtype: ConsignmentTotal
        """
        return self._consignment_total

    @consignment_total.setter
    def consignment_total(self, consignment_total):
        """Sets the consignment_total of this SimpleRouteV2.


        :param consignment_total: The consignment_total of this SimpleRouteV2.  # noqa: E501
        :type: ConsignmentTotal
        """

        self._consignment_total = consignment_total

    @property
    def from_company_location_id(self):
        """Gets the from_company_location_id of this SimpleRouteV2.  # noqa: E501

        The Machship ID of the From Company Location  # noqa: E501

        :return: The from_company_location_id of this SimpleRouteV2.  # noqa: E501
        :rtype: int
        """
        return self._from_company_location_id

    @from_company_location_id.setter
    def from_company_location_id(self, from_company_location_id):
        """Sets the from_company_location_id of this SimpleRouteV2.

        The Machship ID of the From Company Location  # noqa: E501

        :param from_company_location_id: The from_company_location_id of this SimpleRouteV2.  # noqa: E501
        :type: int
        """

        self._from_company_location_id = from_company_location_id

    @property
    def from_address(self):
        """Gets the from_address of this SimpleRouteV2.  # noqa: E501


        :return: The from_address of this SimpleRouteV2.  # noqa: E501
        :rtype: Address
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this SimpleRouteV2.


        :param from_address: The from_address of this SimpleRouteV2.  # noqa: E501
        :type: Address
        """

        self._from_address = from_address

    @property
    def from_location(self):
        """Gets the from_location of this SimpleRouteV2.  # noqa: E501


        :return: The from_location of this SimpleRouteV2.  # noqa: E501
        :rtype: LocationV2
        """
        return self._from_location

    @from_location.setter
    def from_location(self, from_location):
        """Sets the from_location of this SimpleRouteV2.


        :param from_location: The from_location of this SimpleRouteV2.  # noqa: E501
        :type: LocationV2
        """

        self._from_location = from_location

    @property
    def from_zone(self):
        """Gets the from_zone of this SimpleRouteV2.  # noqa: E501


        :return: The from_zone of this SimpleRouteV2.  # noqa: E501
        :rtype: CarrierZoneLite
        """
        return self._from_zone

    @from_zone.setter
    def from_zone(self, from_zone):
        """Sets the from_zone of this SimpleRouteV2.


        :param from_zone: The from_zone of this SimpleRouteV2.  # noqa: E501
        :type: CarrierZoneLite
        """

        self._from_zone = from_zone

    @property
    def to_company_location_id(self):
        """Gets the to_company_location_id of this SimpleRouteV2.  # noqa: E501

        The Machship ID of the To Company Location  # noqa: E501

        :return: The to_company_location_id of this SimpleRouteV2.  # noqa: E501
        :rtype: int
        """
        return self._to_company_location_id

    @to_company_location_id.setter
    def to_company_location_id(self, to_company_location_id):
        """Sets the to_company_location_id of this SimpleRouteV2.

        The Machship ID of the To Company Location  # noqa: E501

        :param to_company_location_id: The to_company_location_id of this SimpleRouteV2.  # noqa: E501
        :type: int
        """

        self._to_company_location_id = to_company_location_id

    @property
    def to_address(self):
        """Gets the to_address of this SimpleRouteV2.  # noqa: E501


        :return: The to_address of this SimpleRouteV2.  # noqa: E501
        :rtype: Address
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this SimpleRouteV2.


        :param to_address: The to_address of this SimpleRouteV2.  # noqa: E501
        :type: Address
        """

        self._to_address = to_address

    @property
    def to_location(self):
        """Gets the to_location of this SimpleRouteV2.  # noqa: E501


        :return: The to_location of this SimpleRouteV2.  # noqa: E501
        :rtype: LocationV2
        """
        return self._to_location

    @to_location.setter
    def to_location(self, to_location):
        """Sets the to_location of this SimpleRouteV2.


        :param to_location: The to_location of this SimpleRouteV2.  # noqa: E501
        :type: LocationV2
        """

        self._to_location = to_location

    @property
    def to_zone(self):
        """Gets the to_zone of this SimpleRouteV2.  # noqa: E501


        :return: The to_zone of this SimpleRouteV2.  # noqa: E501
        :rtype: CarrierZoneLite
        """
        return self._to_zone

    @to_zone.setter
    def to_zone(self, to_zone):
        """Sets the to_zone of this SimpleRouteV2.


        :param to_zone: The to_zone of this SimpleRouteV2.  # noqa: E501
        :type: CarrierZoneLite
        """

        self._to_zone = to_zone

    @property
    def despatch_options(self):
        """Gets the despatch_options of this SimpleRouteV2.  # noqa: E501

        The despatch options for this route  # noqa: E501

        :return: The despatch_options of this SimpleRouteV2.  # noqa: E501
        :rtype: list[RouteDespatchOptionLite]
        """
        return self._despatch_options

    @despatch_options.setter
    def despatch_options(self, despatch_options):
        """Sets the despatch_options of this SimpleRouteV2.

        The despatch options for this route  # noqa: E501

        :param despatch_options: The despatch_options of this SimpleRouteV2.  # noqa: E501
        :type: list[RouteDespatchOptionLite]
        """

        self._despatch_options = despatch_options

    @property
    def fuel_levy_percentage(self):
        """Gets the fuel_levy_percentage of this SimpleRouteV2.  # noqa: E501


        :return: The fuel_levy_percentage of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._fuel_levy_percentage

    @fuel_levy_percentage.setter
    def fuel_levy_percentage(self, fuel_levy_percentage):
        """Sets the fuel_levy_percentage of this SimpleRouteV2.


        :param fuel_levy_percentage: The fuel_levy_percentage of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._fuel_levy_percentage = fuel_levy_percentage

    @property
    def sell_fuel_levy_percentage(self):
        """Gets the sell_fuel_levy_percentage of this SimpleRouteV2.  # noqa: E501


        :return: The sell_fuel_levy_percentage of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._sell_fuel_levy_percentage

    @sell_fuel_levy_percentage.setter
    def sell_fuel_levy_percentage(self, sell_fuel_levy_percentage):
        """Sets the sell_fuel_levy_percentage of this SimpleRouteV2.


        :param sell_fuel_levy_percentage: The sell_fuel_levy_percentage of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._sell_fuel_levy_percentage = sell_fuel_levy_percentage

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this SimpleRouteV2.  # noqa: E501


        :return: The tax_percentage of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this SimpleRouteV2.


        :param tax_percentage: The tax_percentage of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._tax_percentage = tax_percentage

    @property
    def elective_surcharges(self):
        """Gets the elective_surcharges of this SimpleRouteV2.  # noqa: E501

        Contains all Elective surcharges  # noqa: E501

        :return: The elective_surcharges of this SimpleRouteV2.  # noqa: E501
        :rtype: list[ConsignmentSurchargeV2]
        """
        return self._elective_surcharges

    @elective_surcharges.setter
    def elective_surcharges(self, elective_surcharges):
        """Sets the elective_surcharges of this SimpleRouteV2.

        Contains all Elective surcharges  # noqa: E501

        :param elective_surcharges: The elective_surcharges of this SimpleRouteV2.  # noqa: E501
        :type: list[ConsignmentSurchargeV2]
        """

        self._elective_surcharges = elective_surcharges

    @property
    def automatic_surcharges(self):
        """Gets the automatic_surcharges of this SimpleRouteV2.  # noqa: E501

        Contains all Automatic Surchanges  # noqa: E501

        :return: The automatic_surcharges of this SimpleRouteV2.  # noqa: E501
        :rtype: list[ConsignmentSurchargeV2]
        """
        return self._automatic_surcharges

    @automatic_surcharges.setter
    def automatic_surcharges(self, automatic_surcharges):
        """Sets the automatic_surcharges of this SimpleRouteV2.

        Contains all Automatic Surchanges  # noqa: E501

        :param automatic_surcharges: The automatic_surcharges of this SimpleRouteV2.  # noqa: E501
        :type: list[ConsignmentSurchargeV2]
        """

        self._automatic_surcharges = automatic_surcharges

    @property
    def total_weight(self):
        """Gets the total_weight of this SimpleRouteV2.  # noqa: E501

        The total weight of all items in the current consignment  # noqa: E501

        :return: The total_weight of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this SimpleRouteV2.

        The total weight of all items in the current consignment  # noqa: E501

        :param total_weight: The total_weight of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._total_weight = total_weight

    @property
    def total_cubic(self):
        """Gets the total_cubic of this SimpleRouteV2.  # noqa: E501

        The total cubic weight of all items in the current consignment  # noqa: E501

        :return: The total_cubic of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._total_cubic

    @total_cubic.setter
    def total_cubic(self, total_cubic):
        """Sets the total_cubic of this SimpleRouteV2.

        The total cubic weight of all items in the current consignment  # noqa: E501

        :param total_cubic: The total_cubic of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._total_cubic = total_cubic

    @property
    def total_volume(self):
        """Gets the total_volume of this SimpleRouteV2.  # noqa: E501

        The total volume of all items in the current consignment  # noqa: E501

        :return: The total_volume of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this SimpleRouteV2.

        The total volume of all items in the current consignment  # noqa: E501

        :param total_volume: The total_volume of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._total_volume = total_volume

    @property
    def carrier_logo_file_name(self):
        """Gets the carrier_logo_file_name of this SimpleRouteV2.  # noqa: E501

        the carrier's image filename. This file can be found at {machshipenvironment}/app/css/img/carrierLogos/{carrierLogoFileName}  # noqa: E501

        :return: The carrier_logo_file_name of this SimpleRouteV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_logo_file_name

    @carrier_logo_file_name.setter
    def carrier_logo_file_name(self, carrier_logo_file_name):
        """Sets the carrier_logo_file_name of this SimpleRouteV2.

        the carrier's image filename. This file can be found at {machshipenvironment}/app/css/img/carrierLogos/{carrierLogoFileName}  # noqa: E501

        :param carrier_logo_file_name: The carrier_logo_file_name of this SimpleRouteV2.  # noqa: E501
        :type: str
        """

        self._carrier_logo_file_name = carrier_logo_file_name

    @property
    def price_display(self):
        """Gets the price_display of this SimpleRouteV2.  # noqa: E501


        :return: The price_display of this SimpleRouteV2.  # noqa: E501
        :rtype: float
        """
        return self._price_display

    @price_display.setter
    def price_display(self, price_display):
        """Sets the price_display of this SimpleRouteV2.


        :param price_display: The price_display of this SimpleRouteV2.  # noqa: E501
        :type: float
        """

        self._price_display = price_display

    @property
    def price_display_type(self):
        """Gets the price_display_type of this SimpleRouteV2.  # noqa: E501


        :return: The price_display_type of this SimpleRouteV2.  # noqa: E501
        :rtype: QuoteTotalDisplayType
        """
        return self._price_display_type

    @price_display_type.setter
    def price_display_type(self, price_display_type):
        """Sets the price_display_type of this SimpleRouteV2.


        :param price_display_type: The price_display_type of this SimpleRouteV2.  # noqa: E501
        :type: QuoteTotalDisplayType
        """

        self._price_display_type = price_display_type

    @property
    def is_hourly(self):
        """Gets the is_hourly of this SimpleRouteV2.  # noqa: E501


        :return: The is_hourly of this SimpleRouteV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_hourly

    @is_hourly.setter
    def is_hourly(self, is_hourly):
        """Sets the is_hourly of this SimpleRouteV2.


        :param is_hourly: The is_hourly of this SimpleRouteV2.  # noqa: E501
        :type: bool
        """

        self._is_hourly = is_hourly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleRouteV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleRouteV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
