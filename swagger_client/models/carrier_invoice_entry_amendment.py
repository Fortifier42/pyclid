# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierInvoiceEntryAmendment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_invoice_entry_id': 'int',
        'carrier_invoice_entry': 'CarrierInvoiceEntry',
        'reason_id': 'int',
        'reason': 'CarrierInvoiceEntryRejectionReason',
        'route_price': 'float',
        'fuel_surcharge': 'float',
        'tax': 'float',
        'total': 'float',
        'comments': 'str'
    }

    attribute_map = {
        'id': 'id',
        'carrier_invoice_entry_id': 'carrierInvoiceEntryId',
        'carrier_invoice_entry': 'carrierInvoiceEntry',
        'reason_id': 'reasonId',
        'reason': 'reason',
        'route_price': 'routePrice',
        'fuel_surcharge': 'fuelSurcharge',
        'tax': 'tax',
        'total': 'total',
        'comments': 'comments'
    }

    def __init__(self, id=None, carrier_invoice_entry_id=None, carrier_invoice_entry=None, reason_id=None, reason=None, route_price=None, fuel_surcharge=None, tax=None, total=None, comments=None):  # noqa: E501
        """CarrierInvoiceEntryAmendment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_invoice_entry_id = None
        self._carrier_invoice_entry = None
        self._reason_id = None
        self._reason = None
        self._route_price = None
        self._fuel_surcharge = None
        self._tax = None
        self._total = None
        self._comments = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_invoice_entry_id is not None:
            self.carrier_invoice_entry_id = carrier_invoice_entry_id
        if carrier_invoice_entry is not None:
            self.carrier_invoice_entry = carrier_invoice_entry
        if reason_id is not None:
            self.reason_id = reason_id
        if reason is not None:
            self.reason = reason
        self.route_price = route_price
        self.fuel_surcharge = fuel_surcharge
        self.tax = tax
        if total is not None:
            self.total = total
        if comments is not None:
            self.comments = comments

    @property
    def id(self):
        """Gets the id of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The id of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierInvoiceEntryAmendment.


        :param id: The id of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_invoice_entry_id(self):
        """Gets the carrier_invoice_entry_id of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The carrier_invoice_entry_id of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: int
        """
        return self._carrier_invoice_entry_id

    @carrier_invoice_entry_id.setter
    def carrier_invoice_entry_id(self, carrier_invoice_entry_id):
        """Sets the carrier_invoice_entry_id of this CarrierInvoiceEntryAmendment.


        :param carrier_invoice_entry_id: The carrier_invoice_entry_id of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: int
        """

        self._carrier_invoice_entry_id = carrier_invoice_entry_id

    @property
    def carrier_invoice_entry(self):
        """Gets the carrier_invoice_entry of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The carrier_invoice_entry of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: CarrierInvoiceEntry
        """
        return self._carrier_invoice_entry

    @carrier_invoice_entry.setter
    def carrier_invoice_entry(self, carrier_invoice_entry):
        """Sets the carrier_invoice_entry of this CarrierInvoiceEntryAmendment.


        :param carrier_invoice_entry: The carrier_invoice_entry of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: CarrierInvoiceEntry
        """

        self._carrier_invoice_entry = carrier_invoice_entry

    @property
    def reason_id(self):
        """Gets the reason_id of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The reason_id of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: int
        """
        return self._reason_id

    @reason_id.setter
    def reason_id(self, reason_id):
        """Sets the reason_id of this CarrierInvoiceEntryAmendment.


        :param reason_id: The reason_id of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: int
        """

        self._reason_id = reason_id

    @property
    def reason(self):
        """Gets the reason of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The reason of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: CarrierInvoiceEntryRejectionReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CarrierInvoiceEntryAmendment.


        :param reason: The reason of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: CarrierInvoiceEntryRejectionReason
        """

        self._reason = reason

    @property
    def route_price(self):
        """Gets the route_price of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The route_price of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: float
        """
        return self._route_price

    @route_price.setter
    def route_price(self, route_price):
        """Sets the route_price of this CarrierInvoiceEntryAmendment.


        :param route_price: The route_price of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: float
        """
        if route_price is None:
            raise ValueError("Invalid value for `route_price`, must not be `None`")  # noqa: E501

        self._route_price = route_price

    @property
    def fuel_surcharge(self):
        """Gets the fuel_surcharge of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The fuel_surcharge of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: float
        """
        return self._fuel_surcharge

    @fuel_surcharge.setter
    def fuel_surcharge(self, fuel_surcharge):
        """Sets the fuel_surcharge of this CarrierInvoiceEntryAmendment.


        :param fuel_surcharge: The fuel_surcharge of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: float
        """
        if fuel_surcharge is None:
            raise ValueError("Invalid value for `fuel_surcharge`, must not be `None`")  # noqa: E501

        self._fuel_surcharge = fuel_surcharge

    @property
    def tax(self):
        """Gets the tax of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The tax of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this CarrierInvoiceEntryAmendment.


        :param tax: The tax of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: float
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")  # noqa: E501

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The total of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CarrierInvoiceEntryAmendment.


        :param total: The total of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def comments(self):
        """Gets the comments of this CarrierInvoiceEntryAmendment.  # noqa: E501


        :return: The comments of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CarrierInvoiceEntryAmendment.


        :param comments: The comments of this CarrierInvoiceEntryAmendment.  # noqa: E501
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierInvoiceEntryAmendment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierInvoiceEntryAmendment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
