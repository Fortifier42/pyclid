# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachshipItemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'value': 'str',
        'abbreviation': 'str',
        'hex_color': 'str',
        'description': 'str',
        'is_universal': 'bool',
        'exclude': 'bool',
        'use_pallet_spaces': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'value': 'value',
        'abbreviation': 'abbreviation',
        'hex_color': 'hexColor',
        'description': 'description',
        'is_universal': 'isUniversal',
        'exclude': 'exclude',
        'use_pallet_spaces': 'usePalletSpaces'
    }

    def __init__(self, id=None, name=None, value=None, abbreviation=None, hex_color=None, description=None, is_universal=None, exclude=None, use_pallet_spaces=None):  # noqa: E501
        """MachshipItemType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._value = None
        self._abbreviation = None
        self._hex_color = None
        self._description = None
        self._is_universal = None
        self._exclude = None
        self._use_pallet_spaces = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if hex_color is not None:
            self.hex_color = hex_color
        if description is not None:
            self.description = description
        if is_universal is not None:
            self.is_universal = is_universal
        if exclude is not None:
            self.exclude = exclude
        if use_pallet_spaces is not None:
            self.use_pallet_spaces = use_pallet_spaces

    @property
    def id(self):
        """Gets the id of this MachshipItemType.  # noqa: E501


        :return: The id of this MachshipItemType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MachshipItemType.


        :param id: The id of this MachshipItemType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MachshipItemType.  # noqa: E501


        :return: The name of this MachshipItemType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MachshipItemType.


        :param name: The name of this MachshipItemType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this MachshipItemType.  # noqa: E501


        :return: The value of this MachshipItemType.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MachshipItemType.


        :param value: The value of this MachshipItemType.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def abbreviation(self):
        """Gets the abbreviation of this MachshipItemType.  # noqa: E501


        :return: The abbreviation of this MachshipItemType.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this MachshipItemType.


        :param abbreviation: The abbreviation of this MachshipItemType.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def hex_color(self):
        """Gets the hex_color of this MachshipItemType.  # noqa: E501


        :return: The hex_color of this MachshipItemType.  # noqa: E501
        :rtype: str
        """
        return self._hex_color

    @hex_color.setter
    def hex_color(self, hex_color):
        """Sets the hex_color of this MachshipItemType.


        :param hex_color: The hex_color of this MachshipItemType.  # noqa: E501
        :type: str
        """

        self._hex_color = hex_color

    @property
    def description(self):
        """Gets the description of this MachshipItemType.  # noqa: E501


        :return: The description of this MachshipItemType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MachshipItemType.


        :param description: The description of this MachshipItemType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_universal(self):
        """Gets the is_universal of this MachshipItemType.  # noqa: E501


        :return: The is_universal of this MachshipItemType.  # noqa: E501
        :rtype: bool
        """
        return self._is_universal

    @is_universal.setter
    def is_universal(self, is_universal):
        """Sets the is_universal of this MachshipItemType.


        :param is_universal: The is_universal of this MachshipItemType.  # noqa: E501
        :type: bool
        """

        self._is_universal = is_universal

    @property
    def exclude(self):
        """Gets the exclude of this MachshipItemType.  # noqa: E501


        :return: The exclude of this MachshipItemType.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this MachshipItemType.


        :param exclude: The exclude of this MachshipItemType.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def use_pallet_spaces(self):
        """Gets the use_pallet_spaces of this MachshipItemType.  # noqa: E501


        :return: The use_pallet_spaces of this MachshipItemType.  # noqa: E501
        :rtype: bool
        """
        return self._use_pallet_spaces

    @use_pallet_spaces.setter
    def use_pallet_spaces(self, use_pallet_spaces):
        """Sets the use_pallet_spaces of this MachshipItemType.


        :param use_pallet_spaces: The use_pallet_spaces of this MachshipItemType.  # noqa: E501
        :type: bool
        """

        self._use_pallet_spaces = use_pallet_spaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachshipItemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachshipItemType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
