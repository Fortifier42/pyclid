# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierServiceLiteWithSubServices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'display_name': 'str',
        'enable_receiver_pays': 'bool',
        'sub_services': 'list[SubService]',
        'service_group_id': 'int',
        'carrier_service_group_order': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'display_name': 'displayName',
        'enable_receiver_pays': 'enableReceiverPays',
        'sub_services': 'subServices',
        'service_group_id': 'serviceGroupId',
        'carrier_service_group_order': 'carrierServiceGroupOrder'
    }

    def __init__(self, id=None, name=None, abbreviation=None, display_name=None, enable_receiver_pays=None, sub_services=None, service_group_id=None, carrier_service_group_order=None):  # noqa: E501
        """CarrierServiceLiteWithSubServices - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._abbreviation = None
        self._display_name = None
        self._enable_receiver_pays = None
        self._sub_services = None
        self._service_group_id = None
        self._carrier_service_group_order = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if display_name is not None:
            self.display_name = display_name
        if enable_receiver_pays is not None:
            self.enable_receiver_pays = enable_receiver_pays
        if sub_services is not None:
            self.sub_services = sub_services
        if service_group_id is not None:
            self.service_group_id = service_group_id
        if carrier_service_group_order is not None:
            self.carrier_service_group_order = carrier_service_group_order

    @property
    def id(self):
        """Gets the id of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The id of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierServiceLiteWithSubServices.


        :param id: The id of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The name of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierServiceLiteWithSubServices.


        :param name: The name of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The abbreviation of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CarrierServiceLiteWithSubServices.


        :param abbreviation: The abbreviation of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def display_name(self):
        """Gets the display_name of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The display_name of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CarrierServiceLiteWithSubServices.


        :param display_name: The display_name of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def enable_receiver_pays(self):
        """Gets the enable_receiver_pays of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The enable_receiver_pays of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: bool
        """
        return self._enable_receiver_pays

    @enable_receiver_pays.setter
    def enable_receiver_pays(self, enable_receiver_pays):
        """Sets the enable_receiver_pays of this CarrierServiceLiteWithSubServices.


        :param enable_receiver_pays: The enable_receiver_pays of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: bool
        """

        self._enable_receiver_pays = enable_receiver_pays

    @property
    def sub_services(self):
        """Gets the sub_services of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The sub_services of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: list[SubService]
        """
        return self._sub_services

    @sub_services.setter
    def sub_services(self, sub_services):
        """Sets the sub_services of this CarrierServiceLiteWithSubServices.


        :param sub_services: The sub_services of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: list[SubService]
        """

        self._sub_services = sub_services

    @property
    def service_group_id(self):
        """Gets the service_group_id of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The service_group_id of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: int
        """
        return self._service_group_id

    @service_group_id.setter
    def service_group_id(self, service_group_id):
        """Sets the service_group_id of this CarrierServiceLiteWithSubServices.


        :param service_group_id: The service_group_id of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: int
        """

        self._service_group_id = service_group_id

    @property
    def carrier_service_group_order(self):
        """Gets the carrier_service_group_order of this CarrierServiceLiteWithSubServices.  # noqa: E501


        :return: The carrier_service_group_order of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_group_order

    @carrier_service_group_order.setter
    def carrier_service_group_order(self, carrier_service_group_order):
        """Sets the carrier_service_group_order of this CarrierServiceLiteWithSubServices.


        :param carrier_service_group_order: The carrier_service_group_order of this CarrierServiceLiteWithSubServices.  # noqa: E501
        :type: int
        """

        self._carrier_service_group_order = carrier_service_group_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierServiceLiteWithSubServices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierServiceLiteWithSubServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
