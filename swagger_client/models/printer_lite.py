# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrinterLite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'company_id': 'int',
        'is_inheritable': 'bool',
        'disabled': 'bool',
        'disabled_for_send_to_printer': 'bool',
        'handshake_successful_utc': 'datetime',
        'pub_sub_channel': 'str',
        'api_token': 'str',
        'status': 'PrinterStatus',
        'is_pre_process': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'company_id': 'companyId',
        'is_inheritable': 'isInheritable',
        'disabled': 'disabled',
        'disabled_for_send_to_printer': 'disabledForSendToPrinter',
        'handshake_successful_utc': 'handshakeSuccessfulUtc',
        'pub_sub_channel': 'pubSubChannel',
        'api_token': 'apiToken',
        'status': 'status',
        'is_pre_process': 'isPreProcess'
    }

    def __init__(self, id=None, name=None, description=None, company_id=None, is_inheritable=None, disabled=None, disabled_for_send_to_printer=None, handshake_successful_utc=None, pub_sub_channel=None, api_token=None, status=None, is_pre_process=None):  # noqa: E501
        """PrinterLite - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._company_id = None
        self._is_inheritable = None
        self._disabled = None
        self._disabled_for_send_to_printer = None
        self._handshake_successful_utc = None
        self._pub_sub_channel = None
        self._api_token = None
        self._status = None
        self._is_pre_process = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if company_id is not None:
            self.company_id = company_id
        if is_inheritable is not None:
            self.is_inheritable = is_inheritable
        if disabled is not None:
            self.disabled = disabled
        if disabled_for_send_to_printer is not None:
            self.disabled_for_send_to_printer = disabled_for_send_to_printer
        if handshake_successful_utc is not None:
            self.handshake_successful_utc = handshake_successful_utc
        if pub_sub_channel is not None:
            self.pub_sub_channel = pub_sub_channel
        if api_token is not None:
            self.api_token = api_token
        if status is not None:
            self.status = status
        if is_pre_process is not None:
            self.is_pre_process = is_pre_process

    @property
    def id(self):
        """Gets the id of this PrinterLite.  # noqa: E501


        :return: The id of this PrinterLite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrinterLite.


        :param id: The id of this PrinterLite.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PrinterLite.  # noqa: E501


        :return: The name of this PrinterLite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrinterLite.


        :param name: The name of this PrinterLite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PrinterLite.  # noqa: E501


        :return: The description of this PrinterLite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PrinterLite.


        :param description: The description of this PrinterLite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def company_id(self):
        """Gets the company_id of this PrinterLite.  # noqa: E501


        :return: The company_id of this PrinterLite.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this PrinterLite.


        :param company_id: The company_id of this PrinterLite.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def is_inheritable(self):
        """Gets the is_inheritable of this PrinterLite.  # noqa: E501


        :return: The is_inheritable of this PrinterLite.  # noqa: E501
        :rtype: bool
        """
        return self._is_inheritable

    @is_inheritable.setter
    def is_inheritable(self, is_inheritable):
        """Sets the is_inheritable of this PrinterLite.


        :param is_inheritable: The is_inheritable of this PrinterLite.  # noqa: E501
        :type: bool
        """

        self._is_inheritable = is_inheritable

    @property
    def disabled(self):
        """Gets the disabled of this PrinterLite.  # noqa: E501


        :return: The disabled of this PrinterLite.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this PrinterLite.


        :param disabled: The disabled of this PrinterLite.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def disabled_for_send_to_printer(self):
        """Gets the disabled_for_send_to_printer of this PrinterLite.  # noqa: E501


        :return: The disabled_for_send_to_printer of this PrinterLite.  # noqa: E501
        :rtype: bool
        """
        return self._disabled_for_send_to_printer

    @disabled_for_send_to_printer.setter
    def disabled_for_send_to_printer(self, disabled_for_send_to_printer):
        """Sets the disabled_for_send_to_printer of this PrinterLite.


        :param disabled_for_send_to_printer: The disabled_for_send_to_printer of this PrinterLite.  # noqa: E501
        :type: bool
        """

        self._disabled_for_send_to_printer = disabled_for_send_to_printer

    @property
    def handshake_successful_utc(self):
        """Gets the handshake_successful_utc of this PrinterLite.  # noqa: E501


        :return: The handshake_successful_utc of this PrinterLite.  # noqa: E501
        :rtype: datetime
        """
        return self._handshake_successful_utc

    @handshake_successful_utc.setter
    def handshake_successful_utc(self, handshake_successful_utc):
        """Sets the handshake_successful_utc of this PrinterLite.


        :param handshake_successful_utc: The handshake_successful_utc of this PrinterLite.  # noqa: E501
        :type: datetime
        """

        self._handshake_successful_utc = handshake_successful_utc

    @property
    def pub_sub_channel(self):
        """Gets the pub_sub_channel of this PrinterLite.  # noqa: E501


        :return: The pub_sub_channel of this PrinterLite.  # noqa: E501
        :rtype: str
        """
        return self._pub_sub_channel

    @pub_sub_channel.setter
    def pub_sub_channel(self, pub_sub_channel):
        """Sets the pub_sub_channel of this PrinterLite.


        :param pub_sub_channel: The pub_sub_channel of this PrinterLite.  # noqa: E501
        :type: str
        """

        self._pub_sub_channel = pub_sub_channel

    @property
    def api_token(self):
        """Gets the api_token of this PrinterLite.  # noqa: E501


        :return: The api_token of this PrinterLite.  # noqa: E501
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this PrinterLite.


        :param api_token: The api_token of this PrinterLite.  # noqa: E501
        :type: str
        """

        self._api_token = api_token

    @property
    def status(self):
        """Gets the status of this PrinterLite.  # noqa: E501


        :return: The status of this PrinterLite.  # noqa: E501
        :rtype: PrinterStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrinterLite.


        :param status: The status of this PrinterLite.  # noqa: E501
        :type: PrinterStatus
        """

        self._status = status

    @property
    def is_pre_process(self):
        """Gets the is_pre_process of this PrinterLite.  # noqa: E501


        :return: The is_pre_process of this PrinterLite.  # noqa: E501
        :rtype: bool
        """
        return self._is_pre_process

    @is_pre_process.setter
    def is_pre_process(self, is_pre_process):
        """Sets the is_pre_process of this PrinterLite.


        :param is_pre_process: The is_pre_process of this PrinterLite.  # noqa: E501
        :type: bool
        """

        self._is_pre_process = is_pre_process

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrinterLite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrinterLite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
