# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnmanifestedConsignmentForList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'int',
        'id': 'int',
        'consignment_number': 'str',
        'consignment_tracking_status_id': 'int',
        'manifest_id': 'int',
        'consignment_tracking_status': 'ConsignmentTrackingStatus',
        'consignment_status_type': 'ConsignmentStatusType',
        'is_benign': 'bool',
        'manually_track': 'bool',
        'has_notes': 'bool',
        'total_rows': 'int',
        'held_reconciliation': 'bool',
        'held_invoicing': 'bool',
        'can_manually_track_statuses': 'bool',
        'can_manually_track_attachments': 'bool',
        'automatically_tracks_statuses': 'bool',
        'automatically_tracks_attachments': 'bool',
        'held_reconciliation_user_id': 'int',
        'held_invoicing_user_id': 'int',
        'show_despatch_eta_times': 'bool',
        'is_international': 'bool',
        'carrier_received_commercial_invoice': 'bool',
        'has_commercial_invoice': 'bool',
        'is_commercial_invoice_machship_generated': 'bool',
        'from_location': 'Location',
        'from_name': 'str',
        'from_name_and_location': 'str',
        'to_location': 'Location',
        'to_name': 'str',
        'to_name_and_location': 'str',
        'international_from_city': 'str',
        'international_from_postcode': 'str',
        'international_from_province': 'str',
        'from_country_id': 'int',
        'from_country': 'Country',
        'international_to_city': 'str',
        'international_to_postcode': 'str',
        'international_to_province': 'str',
        'to_country_id': 'int',
        'to_country': 'Country',
        'carrier_and_service_name': 'str',
        'customer_reference': 'str',
        'total': 'float',
        'created_date': 'datetime',
        'despatch_date': 'datetime',
        'eta': 'datetime',
        'item_count': 'int',
        'important': 'bool',
        'can_print_item_labels_before_manifesting': 'bool',
        'can_print_consignment_labels_before_manifesting': 'bool',
        'is_dg_consignment': 'bool',
        'is_test': 'bool',
        'consignment_sub_dg_class_types': 'list[ConsignmentSubDgClassTypes]',
        'dg_class_type_and_sub_class_type_for_consignment': 'str'
    }

    attribute_map = {
        'company_id': 'companyId',
        'id': 'id',
        'consignment_number': 'consignmentNumber',
        'consignment_tracking_status_id': 'consignmentTrackingStatusId',
        'manifest_id': 'manifestId',
        'consignment_tracking_status': 'consignmentTrackingStatus',
        'consignment_status_type': 'consignmentStatusType',
        'is_benign': 'isBenign',
        'manually_track': 'manuallyTrack',
        'has_notes': 'hasNotes',
        'total_rows': 'totalRows',
        'held_reconciliation': 'heldReconciliation',
        'held_invoicing': 'heldInvoicing',
        'can_manually_track_statuses': 'canManuallyTrackStatuses',
        'can_manually_track_attachments': 'canManuallyTrackAttachments',
        'automatically_tracks_statuses': 'automaticallyTracksStatuses',
        'automatically_tracks_attachments': 'automaticallyTracksAttachments',
        'held_reconciliation_user_id': 'heldReconciliationUserId',
        'held_invoicing_user_id': 'heldInvoicingUserId',
        'show_despatch_eta_times': 'showDespatchEtaTimes',
        'is_international': 'isInternational',
        'carrier_received_commercial_invoice': 'carrierReceivedCommercialInvoice',
        'has_commercial_invoice': 'hasCommercialInvoice',
        'is_commercial_invoice_machship_generated': 'isCommercialInvoiceMachshipGenerated',
        'from_location': 'fromLocation',
        'from_name': 'fromName',
        'from_name_and_location': 'fromNameAndLocation',
        'to_location': 'toLocation',
        'to_name': 'toName',
        'to_name_and_location': 'toNameAndLocation',
        'international_from_city': 'internationalFromCity',
        'international_from_postcode': 'internationalFromPostcode',
        'international_from_province': 'internationalFromProvince',
        'from_country_id': 'fromCountryId',
        'from_country': 'fromCountry',
        'international_to_city': 'internationalToCity',
        'international_to_postcode': 'internationalToPostcode',
        'international_to_province': 'internationalToProvince',
        'to_country_id': 'toCountryId',
        'to_country': 'toCountry',
        'carrier_and_service_name': 'carrierAndServiceName',
        'customer_reference': 'customerReference',
        'total': 'total',
        'created_date': 'createdDate',
        'despatch_date': 'despatchDate',
        'eta': 'eta',
        'item_count': 'itemCount',
        'important': 'important',
        'can_print_item_labels_before_manifesting': 'canPrintItemLabelsBeforeManifesting',
        'can_print_consignment_labels_before_manifesting': 'canPrintConsignmentLabelsBeforeManifesting',
        'is_dg_consignment': 'isDgConsignment',
        'is_test': 'isTest',
        'consignment_sub_dg_class_types': 'consignmentSubDgClassTypes',
        'dg_class_type_and_sub_class_type_for_consignment': 'dgClassTypeAndSubClassTypeForConsignment'
    }

    def __init__(self, company_id=None, id=None, consignment_number=None, consignment_tracking_status_id=None, manifest_id=None, consignment_tracking_status=None, consignment_status_type=None, is_benign=None, manually_track=None, has_notes=None, total_rows=None, held_reconciliation=None, held_invoicing=None, can_manually_track_statuses=None, can_manually_track_attachments=None, automatically_tracks_statuses=None, automatically_tracks_attachments=None, held_reconciliation_user_id=None, held_invoicing_user_id=None, show_despatch_eta_times=None, is_international=None, carrier_received_commercial_invoice=None, has_commercial_invoice=None, is_commercial_invoice_machship_generated=None, from_location=None, from_name=None, from_name_and_location=None, to_location=None, to_name=None, to_name_and_location=None, international_from_city=None, international_from_postcode=None, international_from_province=None, from_country_id=None, from_country=None, international_to_city=None, international_to_postcode=None, international_to_province=None, to_country_id=None, to_country=None, carrier_and_service_name=None, customer_reference=None, total=None, created_date=None, despatch_date=None, eta=None, item_count=None, important=None, can_print_item_labels_before_manifesting=None, can_print_consignment_labels_before_manifesting=None, is_dg_consignment=None, is_test=None, consignment_sub_dg_class_types=None, dg_class_type_and_sub_class_type_for_consignment=None):  # noqa: E501
        """UnmanifestedConsignmentForList - a model defined in Swagger"""  # noqa: E501
        self._company_id = None
        self._id = None
        self._consignment_number = None
        self._consignment_tracking_status_id = None
        self._manifest_id = None
        self._consignment_tracking_status = None
        self._consignment_status_type = None
        self._is_benign = None
        self._manually_track = None
        self._has_notes = None
        self._total_rows = None
        self._held_reconciliation = None
        self._held_invoicing = None
        self._can_manually_track_statuses = None
        self._can_manually_track_attachments = None
        self._automatically_tracks_statuses = None
        self._automatically_tracks_attachments = None
        self._held_reconciliation_user_id = None
        self._held_invoicing_user_id = None
        self._show_despatch_eta_times = None
        self._is_international = None
        self._carrier_received_commercial_invoice = None
        self._has_commercial_invoice = None
        self._is_commercial_invoice_machship_generated = None
        self._from_location = None
        self._from_name = None
        self._from_name_and_location = None
        self._to_location = None
        self._to_name = None
        self._to_name_and_location = None
        self._international_from_city = None
        self._international_from_postcode = None
        self._international_from_province = None
        self._from_country_id = None
        self._from_country = None
        self._international_to_city = None
        self._international_to_postcode = None
        self._international_to_province = None
        self._to_country_id = None
        self._to_country = None
        self._carrier_and_service_name = None
        self._customer_reference = None
        self._total = None
        self._created_date = None
        self._despatch_date = None
        self._eta = None
        self._item_count = None
        self._important = None
        self._can_print_item_labels_before_manifesting = None
        self._can_print_consignment_labels_before_manifesting = None
        self._is_dg_consignment = None
        self._is_test = None
        self._consignment_sub_dg_class_types = None
        self._dg_class_type_and_sub_class_type_for_consignment = None
        self.discriminator = None
        if company_id is not None:
            self.company_id = company_id
        if id is not None:
            self.id = id
        if consignment_number is not None:
            self.consignment_number = consignment_number
        if consignment_tracking_status_id is not None:
            self.consignment_tracking_status_id = consignment_tracking_status_id
        if manifest_id is not None:
            self.manifest_id = manifest_id
        if consignment_tracking_status is not None:
            self.consignment_tracking_status = consignment_tracking_status
        if consignment_status_type is not None:
            self.consignment_status_type = consignment_status_type
        if is_benign is not None:
            self.is_benign = is_benign
        if manually_track is not None:
            self.manually_track = manually_track
        if has_notes is not None:
            self.has_notes = has_notes
        if total_rows is not None:
            self.total_rows = total_rows
        if held_reconciliation is not None:
            self.held_reconciliation = held_reconciliation
        if held_invoicing is not None:
            self.held_invoicing = held_invoicing
        if can_manually_track_statuses is not None:
            self.can_manually_track_statuses = can_manually_track_statuses
        if can_manually_track_attachments is not None:
            self.can_manually_track_attachments = can_manually_track_attachments
        if automatically_tracks_statuses is not None:
            self.automatically_tracks_statuses = automatically_tracks_statuses
        if automatically_tracks_attachments is not None:
            self.automatically_tracks_attachments = automatically_tracks_attachments
        if held_reconciliation_user_id is not None:
            self.held_reconciliation_user_id = held_reconciliation_user_id
        if held_invoicing_user_id is not None:
            self.held_invoicing_user_id = held_invoicing_user_id
        if show_despatch_eta_times is not None:
            self.show_despatch_eta_times = show_despatch_eta_times
        if is_international is not None:
            self.is_international = is_international
        if carrier_received_commercial_invoice is not None:
            self.carrier_received_commercial_invoice = carrier_received_commercial_invoice
        if has_commercial_invoice is not None:
            self.has_commercial_invoice = has_commercial_invoice
        if is_commercial_invoice_machship_generated is not None:
            self.is_commercial_invoice_machship_generated = is_commercial_invoice_machship_generated
        if from_location is not None:
            self.from_location = from_location
        if from_name is not None:
            self.from_name = from_name
        if from_name_and_location is not None:
            self.from_name_and_location = from_name_and_location
        if to_location is not None:
            self.to_location = to_location
        if to_name is not None:
            self.to_name = to_name
        if to_name_and_location is not None:
            self.to_name_and_location = to_name_and_location
        if international_from_city is not None:
            self.international_from_city = international_from_city
        if international_from_postcode is not None:
            self.international_from_postcode = international_from_postcode
        if international_from_province is not None:
            self.international_from_province = international_from_province
        if from_country_id is not None:
            self.from_country_id = from_country_id
        if from_country is not None:
            self.from_country = from_country
        if international_to_city is not None:
            self.international_to_city = international_to_city
        if international_to_postcode is not None:
            self.international_to_postcode = international_to_postcode
        if international_to_province is not None:
            self.international_to_province = international_to_province
        if to_country_id is not None:
            self.to_country_id = to_country_id
        if to_country is not None:
            self.to_country = to_country
        if carrier_and_service_name is not None:
            self.carrier_and_service_name = carrier_and_service_name
        if customer_reference is not None:
            self.customer_reference = customer_reference
        if total is not None:
            self.total = total
        if created_date is not None:
            self.created_date = created_date
        if despatch_date is not None:
            self.despatch_date = despatch_date
        if eta is not None:
            self.eta = eta
        if item_count is not None:
            self.item_count = item_count
        if important is not None:
            self.important = important
        if can_print_item_labels_before_manifesting is not None:
            self.can_print_item_labels_before_manifesting = can_print_item_labels_before_manifesting
        if can_print_consignment_labels_before_manifesting is not None:
            self.can_print_consignment_labels_before_manifesting = can_print_consignment_labels_before_manifesting
        if is_dg_consignment is not None:
            self.is_dg_consignment = is_dg_consignment
        if is_test is not None:
            self.is_test = is_test
        if consignment_sub_dg_class_types is not None:
            self.consignment_sub_dg_class_types = consignment_sub_dg_class_types
        if dg_class_type_and_sub_class_type_for_consignment is not None:
            self.dg_class_type_and_sub_class_type_for_consignment = dg_class_type_and_sub_class_type_for_consignment

    @property
    def company_id(self):
        """Gets the company_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The company_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UnmanifestedConsignmentForList.


        :param company_id: The company_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def id(self):
        """Gets the id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnmanifestedConsignmentForList.


        :param id: The id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def consignment_number(self):
        """Gets the consignment_number of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The consignment_number of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._consignment_number

    @consignment_number.setter
    def consignment_number(self, consignment_number):
        """Sets the consignment_number of this UnmanifestedConsignmentForList.


        :param consignment_number: The consignment_number of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._consignment_number = consignment_number

    @property
    def consignment_tracking_status_id(self):
        """Gets the consignment_tracking_status_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The consignment_tracking_status_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._consignment_tracking_status_id

    @consignment_tracking_status_id.setter
    def consignment_tracking_status_id(self, consignment_tracking_status_id):
        """Sets the consignment_tracking_status_id of this UnmanifestedConsignmentForList.


        :param consignment_tracking_status_id: The consignment_tracking_status_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._consignment_tracking_status_id = consignment_tracking_status_id

    @property
    def manifest_id(self):
        """Gets the manifest_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The manifest_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._manifest_id

    @manifest_id.setter
    def manifest_id(self, manifest_id):
        """Sets the manifest_id of this UnmanifestedConsignmentForList.


        :param manifest_id: The manifest_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._manifest_id = manifest_id

    @property
    def consignment_tracking_status(self):
        """Gets the consignment_tracking_status of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The consignment_tracking_status of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: ConsignmentTrackingStatus
        """
        return self._consignment_tracking_status

    @consignment_tracking_status.setter
    def consignment_tracking_status(self, consignment_tracking_status):
        """Sets the consignment_tracking_status of this UnmanifestedConsignmentForList.


        :param consignment_tracking_status: The consignment_tracking_status of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: ConsignmentTrackingStatus
        """

        self._consignment_tracking_status = consignment_tracking_status

    @property
    def consignment_status_type(self):
        """Gets the consignment_status_type of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The consignment_status_type of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: ConsignmentStatusType
        """
        return self._consignment_status_type

    @consignment_status_type.setter
    def consignment_status_type(self, consignment_status_type):
        """Sets the consignment_status_type of this UnmanifestedConsignmentForList.


        :param consignment_status_type: The consignment_status_type of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: ConsignmentStatusType
        """

        self._consignment_status_type = consignment_status_type

    @property
    def is_benign(self):
        """Gets the is_benign of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The is_benign of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._is_benign

    @is_benign.setter
    def is_benign(self, is_benign):
        """Sets the is_benign of this UnmanifestedConsignmentForList.


        :param is_benign: The is_benign of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._is_benign = is_benign

    @property
    def manually_track(self):
        """Gets the manually_track of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The manually_track of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._manually_track

    @manually_track.setter
    def manually_track(self, manually_track):
        """Sets the manually_track of this UnmanifestedConsignmentForList.


        :param manually_track: The manually_track of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._manually_track = manually_track

    @property
    def has_notes(self):
        """Gets the has_notes of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The has_notes of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._has_notes

    @has_notes.setter
    def has_notes(self, has_notes):
        """Sets the has_notes of this UnmanifestedConsignmentForList.


        :param has_notes: The has_notes of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._has_notes = has_notes

    @property
    def total_rows(self):
        """Gets the total_rows of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The total_rows of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this UnmanifestedConsignmentForList.


        :param total_rows: The total_rows of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def held_reconciliation(self):
        """Gets the held_reconciliation of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The held_reconciliation of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._held_reconciliation

    @held_reconciliation.setter
    def held_reconciliation(self, held_reconciliation):
        """Sets the held_reconciliation of this UnmanifestedConsignmentForList.


        :param held_reconciliation: The held_reconciliation of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._held_reconciliation = held_reconciliation

    @property
    def held_invoicing(self):
        """Gets the held_invoicing of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The held_invoicing of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._held_invoicing

    @held_invoicing.setter
    def held_invoicing(self, held_invoicing):
        """Sets the held_invoicing of this UnmanifestedConsignmentForList.


        :param held_invoicing: The held_invoicing of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._held_invoicing = held_invoicing

    @property
    def can_manually_track_statuses(self):
        """Gets the can_manually_track_statuses of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The can_manually_track_statuses of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._can_manually_track_statuses

    @can_manually_track_statuses.setter
    def can_manually_track_statuses(self, can_manually_track_statuses):
        """Sets the can_manually_track_statuses of this UnmanifestedConsignmentForList.


        :param can_manually_track_statuses: The can_manually_track_statuses of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._can_manually_track_statuses = can_manually_track_statuses

    @property
    def can_manually_track_attachments(self):
        """Gets the can_manually_track_attachments of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The can_manually_track_attachments of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._can_manually_track_attachments

    @can_manually_track_attachments.setter
    def can_manually_track_attachments(self, can_manually_track_attachments):
        """Sets the can_manually_track_attachments of this UnmanifestedConsignmentForList.


        :param can_manually_track_attachments: The can_manually_track_attachments of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._can_manually_track_attachments = can_manually_track_attachments

    @property
    def automatically_tracks_statuses(self):
        """Gets the automatically_tracks_statuses of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The automatically_tracks_statuses of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_tracks_statuses

    @automatically_tracks_statuses.setter
    def automatically_tracks_statuses(self, automatically_tracks_statuses):
        """Sets the automatically_tracks_statuses of this UnmanifestedConsignmentForList.


        :param automatically_tracks_statuses: The automatically_tracks_statuses of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._automatically_tracks_statuses = automatically_tracks_statuses

    @property
    def automatically_tracks_attachments(self):
        """Gets the automatically_tracks_attachments of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The automatically_tracks_attachments of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_tracks_attachments

    @automatically_tracks_attachments.setter
    def automatically_tracks_attachments(self, automatically_tracks_attachments):
        """Sets the automatically_tracks_attachments of this UnmanifestedConsignmentForList.


        :param automatically_tracks_attachments: The automatically_tracks_attachments of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._automatically_tracks_attachments = automatically_tracks_attachments

    @property
    def held_reconciliation_user_id(self):
        """Gets the held_reconciliation_user_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The held_reconciliation_user_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._held_reconciliation_user_id

    @held_reconciliation_user_id.setter
    def held_reconciliation_user_id(self, held_reconciliation_user_id):
        """Sets the held_reconciliation_user_id of this UnmanifestedConsignmentForList.


        :param held_reconciliation_user_id: The held_reconciliation_user_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._held_reconciliation_user_id = held_reconciliation_user_id

    @property
    def held_invoicing_user_id(self):
        """Gets the held_invoicing_user_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The held_invoicing_user_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._held_invoicing_user_id

    @held_invoicing_user_id.setter
    def held_invoicing_user_id(self, held_invoicing_user_id):
        """Sets the held_invoicing_user_id of this UnmanifestedConsignmentForList.


        :param held_invoicing_user_id: The held_invoicing_user_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._held_invoicing_user_id = held_invoicing_user_id

    @property
    def show_despatch_eta_times(self):
        """Gets the show_despatch_eta_times of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The show_despatch_eta_times of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._show_despatch_eta_times

    @show_despatch_eta_times.setter
    def show_despatch_eta_times(self, show_despatch_eta_times):
        """Sets the show_despatch_eta_times of this UnmanifestedConsignmentForList.


        :param show_despatch_eta_times: The show_despatch_eta_times of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._show_despatch_eta_times = show_despatch_eta_times

    @property
    def is_international(self):
        """Gets the is_international of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The is_international of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._is_international

    @is_international.setter
    def is_international(self, is_international):
        """Sets the is_international of this UnmanifestedConsignmentForList.


        :param is_international: The is_international of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._is_international = is_international

    @property
    def carrier_received_commercial_invoice(self):
        """Gets the carrier_received_commercial_invoice of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The carrier_received_commercial_invoice of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._carrier_received_commercial_invoice

    @carrier_received_commercial_invoice.setter
    def carrier_received_commercial_invoice(self, carrier_received_commercial_invoice):
        """Sets the carrier_received_commercial_invoice of this UnmanifestedConsignmentForList.


        :param carrier_received_commercial_invoice: The carrier_received_commercial_invoice of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._carrier_received_commercial_invoice = carrier_received_commercial_invoice

    @property
    def has_commercial_invoice(self):
        """Gets the has_commercial_invoice of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The has_commercial_invoice of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._has_commercial_invoice

    @has_commercial_invoice.setter
    def has_commercial_invoice(self, has_commercial_invoice):
        """Sets the has_commercial_invoice of this UnmanifestedConsignmentForList.


        :param has_commercial_invoice: The has_commercial_invoice of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._has_commercial_invoice = has_commercial_invoice

    @property
    def is_commercial_invoice_machship_generated(self):
        """Gets the is_commercial_invoice_machship_generated of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The is_commercial_invoice_machship_generated of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._is_commercial_invoice_machship_generated

    @is_commercial_invoice_machship_generated.setter
    def is_commercial_invoice_machship_generated(self, is_commercial_invoice_machship_generated):
        """Sets the is_commercial_invoice_machship_generated of this UnmanifestedConsignmentForList.


        :param is_commercial_invoice_machship_generated: The is_commercial_invoice_machship_generated of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._is_commercial_invoice_machship_generated = is_commercial_invoice_machship_generated

    @property
    def from_location(self):
        """Gets the from_location of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The from_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: Location
        """
        return self._from_location

    @from_location.setter
    def from_location(self, from_location):
        """Sets the from_location of this UnmanifestedConsignmentForList.


        :param from_location: The from_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: Location
        """

        self._from_location = from_location

    @property
    def from_name(self):
        """Gets the from_name of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The from_name of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this UnmanifestedConsignmentForList.


        :param from_name: The from_name of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def from_name_and_location(self):
        """Gets the from_name_and_location of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The from_name_and_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._from_name_and_location

    @from_name_and_location.setter
    def from_name_and_location(self, from_name_and_location):
        """Sets the from_name_and_location of this UnmanifestedConsignmentForList.


        :param from_name_and_location: The from_name_and_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._from_name_and_location = from_name_and_location

    @property
    def to_location(self):
        """Gets the to_location of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The to_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: Location
        """
        return self._to_location

    @to_location.setter
    def to_location(self, to_location):
        """Sets the to_location of this UnmanifestedConsignmentForList.


        :param to_location: The to_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: Location
        """

        self._to_location = to_location

    @property
    def to_name(self):
        """Gets the to_name of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The to_name of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name):
        """Sets the to_name of this UnmanifestedConsignmentForList.


        :param to_name: The to_name of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._to_name = to_name

    @property
    def to_name_and_location(self):
        """Gets the to_name_and_location of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The to_name_and_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._to_name_and_location

    @to_name_and_location.setter
    def to_name_and_location(self, to_name_and_location):
        """Sets the to_name_and_location of this UnmanifestedConsignmentForList.


        :param to_name_and_location: The to_name_and_location of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._to_name_and_location = to_name_and_location

    @property
    def international_from_city(self):
        """Gets the international_from_city of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The international_from_city of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._international_from_city

    @international_from_city.setter
    def international_from_city(self, international_from_city):
        """Sets the international_from_city of this UnmanifestedConsignmentForList.


        :param international_from_city: The international_from_city of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._international_from_city = international_from_city

    @property
    def international_from_postcode(self):
        """Gets the international_from_postcode of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The international_from_postcode of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._international_from_postcode

    @international_from_postcode.setter
    def international_from_postcode(self, international_from_postcode):
        """Sets the international_from_postcode of this UnmanifestedConsignmentForList.


        :param international_from_postcode: The international_from_postcode of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._international_from_postcode = international_from_postcode

    @property
    def international_from_province(self):
        """Gets the international_from_province of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The international_from_province of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._international_from_province

    @international_from_province.setter
    def international_from_province(self, international_from_province):
        """Sets the international_from_province of this UnmanifestedConsignmentForList.


        :param international_from_province: The international_from_province of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._international_from_province = international_from_province

    @property
    def from_country_id(self):
        """Gets the from_country_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The from_country_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._from_country_id

    @from_country_id.setter
    def from_country_id(self, from_country_id):
        """Sets the from_country_id of this UnmanifestedConsignmentForList.


        :param from_country_id: The from_country_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._from_country_id = from_country_id

    @property
    def from_country(self):
        """Gets the from_country of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The from_country of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: Country
        """
        return self._from_country

    @from_country.setter
    def from_country(self, from_country):
        """Sets the from_country of this UnmanifestedConsignmentForList.


        :param from_country: The from_country of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: Country
        """

        self._from_country = from_country

    @property
    def international_to_city(self):
        """Gets the international_to_city of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The international_to_city of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._international_to_city

    @international_to_city.setter
    def international_to_city(self, international_to_city):
        """Sets the international_to_city of this UnmanifestedConsignmentForList.


        :param international_to_city: The international_to_city of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._international_to_city = international_to_city

    @property
    def international_to_postcode(self):
        """Gets the international_to_postcode of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The international_to_postcode of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._international_to_postcode

    @international_to_postcode.setter
    def international_to_postcode(self, international_to_postcode):
        """Sets the international_to_postcode of this UnmanifestedConsignmentForList.


        :param international_to_postcode: The international_to_postcode of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._international_to_postcode = international_to_postcode

    @property
    def international_to_province(self):
        """Gets the international_to_province of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The international_to_province of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._international_to_province

    @international_to_province.setter
    def international_to_province(self, international_to_province):
        """Sets the international_to_province of this UnmanifestedConsignmentForList.


        :param international_to_province: The international_to_province of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._international_to_province = international_to_province

    @property
    def to_country_id(self):
        """Gets the to_country_id of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The to_country_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._to_country_id

    @to_country_id.setter
    def to_country_id(self, to_country_id):
        """Sets the to_country_id of this UnmanifestedConsignmentForList.


        :param to_country_id: The to_country_id of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._to_country_id = to_country_id

    @property
    def to_country(self):
        """Gets the to_country of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The to_country of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: Country
        """
        return self._to_country

    @to_country.setter
    def to_country(self, to_country):
        """Sets the to_country of this UnmanifestedConsignmentForList.


        :param to_country: The to_country of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: Country
        """

        self._to_country = to_country

    @property
    def carrier_and_service_name(self):
        """Gets the carrier_and_service_name of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The carrier_and_service_name of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._carrier_and_service_name

    @carrier_and_service_name.setter
    def carrier_and_service_name(self, carrier_and_service_name):
        """Sets the carrier_and_service_name of this UnmanifestedConsignmentForList.


        :param carrier_and_service_name: The carrier_and_service_name of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._carrier_and_service_name = carrier_and_service_name

    @property
    def customer_reference(self):
        """Gets the customer_reference of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The customer_reference of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this UnmanifestedConsignmentForList.


        :param customer_reference: The customer_reference of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._customer_reference = customer_reference

    @property
    def total(self):
        """Gets the total of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The total of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UnmanifestedConsignmentForList.


        :param total: The total of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def created_date(self):
        """Gets the created_date of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The created_date of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UnmanifestedConsignmentForList.


        :param created_date: The created_date of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def despatch_date(self):
        """Gets the despatch_date of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The despatch_date of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: datetime
        """
        return self._despatch_date

    @despatch_date.setter
    def despatch_date(self, despatch_date):
        """Sets the despatch_date of this UnmanifestedConsignmentForList.


        :param despatch_date: The despatch_date of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: datetime
        """

        self._despatch_date = despatch_date

    @property
    def eta(self):
        """Gets the eta of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The eta of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: datetime
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """Sets the eta of this UnmanifestedConsignmentForList.


        :param eta: The eta of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: datetime
        """

        self._eta = eta

    @property
    def item_count(self):
        """Gets the item_count of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The item_count of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this UnmanifestedConsignmentForList.


        :param item_count: The item_count of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def important(self):
        """Gets the important of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The important of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._important

    @important.setter
    def important(self, important):
        """Sets the important of this UnmanifestedConsignmentForList.


        :param important: The important of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._important = important

    @property
    def can_print_item_labels_before_manifesting(self):
        """Gets the can_print_item_labels_before_manifesting of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The can_print_item_labels_before_manifesting of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_item_labels_before_manifesting

    @can_print_item_labels_before_manifesting.setter
    def can_print_item_labels_before_manifesting(self, can_print_item_labels_before_manifesting):
        """Sets the can_print_item_labels_before_manifesting of this UnmanifestedConsignmentForList.


        :param can_print_item_labels_before_manifesting: The can_print_item_labels_before_manifesting of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._can_print_item_labels_before_manifesting = can_print_item_labels_before_manifesting

    @property
    def can_print_consignment_labels_before_manifesting(self):
        """Gets the can_print_consignment_labels_before_manifesting of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The can_print_consignment_labels_before_manifesting of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_consignment_labels_before_manifesting

    @can_print_consignment_labels_before_manifesting.setter
    def can_print_consignment_labels_before_manifesting(self, can_print_consignment_labels_before_manifesting):
        """Sets the can_print_consignment_labels_before_manifesting of this UnmanifestedConsignmentForList.


        :param can_print_consignment_labels_before_manifesting: The can_print_consignment_labels_before_manifesting of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._can_print_consignment_labels_before_manifesting = can_print_consignment_labels_before_manifesting

    @property
    def is_dg_consignment(self):
        """Gets the is_dg_consignment of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The is_dg_consignment of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._is_dg_consignment

    @is_dg_consignment.setter
    def is_dg_consignment(self, is_dg_consignment):
        """Sets the is_dg_consignment of this UnmanifestedConsignmentForList.


        :param is_dg_consignment: The is_dg_consignment of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._is_dg_consignment = is_dg_consignment

    @property
    def is_test(self):
        """Gets the is_test of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The is_test of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this UnmanifestedConsignmentForList.


        :param is_test: The is_test of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: bool
        """

        self._is_test = is_test

    @property
    def consignment_sub_dg_class_types(self):
        """Gets the consignment_sub_dg_class_types of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The consignment_sub_dg_class_types of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: list[ConsignmentSubDgClassTypes]
        """
        return self._consignment_sub_dg_class_types

    @consignment_sub_dg_class_types.setter
    def consignment_sub_dg_class_types(self, consignment_sub_dg_class_types):
        """Sets the consignment_sub_dg_class_types of this UnmanifestedConsignmentForList.


        :param consignment_sub_dg_class_types: The consignment_sub_dg_class_types of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: list[ConsignmentSubDgClassTypes]
        """

        self._consignment_sub_dg_class_types = consignment_sub_dg_class_types

    @property
    def dg_class_type_and_sub_class_type_for_consignment(self):
        """Gets the dg_class_type_and_sub_class_type_for_consignment of this UnmanifestedConsignmentForList.  # noqa: E501


        :return: The dg_class_type_and_sub_class_type_for_consignment of this UnmanifestedConsignmentForList.  # noqa: E501
        :rtype: str
        """
        return self._dg_class_type_and_sub_class_type_for_consignment

    @dg_class_type_and_sub_class_type_for_consignment.setter
    def dg_class_type_and_sub_class_type_for_consignment(self, dg_class_type_and_sub_class_type_for_consignment):
        """Sets the dg_class_type_and_sub_class_type_for_consignment of this UnmanifestedConsignmentForList.


        :param dg_class_type_and_sub_class_type_for_consignment: The dg_class_type_and_sub_class_type_for_consignment of this UnmanifestedConsignmentForList.  # noqa: E501
        :type: str
        """

        self._dg_class_type_and_sub_class_type_for_consignment = dg_class_type_and_sub_class_type_for_consignment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnmanifestedConsignmentForList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnmanifestedConsignmentForList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
