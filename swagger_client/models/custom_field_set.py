# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomFieldSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'display_name': 'str',
        'is_required': 'bool',
        'custom_field_type': 'CustomFieldType',
        'value': 'str',
        'default_value': 'str',
        'description': 'str',
        'display_to_user': 'bool',
        'list_of_available_values': 'str',
        'entity_field_type': 'CustomFieldEntityFieldType',
        'carrier_ref_pools': 'list[CarrierRefPoolLite]',
        'should_enforce_default_value_null': 'bool'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'display_name': 'displayName',
        'is_required': 'isRequired',
        'custom_field_type': 'customFieldType',
        'value': 'value',
        'default_value': 'defaultValue',
        'description': 'description',
        'display_to_user': 'displayToUser',
        'list_of_available_values': 'listOfAvailableValues',
        'entity_field_type': 'entityFieldType',
        'carrier_ref_pools': 'carrierRefPools',
        'should_enforce_default_value_null': 'shouldEnforceDefaultValueNull'
    }

    def __init__(self, property_name=None, display_name=None, is_required=None, custom_field_type=None, value=None, default_value=None, description=None, display_to_user=None, list_of_available_values=None, entity_field_type=None, carrier_ref_pools=None, should_enforce_default_value_null=None):  # noqa: E501
        """CustomFieldSet - a model defined in Swagger"""  # noqa: E501
        self._property_name = None
        self._display_name = None
        self._is_required = None
        self._custom_field_type = None
        self._value = None
        self._default_value = None
        self._description = None
        self._display_to_user = None
        self._list_of_available_values = None
        self._entity_field_type = None
        self._carrier_ref_pools = None
        self._should_enforce_default_value_null = None
        self.discriminator = None
        if property_name is not None:
            self.property_name = property_name
        if display_name is not None:
            self.display_name = display_name
        if is_required is not None:
            self.is_required = is_required
        if custom_field_type is not None:
            self.custom_field_type = custom_field_type
        if value is not None:
            self.value = value
        if default_value is not None:
            self.default_value = default_value
        if description is not None:
            self.description = description
        if display_to_user is not None:
            self.display_to_user = display_to_user
        if list_of_available_values is not None:
            self.list_of_available_values = list_of_available_values
        if entity_field_type is not None:
            self.entity_field_type = entity_field_type
        if carrier_ref_pools is not None:
            self.carrier_ref_pools = carrier_ref_pools
        if should_enforce_default_value_null is not None:
            self.should_enforce_default_value_null = should_enforce_default_value_null

    @property
    def property_name(self):
        """Gets the property_name of this CustomFieldSet.  # noqa: E501


        :return: The property_name of this CustomFieldSet.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this CustomFieldSet.


        :param property_name: The property_name of this CustomFieldSet.  # noqa: E501
        :type: str
        """

        self._property_name = property_name

    @property
    def display_name(self):
        """Gets the display_name of this CustomFieldSet.  # noqa: E501


        :return: The display_name of this CustomFieldSet.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CustomFieldSet.


        :param display_name: The display_name of this CustomFieldSet.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_required(self):
        """Gets the is_required of this CustomFieldSet.  # noqa: E501


        :return: The is_required of this CustomFieldSet.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this CustomFieldSet.


        :param is_required: The is_required of this CustomFieldSet.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def custom_field_type(self):
        """Gets the custom_field_type of this CustomFieldSet.  # noqa: E501


        :return: The custom_field_type of this CustomFieldSet.  # noqa: E501
        :rtype: CustomFieldType
        """
        return self._custom_field_type

    @custom_field_type.setter
    def custom_field_type(self, custom_field_type):
        """Sets the custom_field_type of this CustomFieldSet.


        :param custom_field_type: The custom_field_type of this CustomFieldSet.  # noqa: E501
        :type: CustomFieldType
        """

        self._custom_field_type = custom_field_type

    @property
    def value(self):
        """Gets the value of this CustomFieldSet.  # noqa: E501


        :return: The value of this CustomFieldSet.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomFieldSet.


        :param value: The value of this CustomFieldSet.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def default_value(self):
        """Gets the default_value of this CustomFieldSet.  # noqa: E501


        :return: The default_value of this CustomFieldSet.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CustomFieldSet.


        :param default_value: The default_value of this CustomFieldSet.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this CustomFieldSet.  # noqa: E501


        :return: The description of this CustomFieldSet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomFieldSet.


        :param description: The description of this CustomFieldSet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_to_user(self):
        """Gets the display_to_user of this CustomFieldSet.  # noqa: E501


        :return: The display_to_user of this CustomFieldSet.  # noqa: E501
        :rtype: bool
        """
        return self._display_to_user

    @display_to_user.setter
    def display_to_user(self, display_to_user):
        """Sets the display_to_user of this CustomFieldSet.


        :param display_to_user: The display_to_user of this CustomFieldSet.  # noqa: E501
        :type: bool
        """

        self._display_to_user = display_to_user

    @property
    def list_of_available_values(self):
        """Gets the list_of_available_values of this CustomFieldSet.  # noqa: E501


        :return: The list_of_available_values of this CustomFieldSet.  # noqa: E501
        :rtype: str
        """
        return self._list_of_available_values

    @list_of_available_values.setter
    def list_of_available_values(self, list_of_available_values):
        """Sets the list_of_available_values of this CustomFieldSet.


        :param list_of_available_values: The list_of_available_values of this CustomFieldSet.  # noqa: E501
        :type: str
        """

        self._list_of_available_values = list_of_available_values

    @property
    def entity_field_type(self):
        """Gets the entity_field_type of this CustomFieldSet.  # noqa: E501


        :return: The entity_field_type of this CustomFieldSet.  # noqa: E501
        :rtype: CustomFieldEntityFieldType
        """
        return self._entity_field_type

    @entity_field_type.setter
    def entity_field_type(self, entity_field_type):
        """Sets the entity_field_type of this CustomFieldSet.


        :param entity_field_type: The entity_field_type of this CustomFieldSet.  # noqa: E501
        :type: CustomFieldEntityFieldType
        """

        self._entity_field_type = entity_field_type

    @property
    def carrier_ref_pools(self):
        """Gets the carrier_ref_pools of this CustomFieldSet.  # noqa: E501


        :return: The carrier_ref_pools of this CustomFieldSet.  # noqa: E501
        :rtype: list[CarrierRefPoolLite]
        """
        return self._carrier_ref_pools

    @carrier_ref_pools.setter
    def carrier_ref_pools(self, carrier_ref_pools):
        """Sets the carrier_ref_pools of this CustomFieldSet.


        :param carrier_ref_pools: The carrier_ref_pools of this CustomFieldSet.  # noqa: E501
        :type: list[CarrierRefPoolLite]
        """

        self._carrier_ref_pools = carrier_ref_pools

    @property
    def should_enforce_default_value_null(self):
        """Gets the should_enforce_default_value_null of this CustomFieldSet.  # noqa: E501


        :return: The should_enforce_default_value_null of this CustomFieldSet.  # noqa: E501
        :rtype: bool
        """
        return self._should_enforce_default_value_null

    @should_enforce_default_value_null.setter
    def should_enforce_default_value_null(self, should_enforce_default_value_null):
        """Sets the should_enforce_default_value_null of this CustomFieldSet.


        :param should_enforce_default_value_null: The should_enforce_default_value_null of this CustomFieldSet.  # noqa: E501
        :type: bool
        """

        self._should_enforce_default_value_null = should_enforce_default_value_null

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
