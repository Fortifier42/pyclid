# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyBillingCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company_id': 'int',
        'company': 'Company',
        'invoice_item_id': 'int',
        'charge_date': 'datetime',
        'billing_charge_type': 'BillingChargeType',
        'cost_unit_amount_ex_tax': 'float',
        'sell_unit_amount_ex_tax': 'float',
        'quantity': 'int',
        'description': 'str',
        'attracts_tax': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'company': 'company',
        'invoice_item_id': 'invoiceItemId',
        'charge_date': 'chargeDate',
        'billing_charge_type': 'billingChargeType',
        'cost_unit_amount_ex_tax': 'costUnitAmountExTax',
        'sell_unit_amount_ex_tax': 'sellUnitAmountExTax',
        'quantity': 'quantity',
        'description': 'description',
        'attracts_tax': 'attractsTax'
    }

    def __init__(self, id=None, company_id=None, company=None, invoice_item_id=None, charge_date=None, billing_charge_type=None, cost_unit_amount_ex_tax=None, sell_unit_amount_ex_tax=None, quantity=None, description=None, attracts_tax=None):  # noqa: E501
        """CompanyBillingCharge - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._company = None
        self._invoice_item_id = None
        self._charge_date = None
        self._billing_charge_type = None
        self._cost_unit_amount_ex_tax = None
        self._sell_unit_amount_ex_tax = None
        self._quantity = None
        self._description = None
        self._attracts_tax = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if company is not None:
            self.company = company
        if invoice_item_id is not None:
            self.invoice_item_id = invoice_item_id
        if charge_date is not None:
            self.charge_date = charge_date
        if billing_charge_type is not None:
            self.billing_charge_type = billing_charge_type
        if cost_unit_amount_ex_tax is not None:
            self.cost_unit_amount_ex_tax = cost_unit_amount_ex_tax
        if sell_unit_amount_ex_tax is not None:
            self.sell_unit_amount_ex_tax = sell_unit_amount_ex_tax
        if quantity is not None:
            self.quantity = quantity
        if description is not None:
            self.description = description
        if attracts_tax is not None:
            self.attracts_tax = attracts_tax

    @property
    def id(self):
        """Gets the id of this CompanyBillingCharge.  # noqa: E501


        :return: The id of this CompanyBillingCharge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyBillingCharge.


        :param id: The id of this CompanyBillingCharge.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this CompanyBillingCharge.  # noqa: E501


        :return: The company_id of this CompanyBillingCharge.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyBillingCharge.


        :param company_id: The company_id of this CompanyBillingCharge.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def company(self):
        """Gets the company of this CompanyBillingCharge.  # noqa: E501


        :return: The company of this CompanyBillingCharge.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CompanyBillingCharge.


        :param company: The company of this CompanyBillingCharge.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def invoice_item_id(self):
        """Gets the invoice_item_id of this CompanyBillingCharge.  # noqa: E501


        :return: The invoice_item_id of this CompanyBillingCharge.  # noqa: E501
        :rtype: int
        """
        return self._invoice_item_id

    @invoice_item_id.setter
    def invoice_item_id(self, invoice_item_id):
        """Sets the invoice_item_id of this CompanyBillingCharge.


        :param invoice_item_id: The invoice_item_id of this CompanyBillingCharge.  # noqa: E501
        :type: int
        """

        self._invoice_item_id = invoice_item_id

    @property
    def charge_date(self):
        """Gets the charge_date of this CompanyBillingCharge.  # noqa: E501


        :return: The charge_date of this CompanyBillingCharge.  # noqa: E501
        :rtype: datetime
        """
        return self._charge_date

    @charge_date.setter
    def charge_date(self, charge_date):
        """Sets the charge_date of this CompanyBillingCharge.


        :param charge_date: The charge_date of this CompanyBillingCharge.  # noqa: E501
        :type: datetime
        """

        self._charge_date = charge_date

    @property
    def billing_charge_type(self):
        """Gets the billing_charge_type of this CompanyBillingCharge.  # noqa: E501


        :return: The billing_charge_type of this CompanyBillingCharge.  # noqa: E501
        :rtype: BillingChargeType
        """
        return self._billing_charge_type

    @billing_charge_type.setter
    def billing_charge_type(self, billing_charge_type):
        """Sets the billing_charge_type of this CompanyBillingCharge.


        :param billing_charge_type: The billing_charge_type of this CompanyBillingCharge.  # noqa: E501
        :type: BillingChargeType
        """

        self._billing_charge_type = billing_charge_type

    @property
    def cost_unit_amount_ex_tax(self):
        """Gets the cost_unit_amount_ex_tax of this CompanyBillingCharge.  # noqa: E501


        :return: The cost_unit_amount_ex_tax of this CompanyBillingCharge.  # noqa: E501
        :rtype: float
        """
        return self._cost_unit_amount_ex_tax

    @cost_unit_amount_ex_tax.setter
    def cost_unit_amount_ex_tax(self, cost_unit_amount_ex_tax):
        """Sets the cost_unit_amount_ex_tax of this CompanyBillingCharge.


        :param cost_unit_amount_ex_tax: The cost_unit_amount_ex_tax of this CompanyBillingCharge.  # noqa: E501
        :type: float
        """

        self._cost_unit_amount_ex_tax = cost_unit_amount_ex_tax

    @property
    def sell_unit_amount_ex_tax(self):
        """Gets the sell_unit_amount_ex_tax of this CompanyBillingCharge.  # noqa: E501


        :return: The sell_unit_amount_ex_tax of this CompanyBillingCharge.  # noqa: E501
        :rtype: float
        """
        return self._sell_unit_amount_ex_tax

    @sell_unit_amount_ex_tax.setter
    def sell_unit_amount_ex_tax(self, sell_unit_amount_ex_tax):
        """Sets the sell_unit_amount_ex_tax of this CompanyBillingCharge.


        :param sell_unit_amount_ex_tax: The sell_unit_amount_ex_tax of this CompanyBillingCharge.  # noqa: E501
        :type: float
        """

        self._sell_unit_amount_ex_tax = sell_unit_amount_ex_tax

    @property
    def quantity(self):
        """Gets the quantity of this CompanyBillingCharge.  # noqa: E501


        :return: The quantity of this CompanyBillingCharge.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CompanyBillingCharge.


        :param quantity: The quantity of this CompanyBillingCharge.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def description(self):
        """Gets the description of this CompanyBillingCharge.  # noqa: E501


        :return: The description of this CompanyBillingCharge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompanyBillingCharge.


        :param description: The description of this CompanyBillingCharge.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def attracts_tax(self):
        """Gets the attracts_tax of this CompanyBillingCharge.  # noqa: E501


        :return: The attracts_tax of this CompanyBillingCharge.  # noqa: E501
        :rtype: bool
        """
        return self._attracts_tax

    @attracts_tax.setter
    def attracts_tax(self, attracts_tax):
        """Sets the attracts_tax of this CompanyBillingCharge.


        :param attracts_tax: The attracts_tax of this CompanyBillingCharge.  # noqa: E501
        :type: bool
        """

        self._attracts_tax = attracts_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyBillingCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyBillingCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
