# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganisationAdminUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'organisation_id': 'int',
        'organisation': 'Organisation',
        'user_id': 'int',
        'user': 'UserWithIdentity',
        'total_rows': 'int'
    }

    attribute_map = {
        'id': 'id',
        'organisation_id': 'organisationId',
        'organisation': 'organisation',
        'user_id': 'userId',
        'user': 'user',
        'total_rows': 'totalRows'
    }

    def __init__(self, id=None, organisation_id=None, organisation=None, user_id=None, user=None, total_rows=None):  # noqa: E501
        """OrganisationAdminUser - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._organisation_id = None
        self._organisation = None
        self._user_id = None
        self._user = None
        self._total_rows = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if organisation is not None:
            self.organisation = organisation
        if user_id is not None:
            self.user_id = user_id
        if user is not None:
            self.user = user
        if total_rows is not None:
            self.total_rows = total_rows

    @property
    def id(self):
        """Gets the id of this OrganisationAdminUser.  # noqa: E501


        :return: The id of this OrganisationAdminUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganisationAdminUser.


        :param id: The id of this OrganisationAdminUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this OrganisationAdminUser.  # noqa: E501


        :return: The organisation_id of this OrganisationAdminUser.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this OrganisationAdminUser.


        :param organisation_id: The organisation_id of this OrganisationAdminUser.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def organisation(self):
        """Gets the organisation of this OrganisationAdminUser.  # noqa: E501


        :return: The organisation of this OrganisationAdminUser.  # noqa: E501
        :rtype: Organisation
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this OrganisationAdminUser.


        :param organisation: The organisation of this OrganisationAdminUser.  # noqa: E501
        :type: Organisation
        """

        self._organisation = organisation

    @property
    def user_id(self):
        """Gets the user_id of this OrganisationAdminUser.  # noqa: E501


        :return: The user_id of this OrganisationAdminUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrganisationAdminUser.


        :param user_id: The user_id of this OrganisationAdminUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user(self):
        """Gets the user of this OrganisationAdminUser.  # noqa: E501


        :return: The user of this OrganisationAdminUser.  # noqa: E501
        :rtype: UserWithIdentity
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OrganisationAdminUser.


        :param user: The user of this OrganisationAdminUser.  # noqa: E501
        :type: UserWithIdentity
        """

        self._user = user

    @property
    def total_rows(self):
        """Gets the total_rows of this OrganisationAdminUser.  # noqa: E501


        :return: The total_rows of this OrganisationAdminUser.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this OrganisationAdminUser.


        :param total_rows: The total_rows of this OrganisationAdminUser.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganisationAdminUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationAdminUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
