# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PendingConsignmentItemContentV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'pending_consignment_item_id': 'int',
        'description': 'str',
        'reference1': 'str',
        'reference2': 'str',
        'reference3': 'str',
        'quantity': 'int',
        'dollar_value': 'float',
        'ci_marks_and_numbers': 'str',
        'harmonized_code': 'str',
        'part_number': 'str',
        'purpose': 'str',
        'country_of_manufacture_id': 'int',
        'country_of_manufacture_code': 'str',
        'country_of_manufacture': 'Country'
    }

    attribute_map = {
        'id': 'id',
        'pending_consignment_item_id': 'pendingConsignmentItemId',
        'description': 'description',
        'reference1': 'reference1',
        'reference2': 'reference2',
        'reference3': 'reference3',
        'quantity': 'quantity',
        'dollar_value': 'dollarValue',
        'ci_marks_and_numbers': 'ciMarksAndNumbers',
        'harmonized_code': 'harmonizedCode',
        'part_number': 'partNumber',
        'purpose': 'purpose',
        'country_of_manufacture_id': 'countryOfManufactureId',
        'country_of_manufacture_code': 'countryOfManufactureCode',
        'country_of_manufacture': 'countryOfManufacture'
    }

    def __init__(self, id=None, pending_consignment_item_id=None, description=None, reference1=None, reference2=None, reference3=None, quantity=None, dollar_value=None, ci_marks_and_numbers=None, harmonized_code=None, part_number=None, purpose=None, country_of_manufacture_id=None, country_of_manufacture_code=None, country_of_manufacture=None):  # noqa: E501
        """PendingConsignmentItemContentV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._pending_consignment_item_id = None
        self._description = None
        self._reference1 = None
        self._reference2 = None
        self._reference3 = None
        self._quantity = None
        self._dollar_value = None
        self._ci_marks_and_numbers = None
        self._harmonized_code = None
        self._part_number = None
        self._purpose = None
        self._country_of_manufacture_id = None
        self._country_of_manufacture_code = None
        self._country_of_manufacture = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if pending_consignment_item_id is not None:
            self.pending_consignment_item_id = pending_consignment_item_id
        if description is not None:
            self.description = description
        if reference1 is not None:
            self.reference1 = reference1
        if reference2 is not None:
            self.reference2 = reference2
        if reference3 is not None:
            self.reference3 = reference3
        if quantity is not None:
            self.quantity = quantity
        if dollar_value is not None:
            self.dollar_value = dollar_value
        if ci_marks_and_numbers is not None:
            self.ci_marks_and_numbers = ci_marks_and_numbers
        if harmonized_code is not None:
            self.harmonized_code = harmonized_code
        if part_number is not None:
            self.part_number = part_number
        if purpose is not None:
            self.purpose = purpose
        if country_of_manufacture_id is not None:
            self.country_of_manufacture_id = country_of_manufacture_id
        if country_of_manufacture_code is not None:
            self.country_of_manufacture_code = country_of_manufacture_code
        if country_of_manufacture is not None:
            self.country_of_manufacture = country_of_manufacture

    @property
    def id(self):
        """Gets the id of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The id of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PendingConsignmentItemContentV2.


        :param id: The id of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pending_consignment_item_id(self):
        """Gets the pending_consignment_item_id of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The pending_consignment_item_id of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: int
        """
        return self._pending_consignment_item_id

    @pending_consignment_item_id.setter
    def pending_consignment_item_id(self, pending_consignment_item_id):
        """Sets the pending_consignment_item_id of this PendingConsignmentItemContentV2.


        :param pending_consignment_item_id: The pending_consignment_item_id of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: int
        """

        self._pending_consignment_item_id = pending_consignment_item_id

    @property
    def description(self):
        """Gets the description of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The description of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PendingConsignmentItemContentV2.


        :param description: The description of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def reference1(self):
        """Gets the reference1 of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The reference1 of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._reference1

    @reference1.setter
    def reference1(self, reference1):
        """Sets the reference1 of this PendingConsignmentItemContentV2.


        :param reference1: The reference1 of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._reference1 = reference1

    @property
    def reference2(self):
        """Gets the reference2 of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The reference2 of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._reference2

    @reference2.setter
    def reference2(self, reference2):
        """Sets the reference2 of this PendingConsignmentItemContentV2.


        :param reference2: The reference2 of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._reference2 = reference2

    @property
    def reference3(self):
        """Gets the reference3 of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The reference3 of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._reference3

    @reference3.setter
    def reference3(self, reference3):
        """Sets the reference3 of this PendingConsignmentItemContentV2.


        :param reference3: The reference3 of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._reference3 = reference3

    @property
    def quantity(self):
        """Gets the quantity of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The quantity of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PendingConsignmentItemContentV2.


        :param quantity: The quantity of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def dollar_value(self):
        """Gets the dollar_value of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The dollar_value of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: float
        """
        return self._dollar_value

    @dollar_value.setter
    def dollar_value(self, dollar_value):
        """Sets the dollar_value of this PendingConsignmentItemContentV2.


        :param dollar_value: The dollar_value of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: float
        """

        self._dollar_value = dollar_value

    @property
    def ci_marks_and_numbers(self):
        """Gets the ci_marks_and_numbers of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The ci_marks_and_numbers of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._ci_marks_and_numbers

    @ci_marks_and_numbers.setter
    def ci_marks_and_numbers(self, ci_marks_and_numbers):
        """Sets the ci_marks_and_numbers of this PendingConsignmentItemContentV2.


        :param ci_marks_and_numbers: The ci_marks_and_numbers of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._ci_marks_and_numbers = ci_marks_and_numbers

    @property
    def harmonized_code(self):
        """Gets the harmonized_code of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The harmonized_code of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._harmonized_code

    @harmonized_code.setter
    def harmonized_code(self, harmonized_code):
        """Sets the harmonized_code of this PendingConsignmentItemContentV2.


        :param harmonized_code: The harmonized_code of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._harmonized_code = harmonized_code

    @property
    def part_number(self):
        """Gets the part_number of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The part_number of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this PendingConsignmentItemContentV2.


        :param part_number: The part_number of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def purpose(self):
        """Gets the purpose of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The purpose of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this PendingConsignmentItemContentV2.


        :param purpose: The purpose of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def country_of_manufacture_id(self):
        """Gets the country_of_manufacture_id of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The country_of_manufacture_id of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: int
        """
        return self._country_of_manufacture_id

    @country_of_manufacture_id.setter
    def country_of_manufacture_id(self, country_of_manufacture_id):
        """Sets the country_of_manufacture_id of this PendingConsignmentItemContentV2.


        :param country_of_manufacture_id: The country_of_manufacture_id of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: int
        """

        self._country_of_manufacture_id = country_of_manufacture_id

    @property
    def country_of_manufacture_code(self):
        """Gets the country_of_manufacture_code of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The country_of_manufacture_code of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: str
        """
        return self._country_of_manufacture_code

    @country_of_manufacture_code.setter
    def country_of_manufacture_code(self, country_of_manufacture_code):
        """Sets the country_of_manufacture_code of this PendingConsignmentItemContentV2.


        :param country_of_manufacture_code: The country_of_manufacture_code of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: str
        """

        self._country_of_manufacture_code = country_of_manufacture_code

    @property
    def country_of_manufacture(self):
        """Gets the country_of_manufacture of this PendingConsignmentItemContentV2.  # noqa: E501


        :return: The country_of_manufacture of this PendingConsignmentItemContentV2.  # noqa: E501
        :rtype: Country
        """
        return self._country_of_manufacture

    @country_of_manufacture.setter
    def country_of_manufacture(self, country_of_manufacture):
        """Sets the country_of_manufacture of this PendingConsignmentItemContentV2.


        :param country_of_manufacture: The country_of_manufacture of this PendingConsignmentItemContentV2.  # noqa: E501
        :type: Country
        """

        self._country_of_manufacture = country_of_manufacture

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PendingConsignmentItemContentV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingConsignmentItemContentV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
