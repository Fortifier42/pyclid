# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'insertion_guid': 'str',
        'transaction_status': 'FinanceTransactionStatus',
        'document_number': 'str',
        'broker_id': 'int',
        'broker': 'Company',
        'company_id': 'int',
        'company': 'Company',
        'invoice_date': 'datetime',
        'due_date': 'datetime',
        'total_base_charge': 'float',
        'total_tax': 'float',
        'total_fuel_levy': 'float',
        'total': 'float',
        'amount_paid': 'float',
        'invoice_items': 'list[InvoiceItem]',
        'manual_invoice_items': 'list[InvoiceItem]',
        'invoice_pdf': 'str',
        'invoice_csv': 'str',
        'invoice_csv_extension': 'str',
        'total_oweing': 'float',
        'terms_description': 'str',
        'custom_email_subject_prefix': 'str',
        'validation_results': 'list[MachshipValidationResult]'
    }

    attribute_map = {
        'id': 'id',
        'insertion_guid': 'insertionGuid',
        'transaction_status': 'transactionStatus',
        'document_number': 'documentNumber',
        'broker_id': 'brokerId',
        'broker': 'broker',
        'company_id': 'companyId',
        'company': 'company',
        'invoice_date': 'invoiceDate',
        'due_date': 'dueDate',
        'total_base_charge': 'totalBaseCharge',
        'total_tax': 'totalTax',
        'total_fuel_levy': 'totalFuelLevy',
        'total': 'total',
        'amount_paid': 'amountPaid',
        'invoice_items': 'invoiceItems',
        'manual_invoice_items': 'manualInvoiceItems',
        'invoice_pdf': 'invoicePdf',
        'invoice_csv': 'invoiceCsv',
        'invoice_csv_extension': 'invoiceCsvExtension',
        'total_oweing': 'totalOweing',
        'terms_description': 'termsDescription',
        'custom_email_subject_prefix': 'customEmailSubjectPrefix',
        'validation_results': 'validationResults'
    }

    def __init__(self, id=None, insertion_guid=None, transaction_status=None, document_number=None, broker_id=None, broker=None, company_id=None, company=None, invoice_date=None, due_date=None, total_base_charge=None, total_tax=None, total_fuel_levy=None, total=None, amount_paid=None, invoice_items=None, manual_invoice_items=None, invoice_pdf=None, invoice_csv=None, invoice_csv_extension=None, total_oweing=None, terms_description=None, custom_email_subject_prefix=None, validation_results=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._insertion_guid = None
        self._transaction_status = None
        self._document_number = None
        self._broker_id = None
        self._broker = None
        self._company_id = None
        self._company = None
        self._invoice_date = None
        self._due_date = None
        self._total_base_charge = None
        self._total_tax = None
        self._total_fuel_levy = None
        self._total = None
        self._amount_paid = None
        self._invoice_items = None
        self._manual_invoice_items = None
        self._invoice_pdf = None
        self._invoice_csv = None
        self._invoice_csv_extension = None
        self._total_oweing = None
        self._terms_description = None
        self._custom_email_subject_prefix = None
        self._validation_results = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if insertion_guid is not None:
            self.insertion_guid = insertion_guid
        if transaction_status is not None:
            self.transaction_status = transaction_status
        if document_number is not None:
            self.document_number = document_number
        if broker_id is not None:
            self.broker_id = broker_id
        if broker is not None:
            self.broker = broker
        if company_id is not None:
            self.company_id = company_id
        if company is not None:
            self.company = company
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if due_date is not None:
            self.due_date = due_date
        if total_base_charge is not None:
            self.total_base_charge = total_base_charge
        if total_tax is not None:
            self.total_tax = total_tax
        if total_fuel_levy is not None:
            self.total_fuel_levy = total_fuel_levy
        if total is not None:
            self.total = total
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if invoice_items is not None:
            self.invoice_items = invoice_items
        if manual_invoice_items is not None:
            self.manual_invoice_items = manual_invoice_items
        if invoice_pdf is not None:
            self.invoice_pdf = invoice_pdf
        if invoice_csv is not None:
            self.invoice_csv = invoice_csv
        if invoice_csv_extension is not None:
            self.invoice_csv_extension = invoice_csv_extension
        if total_oweing is not None:
            self.total_oweing = total_oweing
        if terms_description is not None:
            self.terms_description = terms_description
        if custom_email_subject_prefix is not None:
            self.custom_email_subject_prefix = custom_email_subject_prefix
        if validation_results is not None:
            self.validation_results = validation_results

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501


        :return: The id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def insertion_guid(self):
        """Gets the insertion_guid of this Invoice.  # noqa: E501


        :return: The insertion_guid of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._insertion_guid

    @insertion_guid.setter
    def insertion_guid(self, insertion_guid):
        """Sets the insertion_guid of this Invoice.


        :param insertion_guid: The insertion_guid of this Invoice.  # noqa: E501
        :type: str
        """

        self._insertion_guid = insertion_guid

    @property
    def transaction_status(self):
        """Gets the transaction_status of this Invoice.  # noqa: E501


        :return: The transaction_status of this Invoice.  # noqa: E501
        :rtype: FinanceTransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this Invoice.


        :param transaction_status: The transaction_status of this Invoice.  # noqa: E501
        :type: FinanceTransactionStatus
        """

        self._transaction_status = transaction_status

    @property
    def document_number(self):
        """Gets the document_number of this Invoice.  # noqa: E501


        :return: The document_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this Invoice.


        :param document_number: The document_number of this Invoice.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def broker_id(self):
        """Gets the broker_id of this Invoice.  # noqa: E501


        :return: The broker_id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._broker_id

    @broker_id.setter
    def broker_id(self, broker_id):
        """Sets the broker_id of this Invoice.


        :param broker_id: The broker_id of this Invoice.  # noqa: E501
        :type: int
        """

        self._broker_id = broker_id

    @property
    def broker(self):
        """Gets the broker of this Invoice.  # noqa: E501


        :return: The broker of this Invoice.  # noqa: E501
        :rtype: Company
        """
        return self._broker

    @broker.setter
    def broker(self, broker):
        """Sets the broker of this Invoice.


        :param broker: The broker of this Invoice.  # noqa: E501
        :type: Company
        """

        self._broker = broker

    @property
    def company_id(self):
        """Gets the company_id of this Invoice.  # noqa: E501


        :return: The company_id of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Invoice.


        :param company_id: The company_id of this Invoice.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def company(self):
        """Gets the company of this Invoice.  # noqa: E501


        :return: The company of this Invoice.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Invoice.


        :param company: The company of this Invoice.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.  # noqa: E501


        :return: The invoice_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.


        :param invoice_date: The invoice_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._invoice_date = invoice_date

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.  # noqa: E501


        :return: The due_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.


        :param due_date: The due_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def total_base_charge(self):
        """Gets the total_base_charge of this Invoice.  # noqa: E501


        :return: The total_base_charge of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_base_charge

    @total_base_charge.setter
    def total_base_charge(self, total_base_charge):
        """Sets the total_base_charge of this Invoice.


        :param total_base_charge: The total_base_charge of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_base_charge = total_base_charge

    @property
    def total_tax(self):
        """Gets the total_tax of this Invoice.  # noqa: E501


        :return: The total_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Invoice.


        :param total_tax: The total_tax of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_tax = total_tax

    @property
    def total_fuel_levy(self):
        """Gets the total_fuel_levy of this Invoice.  # noqa: E501


        :return: The total_fuel_levy of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_fuel_levy

    @total_fuel_levy.setter
    def total_fuel_levy(self, total_fuel_levy):
        """Sets the total_fuel_levy of this Invoice.


        :param total_fuel_levy: The total_fuel_levy of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_fuel_levy = total_fuel_levy

    @property
    def total(self):
        """Gets the total of this Invoice.  # noqa: E501


        :return: The total of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Invoice.


        :param total: The total of this Invoice.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def amount_paid(self):
        """Gets the amount_paid of this Invoice.  # noqa: E501


        :return: The amount_paid of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this Invoice.


        :param amount_paid: The amount_paid of this Invoice.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def invoice_items(self):
        """Gets the invoice_items of this Invoice.  # noqa: E501


        :return: The invoice_items of this Invoice.  # noqa: E501
        :rtype: list[InvoiceItem]
        """
        return self._invoice_items

    @invoice_items.setter
    def invoice_items(self, invoice_items):
        """Sets the invoice_items of this Invoice.


        :param invoice_items: The invoice_items of this Invoice.  # noqa: E501
        :type: list[InvoiceItem]
        """

        self._invoice_items = invoice_items

    @property
    def manual_invoice_items(self):
        """Gets the manual_invoice_items of this Invoice.  # noqa: E501

        Used by the UI. This is all the invoice items that are not linked to any consignments. Ie. can be edited  # noqa: E501

        :return: The manual_invoice_items of this Invoice.  # noqa: E501
        :rtype: list[InvoiceItem]
        """
        return self._manual_invoice_items

    @manual_invoice_items.setter
    def manual_invoice_items(self, manual_invoice_items):
        """Sets the manual_invoice_items of this Invoice.

        Used by the UI. This is all the invoice items that are not linked to any consignments. Ie. can be edited  # noqa: E501

        :param manual_invoice_items: The manual_invoice_items of this Invoice.  # noqa: E501
        :type: list[InvoiceItem]
        """

        self._manual_invoice_items = manual_invoice_items

    @property
    def invoice_pdf(self):
        """Gets the invoice_pdf of this Invoice.  # noqa: E501


        :return: The invoice_pdf of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_pdf

    @invoice_pdf.setter
    def invoice_pdf(self, invoice_pdf):
        """Sets the invoice_pdf of this Invoice.


        :param invoice_pdf: The invoice_pdf of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_pdf = invoice_pdf

    @property
    def invoice_csv(self):
        """Gets the invoice_csv of this Invoice.  # noqa: E501


        :return: The invoice_csv of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_csv

    @invoice_csv.setter
    def invoice_csv(self, invoice_csv):
        """Sets the invoice_csv of this Invoice.


        :param invoice_csv: The invoice_csv of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_csv = invoice_csv

    @property
    def invoice_csv_extension(self):
        """Gets the invoice_csv_extension of this Invoice.  # noqa: E501


        :return: The invoice_csv_extension of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_csv_extension

    @invoice_csv_extension.setter
    def invoice_csv_extension(self, invoice_csv_extension):
        """Sets the invoice_csv_extension of this Invoice.


        :param invoice_csv_extension: The invoice_csv_extension of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_csv_extension = invoice_csv_extension

    @property
    def total_oweing(self):
        """Gets the total_oweing of this Invoice.  # noqa: E501


        :return: The total_oweing of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._total_oweing

    @total_oweing.setter
    def total_oweing(self, total_oweing):
        """Sets the total_oweing of this Invoice.


        :param total_oweing: The total_oweing of this Invoice.  # noqa: E501
        :type: float
        """

        self._total_oweing = total_oweing

    @property
    def terms_description(self):
        """Gets the terms_description of this Invoice.  # noqa: E501


        :return: The terms_description of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._terms_description

    @terms_description.setter
    def terms_description(self, terms_description):
        """Sets the terms_description of this Invoice.


        :param terms_description: The terms_description of this Invoice.  # noqa: E501
        :type: str
        """

        self._terms_description = terms_description

    @property
    def custom_email_subject_prefix(self):
        """Gets the custom_email_subject_prefix of this Invoice.  # noqa: E501


        :return: The custom_email_subject_prefix of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._custom_email_subject_prefix

    @custom_email_subject_prefix.setter
    def custom_email_subject_prefix(self, custom_email_subject_prefix):
        """Sets the custom_email_subject_prefix of this Invoice.


        :param custom_email_subject_prefix: The custom_email_subject_prefix of this Invoice.  # noqa: E501
        :type: str
        """

        self._custom_email_subject_prefix = custom_email_subject_prefix

    @property
    def validation_results(self):
        """Gets the validation_results of this Invoice.  # noqa: E501


        :return: The validation_results of this Invoice.  # noqa: E501
        :rtype: list[MachshipValidationResult]
        """
        return self._validation_results

    @validation_results.setter
    def validation_results(self, validation_results):
        """Sets the validation_results of this Invoice.


        :param validation_results: The validation_results of this Invoice.  # noqa: E501
        :type: list[MachshipValidationResult]
        """

        self._validation_results = validation_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
