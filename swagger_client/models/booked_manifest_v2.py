# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BookedManifestV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consignment_ids': 'list[int]',
        'company_id': 'int',
        'pickup_date_time': 'datetime',
        'pallet_spaces': 'int',
        'pickup_closing_time': 'datetime',
        'pickup_special_instructions': 'str',
        'pickup_already_booked': 'bool',
        'carrier_name': 'str',
        'dgs_declaration': 'bool',
        'custom_values': 'list[CustomValue]'
    }

    attribute_map = {
        'consignment_ids': 'consignmentIds',
        'company_id': 'companyId',
        'pickup_date_time': 'pickupDateTime',
        'pallet_spaces': 'palletSpaces',
        'pickup_closing_time': 'pickupClosingTime',
        'pickup_special_instructions': 'pickupSpecialInstructions',
        'pickup_already_booked': 'pickupAlreadyBooked',
        'carrier_name': 'carrierName',
        'dgs_declaration': 'dgsDeclaration',
        'custom_values': 'customValues'
    }

    def __init__(self, consignment_ids=None, company_id=None, pickup_date_time=None, pallet_spaces=None, pickup_closing_time=None, pickup_special_instructions=None, pickup_already_booked=None, carrier_name=None, dgs_declaration=None, custom_values=None):  # noqa: E501
        """BookedManifestV2 - a model defined in Swagger"""  # noqa: E501
        self._consignment_ids = None
        self._company_id = None
        self._pickup_date_time = None
        self._pallet_spaces = None
        self._pickup_closing_time = None
        self._pickup_special_instructions = None
        self._pickup_already_booked = None
        self._carrier_name = None
        self._dgs_declaration = None
        self._custom_values = None
        self.discriminator = None
        self.consignment_ids = consignment_ids
        self.company_id = company_id
        if pickup_date_time is not None:
            self.pickup_date_time = pickup_date_time
        if pallet_spaces is not None:
            self.pallet_spaces = pallet_spaces
        if pickup_closing_time is not None:
            self.pickup_closing_time = pickup_closing_time
        if pickup_special_instructions is not None:
            self.pickup_special_instructions = pickup_special_instructions
        if pickup_already_booked is not None:
            self.pickup_already_booked = pickup_already_booked
        if carrier_name is not None:
            self.carrier_name = carrier_name
        if dgs_declaration is not None:
            self.dgs_declaration = dgs_declaration
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def consignment_ids(self):
        """Gets the consignment_ids of this BookedManifestV2.  # noqa: E501

        All the consignment Ids that should be manifested together  # noqa: E501

        :return: The consignment_ids of this BookedManifestV2.  # noqa: E501
        :rtype: list[int]
        """
        return self._consignment_ids

    @consignment_ids.setter
    def consignment_ids(self, consignment_ids):
        """Sets the consignment_ids of this BookedManifestV2.

        All the consignment Ids that should be manifested together  # noqa: E501

        :param consignment_ids: The consignment_ids of this BookedManifestV2.  # noqa: E501
        :type: list[int]
        """
        if consignment_ids is None:
            raise ValueError("Invalid value for `consignment_ids`, must not be `None`")  # noqa: E501

        self._consignment_ids = consignment_ids

    @property
    def company_id(self):
        """Gets the company_id of this BookedManifestV2.  # noqa: E501

        The company's id in MachShip which is manifesting these consignments  # noqa: E501

        :return: The company_id of this BookedManifestV2.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this BookedManifestV2.

        The company's id in MachShip which is manifesting these consignments  # noqa: E501

        :param company_id: The company_id of this BookedManifestV2.  # noqa: E501
        :type: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def pickup_date_time(self):
        """Gets the pickup_date_time of this BookedManifestV2.  # noqa: E501

        Pickup Date of this manifest. Should be in the format 'YYYY-MM-DD HH:SS'  # noqa: E501

        :return: The pickup_date_time of this BookedManifestV2.  # noqa: E501
        :rtype: datetime
        """
        return self._pickup_date_time

    @pickup_date_time.setter
    def pickup_date_time(self, pickup_date_time):
        """Sets the pickup_date_time of this BookedManifestV2.

        Pickup Date of this manifest. Should be in the format 'YYYY-MM-DD HH:SS'  # noqa: E501

        :param pickup_date_time: The pickup_date_time of this BookedManifestV2.  # noqa: E501
        :type: datetime
        """

        self._pickup_date_time = pickup_date_time

    @property
    def pallet_spaces(self):
        """Gets the pallet_spaces of this BookedManifestV2.  # noqa: E501

        How many pallet spaces are required for this manifest?  # noqa: E501

        :return: The pallet_spaces of this BookedManifestV2.  # noqa: E501
        :rtype: int
        """
        return self._pallet_spaces

    @pallet_spaces.setter
    def pallet_spaces(self, pallet_spaces):
        """Sets the pallet_spaces of this BookedManifestV2.

        How many pallet spaces are required for this manifest?  # noqa: E501

        :param pallet_spaces: The pallet_spaces of this BookedManifestV2.  # noqa: E501
        :type: int
        """

        self._pallet_spaces = pallet_spaces

    @property
    def pickup_closing_time(self):
        """Gets the pickup_closing_time of this BookedManifestV2.  # noqa: E501

        What is the closing time for this pickup location?  # noqa: E501

        :return: The pickup_closing_time of this BookedManifestV2.  # noqa: E501
        :rtype: datetime
        """
        return self._pickup_closing_time

    @pickup_closing_time.setter
    def pickup_closing_time(self, pickup_closing_time):
        """Sets the pickup_closing_time of this BookedManifestV2.

        What is the closing time for this pickup location?  # noqa: E501

        :param pickup_closing_time: The pickup_closing_time of this BookedManifestV2.  # noqa: E501
        :type: datetime
        """

        self._pickup_closing_time = pickup_closing_time

    @property
    def pickup_special_instructions(self):
        """Gets the pickup_special_instructions of this BookedManifestV2.  # noqa: E501

        Pickup special instructions for the driver (Optional)  # noqa: E501

        :return: The pickup_special_instructions of this BookedManifestV2.  # noqa: E501
        :rtype: str
        """
        return self._pickup_special_instructions

    @pickup_special_instructions.setter
    def pickup_special_instructions(self, pickup_special_instructions):
        """Sets the pickup_special_instructions of this BookedManifestV2.

        Pickup special instructions for the driver (Optional)  # noqa: E501

        :param pickup_special_instructions: The pickup_special_instructions of this BookedManifestV2.  # noqa: E501
        :type: str
        """

        self._pickup_special_instructions = pickup_special_instructions

    @property
    def pickup_already_booked(self):
        """Gets the pickup_already_booked of this BookedManifestV2.  # noqa: E501

        Has a pickup already been booked? If a pickup has not been booked, MachShip will book it for you  # noqa: E501

        :return: The pickup_already_booked of this BookedManifestV2.  # noqa: E501
        :rtype: bool
        """
        return self._pickup_already_booked

    @pickup_already_booked.setter
    def pickup_already_booked(self, pickup_already_booked):
        """Sets the pickup_already_booked of this BookedManifestV2.

        Has a pickup already been booked? If a pickup has not been booked, MachShip will book it for you  # noqa: E501

        :param pickup_already_booked: The pickup_already_booked of this BookedManifestV2.  # noqa: E501
        :type: bool
        """

        self._pickup_already_booked = pickup_already_booked

    @property
    def carrier_name(self):
        """Gets the carrier_name of this BookedManifestV2.  # noqa: E501

        The carrier that the manifest is for  # noqa: E501

        :return: The carrier_name of this BookedManifestV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this BookedManifestV2.

        The carrier that the manifest is for  # noqa: E501

        :param carrier_name: The carrier_name of this BookedManifestV2.  # noqa: E501
        :type: str
        """

        self._carrier_name = carrier_name

    @property
    def dgs_declaration(self):
        """Gets the dgs_declaration of this BookedManifestV2.  # noqa: E501

        Must be true if manifesting DG consignments. Setting this to true means you Agree this Manifest is Compatible and in accordance with the Australian Dangerous Goods (ADG) Code Edition 7.8  # noqa: E501

        :return: The dgs_declaration of this BookedManifestV2.  # noqa: E501
        :rtype: bool
        """
        return self._dgs_declaration

    @dgs_declaration.setter
    def dgs_declaration(self, dgs_declaration):
        """Sets the dgs_declaration of this BookedManifestV2.

        Must be true if manifesting DG consignments. Setting this to true means you Agree this Manifest is Compatible and in accordance with the Australian Dangerous Goods (ADG) Code Edition 7.8  # noqa: E501

        :param dgs_declaration: The dgs_declaration of this BookedManifestV2.  # noqa: E501
        :type: bool
        """

        self._dgs_declaration = dgs_declaration

    @property
    def custom_values(self):
        """Gets the custom_values of this BookedManifestV2.  # noqa: E501


        :return: The custom_values of this BookedManifestV2.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BookedManifestV2.


        :param custom_values: The custom_values of this BookedManifestV2.  # noqa: E501
        :type: list[CustomValue]
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BookedManifestV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookedManifestV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
