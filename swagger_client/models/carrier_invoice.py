# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierInvoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_id': 'int',
        'carrier': 'Carrier',
        'broker_id': 'int',
        'broker': 'Company',
        'filename': 'str',
        'invoice_id': 'str',
        'invoice_date': 'datetime',
        'uploaded_date': 'datetime',
        'extra_charges': 'float',
        'extra_charges_tax': 'float',
        'date_paid': 'datetime',
        'paid': 'bool',
        'has_file': 'bool',
        'total_extra_charges': 'float',
        'total_pending_before_tax': 'float',
        'total_pending': 'float',
        'total_external_before_tax': 'float',
        'total_external': 'float',
        'total_rejected_before_tax': 'float',
        'total_rejected': 'float',
        'total_accepted_before_tax': 'float',
        'total_accepted': 'float',
        'total_adjustments_before_tax': 'float',
        'total_adjustments': 'float',
        'total_due_before_tax': 'float',
        'total_due': 'float',
        'original_total_before_tax': 'float',
        'original_total': 'float',
        'contains_pending': 'bool',
        'carrier_invoice_entries': 'list[CarrierInvoiceEntry]',
        'date_time_reconciled_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'carrier_id': 'carrierId',
        'carrier': 'carrier',
        'broker_id': 'brokerId',
        'broker': 'broker',
        'filename': 'filename',
        'invoice_id': 'invoiceId',
        'invoice_date': 'invoiceDate',
        'uploaded_date': 'uploadedDate',
        'extra_charges': 'extraCharges',
        'extra_charges_tax': 'extraChargesTax',
        'date_paid': 'datePaid',
        'paid': 'paid',
        'has_file': 'hasFile',
        'total_extra_charges': 'totalExtraCharges',
        'total_pending_before_tax': 'totalPendingBeforeTax',
        'total_pending': 'totalPending',
        'total_external_before_tax': 'totalExternalBeforeTax',
        'total_external': 'totalExternal',
        'total_rejected_before_tax': 'totalRejectedBeforeTax',
        'total_rejected': 'totalRejected',
        'total_accepted_before_tax': 'totalAcceptedBeforeTax',
        'total_accepted': 'totalAccepted',
        'total_adjustments_before_tax': 'totalAdjustmentsBeforeTax',
        'total_adjustments': 'totalAdjustments',
        'total_due_before_tax': 'totalDueBeforeTax',
        'total_due': 'totalDue',
        'original_total_before_tax': 'originalTotalBeforeTax',
        'original_total': 'originalTotal',
        'contains_pending': 'containsPending',
        'carrier_invoice_entries': 'carrierInvoiceEntries',
        'date_time_reconciled_utc': 'dateTimeReconciledUtc'
    }

    def __init__(self, id=None, carrier_id=None, carrier=None, broker_id=None, broker=None, filename=None, invoice_id=None, invoice_date=None, uploaded_date=None, extra_charges=None, extra_charges_tax=None, date_paid=None, paid=None, has_file=None, total_extra_charges=None, total_pending_before_tax=None, total_pending=None, total_external_before_tax=None, total_external=None, total_rejected_before_tax=None, total_rejected=None, total_accepted_before_tax=None, total_accepted=None, total_adjustments_before_tax=None, total_adjustments=None, total_due_before_tax=None, total_due=None, original_total_before_tax=None, original_total=None, contains_pending=None, carrier_invoice_entries=None, date_time_reconciled_utc=None):  # noqa: E501
        """CarrierInvoice - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_id = None
        self._carrier = None
        self._broker_id = None
        self._broker = None
        self._filename = None
        self._invoice_id = None
        self._invoice_date = None
        self._uploaded_date = None
        self._extra_charges = None
        self._extra_charges_tax = None
        self._date_paid = None
        self._paid = None
        self._has_file = None
        self._total_extra_charges = None
        self._total_pending_before_tax = None
        self._total_pending = None
        self._total_external_before_tax = None
        self._total_external = None
        self._total_rejected_before_tax = None
        self._total_rejected = None
        self._total_accepted_before_tax = None
        self._total_accepted = None
        self._total_adjustments_before_tax = None
        self._total_adjustments = None
        self._total_due_before_tax = None
        self._total_due = None
        self._original_total_before_tax = None
        self._original_total = None
        self._contains_pending = None
        self._carrier_invoice_entries = None
        self._date_time_reconciled_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier is not None:
            self.carrier = carrier
        if broker_id is not None:
            self.broker_id = broker_id
        if broker is not None:
            self.broker = broker
        if filename is not None:
            self.filename = filename
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if uploaded_date is not None:
            self.uploaded_date = uploaded_date
        if extra_charges is not None:
            self.extra_charges = extra_charges
        if extra_charges_tax is not None:
            self.extra_charges_tax = extra_charges_tax
        if date_paid is not None:
            self.date_paid = date_paid
        if paid is not None:
            self.paid = paid
        if has_file is not None:
            self.has_file = has_file
        if total_extra_charges is not None:
            self.total_extra_charges = total_extra_charges
        if total_pending_before_tax is not None:
            self.total_pending_before_tax = total_pending_before_tax
        if total_pending is not None:
            self.total_pending = total_pending
        if total_external_before_tax is not None:
            self.total_external_before_tax = total_external_before_tax
        if total_external is not None:
            self.total_external = total_external
        if total_rejected_before_tax is not None:
            self.total_rejected_before_tax = total_rejected_before_tax
        if total_rejected is not None:
            self.total_rejected = total_rejected
        if total_accepted_before_tax is not None:
            self.total_accepted_before_tax = total_accepted_before_tax
        if total_accepted is not None:
            self.total_accepted = total_accepted
        if total_adjustments_before_tax is not None:
            self.total_adjustments_before_tax = total_adjustments_before_tax
        if total_adjustments is not None:
            self.total_adjustments = total_adjustments
        if total_due_before_tax is not None:
            self.total_due_before_tax = total_due_before_tax
        if total_due is not None:
            self.total_due = total_due
        if original_total_before_tax is not None:
            self.original_total_before_tax = original_total_before_tax
        if original_total is not None:
            self.original_total = original_total
        if contains_pending is not None:
            self.contains_pending = contains_pending
        if carrier_invoice_entries is not None:
            self.carrier_invoice_entries = carrier_invoice_entries
        if date_time_reconciled_utc is not None:
            self.date_time_reconciled_utc = date_time_reconciled_utc

    @property
    def id(self):
        """Gets the id of this CarrierInvoice.  # noqa: E501


        :return: The id of this CarrierInvoice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierInvoice.


        :param id: The id of this CarrierInvoice.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CarrierInvoice.  # noqa: E501


        :return: The carrier_id of this CarrierInvoice.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CarrierInvoice.


        :param carrier_id: The carrier_id of this CarrierInvoice.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier(self):
        """Gets the carrier of this CarrierInvoice.  # noqa: E501


        :return: The carrier of this CarrierInvoice.  # noqa: E501
        :rtype: Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CarrierInvoice.


        :param carrier: The carrier of this CarrierInvoice.  # noqa: E501
        :type: Carrier
        """

        self._carrier = carrier

    @property
    def broker_id(self):
        """Gets the broker_id of this CarrierInvoice.  # noqa: E501


        :return: The broker_id of this CarrierInvoice.  # noqa: E501
        :rtype: int
        """
        return self._broker_id

    @broker_id.setter
    def broker_id(self, broker_id):
        """Sets the broker_id of this CarrierInvoice.


        :param broker_id: The broker_id of this CarrierInvoice.  # noqa: E501
        :type: int
        """

        self._broker_id = broker_id

    @property
    def broker(self):
        """Gets the broker of this CarrierInvoice.  # noqa: E501


        :return: The broker of this CarrierInvoice.  # noqa: E501
        :rtype: Company
        """
        return self._broker

    @broker.setter
    def broker(self, broker):
        """Sets the broker of this CarrierInvoice.


        :param broker: The broker of this CarrierInvoice.  # noqa: E501
        :type: Company
        """

        self._broker = broker

    @property
    def filename(self):
        """Gets the filename of this CarrierInvoice.  # noqa: E501


        :return: The filename of this CarrierInvoice.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this CarrierInvoice.


        :param filename: The filename of this CarrierInvoice.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CarrierInvoice.  # noqa: E501


        :return: The invoice_id of this CarrierInvoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CarrierInvoice.


        :param invoice_id: The invoice_id of this CarrierInvoice.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_date(self):
        """Gets the invoice_date of this CarrierInvoice.  # noqa: E501


        :return: The invoice_date of this CarrierInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this CarrierInvoice.


        :param invoice_date: The invoice_date of this CarrierInvoice.  # noqa: E501
        :type: datetime
        """

        self._invoice_date = invoice_date

    @property
    def uploaded_date(self):
        """Gets the uploaded_date of this CarrierInvoice.  # noqa: E501


        :return: The uploaded_date of this CarrierInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_date

    @uploaded_date.setter
    def uploaded_date(self, uploaded_date):
        """Sets the uploaded_date of this CarrierInvoice.


        :param uploaded_date: The uploaded_date of this CarrierInvoice.  # noqa: E501
        :type: datetime
        """

        self._uploaded_date = uploaded_date

    @property
    def extra_charges(self):
        """Gets the extra_charges of this CarrierInvoice.  # noqa: E501


        :return: The extra_charges of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._extra_charges

    @extra_charges.setter
    def extra_charges(self, extra_charges):
        """Sets the extra_charges of this CarrierInvoice.


        :param extra_charges: The extra_charges of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._extra_charges = extra_charges

    @property
    def extra_charges_tax(self):
        """Gets the extra_charges_tax of this CarrierInvoice.  # noqa: E501


        :return: The extra_charges_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._extra_charges_tax

    @extra_charges_tax.setter
    def extra_charges_tax(self, extra_charges_tax):
        """Sets the extra_charges_tax of this CarrierInvoice.


        :param extra_charges_tax: The extra_charges_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._extra_charges_tax = extra_charges_tax

    @property
    def date_paid(self):
        """Gets the date_paid of this CarrierInvoice.  # noqa: E501


        :return: The date_paid of this CarrierInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._date_paid

    @date_paid.setter
    def date_paid(self, date_paid):
        """Sets the date_paid of this CarrierInvoice.


        :param date_paid: The date_paid of this CarrierInvoice.  # noqa: E501
        :type: datetime
        """

        self._date_paid = date_paid

    @property
    def paid(self):
        """Gets the paid of this CarrierInvoice.  # noqa: E501


        :return: The paid of this CarrierInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this CarrierInvoice.


        :param paid: The paid of this CarrierInvoice.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def has_file(self):
        """Gets the has_file of this CarrierInvoice.  # noqa: E501


        :return: The has_file of this CarrierInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._has_file

    @has_file.setter
    def has_file(self, has_file):
        """Sets the has_file of this CarrierInvoice.


        :param has_file: The has_file of this CarrierInvoice.  # noqa: E501
        :type: bool
        """

        self._has_file = has_file

    @property
    def total_extra_charges(self):
        """Gets the total_extra_charges of this CarrierInvoice.  # noqa: E501


        :return: The total_extra_charges of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_extra_charges

    @total_extra_charges.setter
    def total_extra_charges(self, total_extra_charges):
        """Sets the total_extra_charges of this CarrierInvoice.


        :param total_extra_charges: The total_extra_charges of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_extra_charges = total_extra_charges

    @property
    def total_pending_before_tax(self):
        """Gets the total_pending_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The total_pending_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_pending_before_tax

    @total_pending_before_tax.setter
    def total_pending_before_tax(self, total_pending_before_tax):
        """Sets the total_pending_before_tax of this CarrierInvoice.


        :param total_pending_before_tax: The total_pending_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_pending_before_tax = total_pending_before_tax

    @property
    def total_pending(self):
        """Gets the total_pending of this CarrierInvoice.  # noqa: E501


        :return: The total_pending of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_pending

    @total_pending.setter
    def total_pending(self, total_pending):
        """Sets the total_pending of this CarrierInvoice.


        :param total_pending: The total_pending of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_pending = total_pending

    @property
    def total_external_before_tax(self):
        """Gets the total_external_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The total_external_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_external_before_tax

    @total_external_before_tax.setter
    def total_external_before_tax(self, total_external_before_tax):
        """Sets the total_external_before_tax of this CarrierInvoice.


        :param total_external_before_tax: The total_external_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_external_before_tax = total_external_before_tax

    @property
    def total_external(self):
        """Gets the total_external of this CarrierInvoice.  # noqa: E501


        :return: The total_external of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_external

    @total_external.setter
    def total_external(self, total_external):
        """Sets the total_external of this CarrierInvoice.


        :param total_external: The total_external of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_external = total_external

    @property
    def total_rejected_before_tax(self):
        """Gets the total_rejected_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The total_rejected_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_rejected_before_tax

    @total_rejected_before_tax.setter
    def total_rejected_before_tax(self, total_rejected_before_tax):
        """Sets the total_rejected_before_tax of this CarrierInvoice.


        :param total_rejected_before_tax: The total_rejected_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_rejected_before_tax = total_rejected_before_tax

    @property
    def total_rejected(self):
        """Gets the total_rejected of this CarrierInvoice.  # noqa: E501


        :return: The total_rejected of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_rejected

    @total_rejected.setter
    def total_rejected(self, total_rejected):
        """Sets the total_rejected of this CarrierInvoice.


        :param total_rejected: The total_rejected of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_rejected = total_rejected

    @property
    def total_accepted_before_tax(self):
        """Gets the total_accepted_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The total_accepted_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_accepted_before_tax

    @total_accepted_before_tax.setter
    def total_accepted_before_tax(self, total_accepted_before_tax):
        """Sets the total_accepted_before_tax of this CarrierInvoice.


        :param total_accepted_before_tax: The total_accepted_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_accepted_before_tax = total_accepted_before_tax

    @property
    def total_accepted(self):
        """Gets the total_accepted of this CarrierInvoice.  # noqa: E501


        :return: The total_accepted of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_accepted

    @total_accepted.setter
    def total_accepted(self, total_accepted):
        """Sets the total_accepted of this CarrierInvoice.


        :param total_accepted: The total_accepted of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_accepted = total_accepted

    @property
    def total_adjustments_before_tax(self):
        """Gets the total_adjustments_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The total_adjustments_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_adjustments_before_tax

    @total_adjustments_before_tax.setter
    def total_adjustments_before_tax(self, total_adjustments_before_tax):
        """Sets the total_adjustments_before_tax of this CarrierInvoice.


        :param total_adjustments_before_tax: The total_adjustments_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_adjustments_before_tax = total_adjustments_before_tax

    @property
    def total_adjustments(self):
        """Gets the total_adjustments of this CarrierInvoice.  # noqa: E501


        :return: The total_adjustments of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_adjustments

    @total_adjustments.setter
    def total_adjustments(self, total_adjustments):
        """Sets the total_adjustments of this CarrierInvoice.


        :param total_adjustments: The total_adjustments of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_adjustments = total_adjustments

    @property
    def total_due_before_tax(self):
        """Gets the total_due_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The total_due_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_due_before_tax

    @total_due_before_tax.setter
    def total_due_before_tax(self, total_due_before_tax):
        """Sets the total_due_before_tax of this CarrierInvoice.


        :param total_due_before_tax: The total_due_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_due_before_tax = total_due_before_tax

    @property
    def total_due(self):
        """Gets the total_due of this CarrierInvoice.  # noqa: E501


        :return: The total_due of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._total_due

    @total_due.setter
    def total_due(self, total_due):
        """Sets the total_due of this CarrierInvoice.


        :param total_due: The total_due of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._total_due = total_due

    @property
    def original_total_before_tax(self):
        """Gets the original_total_before_tax of this CarrierInvoice.  # noqa: E501


        :return: The original_total_before_tax of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._original_total_before_tax

    @original_total_before_tax.setter
    def original_total_before_tax(self, original_total_before_tax):
        """Sets the original_total_before_tax of this CarrierInvoice.


        :param original_total_before_tax: The original_total_before_tax of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._original_total_before_tax = original_total_before_tax

    @property
    def original_total(self):
        """Gets the original_total of this CarrierInvoice.  # noqa: E501


        :return: The original_total of this CarrierInvoice.  # noqa: E501
        :rtype: float
        """
        return self._original_total

    @original_total.setter
    def original_total(self, original_total):
        """Sets the original_total of this CarrierInvoice.


        :param original_total: The original_total of this CarrierInvoice.  # noqa: E501
        :type: float
        """

        self._original_total = original_total

    @property
    def contains_pending(self):
        """Gets the contains_pending of this CarrierInvoice.  # noqa: E501


        :return: The contains_pending of this CarrierInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._contains_pending

    @contains_pending.setter
    def contains_pending(self, contains_pending):
        """Sets the contains_pending of this CarrierInvoice.


        :param contains_pending: The contains_pending of this CarrierInvoice.  # noqa: E501
        :type: bool
        """

        self._contains_pending = contains_pending

    @property
    def carrier_invoice_entries(self):
        """Gets the carrier_invoice_entries of this CarrierInvoice.  # noqa: E501


        :return: The carrier_invoice_entries of this CarrierInvoice.  # noqa: E501
        :rtype: list[CarrierInvoiceEntry]
        """
        return self._carrier_invoice_entries

    @carrier_invoice_entries.setter
    def carrier_invoice_entries(self, carrier_invoice_entries):
        """Sets the carrier_invoice_entries of this CarrierInvoice.


        :param carrier_invoice_entries: The carrier_invoice_entries of this CarrierInvoice.  # noqa: E501
        :type: list[CarrierInvoiceEntry]
        """

        self._carrier_invoice_entries = carrier_invoice_entries

    @property
    def date_time_reconciled_utc(self):
        """Gets the date_time_reconciled_utc of this CarrierInvoice.  # noqa: E501


        :return: The date_time_reconciled_utc of this CarrierInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_reconciled_utc

    @date_time_reconciled_utc.setter
    def date_time_reconciled_utc(self, date_time_reconciled_utc):
        """Sets the date_time_reconciled_utc of this CarrierInvoice.


        :param date_time_reconciled_utc: The date_time_reconciled_utc of this CarrierInvoice.  # noqa: E501
        :type: datetime
        """

        self._date_time_reconciled_utc = date_time_reconciled_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierInvoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierInvoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
