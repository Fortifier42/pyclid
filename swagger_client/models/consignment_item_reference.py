# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentItemReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'consignment_item_id': 'int',
        'carrier_item_reference': 'str',
        'item_number': 'int',
        'carrier_reference': 'str',
        'printed': 'bool',
        'printed_date_utc': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'consignment_item_id': 'consignmentItemId',
        'carrier_item_reference': 'carrierItemReference',
        'item_number': 'itemNumber',
        'carrier_reference': 'carrierReference',
        'printed': 'printed',
        'printed_date_utc': 'printedDateUtc'
    }

    def __init__(self, id=None, consignment_item_id=None, carrier_item_reference=None, item_number=None, carrier_reference=None, printed=None, printed_date_utc=None):  # noqa: E501
        """ConsignmentItemReference - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._consignment_item_id = None
        self._carrier_item_reference = None
        self._item_number = None
        self._carrier_reference = None
        self._printed = None
        self._printed_date_utc = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if consignment_item_id is not None:
            self.consignment_item_id = consignment_item_id
        if carrier_item_reference is not None:
            self.carrier_item_reference = carrier_item_reference
        if item_number is not None:
            self.item_number = item_number
        if carrier_reference is not None:
            self.carrier_reference = carrier_reference
        if printed is not None:
            self.printed = printed
        if printed_date_utc is not None:
            self.printed_date_utc = printed_date_utc

    @property
    def id(self):
        """Gets the id of this ConsignmentItemReference.  # noqa: E501


        :return: The id of this ConsignmentItemReference.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsignmentItemReference.


        :param id: The id of this ConsignmentItemReference.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def consignment_item_id(self):
        """Gets the consignment_item_id of this ConsignmentItemReference.  # noqa: E501


        :return: The consignment_item_id of this ConsignmentItemReference.  # noqa: E501
        :rtype: int
        """
        return self._consignment_item_id

    @consignment_item_id.setter
    def consignment_item_id(self, consignment_item_id):
        """Sets the consignment_item_id of this ConsignmentItemReference.


        :param consignment_item_id: The consignment_item_id of this ConsignmentItemReference.  # noqa: E501
        :type: int
        """

        self._consignment_item_id = consignment_item_id

    @property
    def carrier_item_reference(self):
        """Gets the carrier_item_reference of this ConsignmentItemReference.  # noqa: E501

        This is the reference that will appear on the label / manifest. For example, {connoteRef}001  # noqa: E501

        :return: The carrier_item_reference of this ConsignmentItemReference.  # noqa: E501
        :rtype: str
        """
        return self._carrier_item_reference

    @carrier_item_reference.setter
    def carrier_item_reference(self, carrier_item_reference):
        """Sets the carrier_item_reference of this ConsignmentItemReference.

        This is the reference that will appear on the label / manifest. For example, {connoteRef}001  # noqa: E501

        :param carrier_item_reference: The carrier_item_reference of this ConsignmentItemReference.  # noqa: E501
        :type: str
        """

        self._carrier_item_reference = carrier_item_reference

    @property
    def item_number(self):
        """Gets the item_number of this ConsignmentItemReference.  # noqa: E501

        The Ordered item number in the list. eg. 1, 2, 3, 4, etc.  This order is for the whole consignment, not just the item  # noqa: E501

        :return: The item_number of this ConsignmentItemReference.  # noqa: E501
        :rtype: int
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this ConsignmentItemReference.

        The Ordered item number in the list. eg. 1, 2, 3, 4, etc.  This order is for the whole consignment, not just the item  # noqa: E501

        :param item_number: The item_number of this ConsignmentItemReference.  # noqa: E501
        :type: int
        """

        self._item_number = item_number

    @property
    def carrier_reference(self):
        """Gets the carrier_reference of this ConsignmentItemReference.  # noqa: E501

        Any other information that may need to go through to the carrier  # noqa: E501

        :return: The carrier_reference of this ConsignmentItemReference.  # noqa: E501
        :rtype: str
        """
        return self._carrier_reference

    @carrier_reference.setter
    def carrier_reference(self, carrier_reference):
        """Sets the carrier_reference of this ConsignmentItemReference.

        Any other information that may need to go through to the carrier  # noqa: E501

        :param carrier_reference: The carrier_reference of this ConsignmentItemReference.  # noqa: E501
        :type: str
        """

        self._carrier_reference = carrier_reference

    @property
    def printed(self):
        """Gets the printed of this ConsignmentItemReference.  # noqa: E501


        :return: The printed of this ConsignmentItemReference.  # noqa: E501
        :rtype: bool
        """
        return self._printed

    @printed.setter
    def printed(self, printed):
        """Sets the printed of this ConsignmentItemReference.


        :param printed: The printed of this ConsignmentItemReference.  # noqa: E501
        :type: bool
        """

        self._printed = printed

    @property
    def printed_date_utc(self):
        """Gets the printed_date_utc of this ConsignmentItemReference.  # noqa: E501


        :return: The printed_date_utc of this ConsignmentItemReference.  # noqa: E501
        :rtype: datetime
        """
        return self._printed_date_utc

    @printed_date_utc.setter
    def printed_date_utc(self, printed_date_utc):
        """Sets the printed_date_utc of this ConsignmentItemReference.


        :param printed_date_utc: The printed_date_utc of this ConsignmentItemReference.  # noqa: E501
        :type: datetime
        """

        self._printed_date_utc = printed_date_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentItemReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentItemReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
