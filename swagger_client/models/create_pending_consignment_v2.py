# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePendingConsignmentV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'int',
        'despatch_date_time_local': 'datetime',
        'customer_reference': 'str',
        'customer_reference2': 'str',
        'carrier_consignment_id': 'str',
        'carrier_id': 'int',
        'carrier': 'str',
        'carrier_service_id': 'int',
        'carrier_service': 'str',
        'carrier_account_id': 'int',
        'carrier_account': 'str',
        'company_carrier_account_id': 'int',
        'company_carrier_account': 'str',
        'from_company_location_id': 'int',
        'from_name': 'str',
        'from_abbreviation': 'str',
        'from_contact': 'str',
        'from_phone': 'str',
        'from_email': 'str',
        'from_address_line1': 'str',
        'from_address_line2': 'str',
        'from_location_id': 'int',
        'from_location': 'SendLocationV2',
        'to_company_location_id': 'int',
        'to_name': 'str',
        'to_abbreviation': 'str',
        'to_contact': 'str',
        'to_phone': 'str',
        'to_email': 'str',
        'to_address_line1': 'str',
        'to_address_line2': 'str',
        'to_location_id': 'int',
        'to_location': 'SendLocationV2',
        'special_instructions': 'str',
        'printer_token': 'str',
        'items': 'list[PendingConsignmentItemV2]',
        'receiver_account_code': 'str',
        'is_receiver_account': 'bool',
        'question_ids': 'list[int]',
        'staff_member_name': 'str',
        'send_tracking_email': 'bool',
        'custom_values': 'list[CustomValue]',
        'is_international': 'bool',
        'international_from_city': 'str',
        'international_from_postcode': 'str',
        'international_from_province': 'str',
        'from_country_id': 'int',
        'from_country_code': 'str',
        'from_country': 'Country',
        'international_to_city': 'str',
        'international_to_postcode': 'str',
        'international_to_province': 'str',
        'to_country_id': 'int',
        'to_country_code': 'str',
        'to_country': 'Country'
    }

    attribute_map = {
        'company_id': 'companyId',
        'despatch_date_time_local': 'despatchDateTimeLocal',
        'customer_reference': 'customerReference',
        'customer_reference2': 'customerReference2',
        'carrier_consignment_id': 'carrierConsignmentId',
        'carrier_id': 'carrierId',
        'carrier': 'carrier',
        'carrier_service_id': 'carrierServiceId',
        'carrier_service': 'carrierService',
        'carrier_account_id': 'carrierAccountId',
        'carrier_account': 'carrierAccount',
        'company_carrier_account_id': 'companyCarrierAccountId',
        'company_carrier_account': 'companyCarrierAccount',
        'from_company_location_id': 'fromCompanyLocationId',
        'from_name': 'fromName',
        'from_abbreviation': 'fromAbbreviation',
        'from_contact': 'fromContact',
        'from_phone': 'fromPhone',
        'from_email': 'fromEmail',
        'from_address_line1': 'fromAddressLine1',
        'from_address_line2': 'fromAddressLine2',
        'from_location_id': 'fromLocationId',
        'from_location': 'fromLocation',
        'to_company_location_id': 'toCompanyLocationId',
        'to_name': 'toName',
        'to_abbreviation': 'toAbbreviation',
        'to_contact': 'toContact',
        'to_phone': 'toPhone',
        'to_email': 'toEmail',
        'to_address_line1': 'toAddressLine1',
        'to_address_line2': 'toAddressLine2',
        'to_location_id': 'toLocationId',
        'to_location': 'toLocation',
        'special_instructions': 'specialInstructions',
        'printer_token': 'printerToken',
        'items': 'items',
        'receiver_account_code': 'receiverAccountCode',
        'is_receiver_account': 'isReceiverAccount',
        'question_ids': 'questionIds',
        'staff_member_name': 'staffMemberName',
        'send_tracking_email': 'sendTrackingEmail',
        'custom_values': 'customValues',
        'is_international': 'isInternational',
        'international_from_city': 'internationalFromCity',
        'international_from_postcode': 'internationalFromPostcode',
        'international_from_province': 'internationalFromProvince',
        'from_country_id': 'fromCountryId',
        'from_country_code': 'fromCountryCode',
        'from_country': 'fromCountry',
        'international_to_city': 'internationalToCity',
        'international_to_postcode': 'internationalToPostcode',
        'international_to_province': 'internationalToProvince',
        'to_country_id': 'toCountryId',
        'to_country_code': 'toCountryCode',
        'to_country': 'toCountry'
    }

    def __init__(self, company_id=None, despatch_date_time_local=None, customer_reference=None, customer_reference2=None, carrier_consignment_id=None, carrier_id=None, carrier=None, carrier_service_id=None, carrier_service=None, carrier_account_id=None, carrier_account=None, company_carrier_account_id=None, company_carrier_account=None, from_company_location_id=None, from_name=None, from_abbreviation=None, from_contact=None, from_phone=None, from_email=None, from_address_line1=None, from_address_line2=None, from_location_id=None, from_location=None, to_company_location_id=None, to_name=None, to_abbreviation=None, to_contact=None, to_phone=None, to_email=None, to_address_line1=None, to_address_line2=None, to_location_id=None, to_location=None, special_instructions=None, printer_token=None, items=None, receiver_account_code=None, is_receiver_account=None, question_ids=None, staff_member_name=None, send_tracking_email=None, custom_values=None, is_international=None, international_from_city=None, international_from_postcode=None, international_from_province=None, from_country_id=None, from_country_code=None, from_country=None, international_to_city=None, international_to_postcode=None, international_to_province=None, to_country_id=None, to_country_code=None, to_country=None):  # noqa: E501
        """CreatePendingConsignmentV2 - a model defined in Swagger"""  # noqa: E501
        self._company_id = None
        self._despatch_date_time_local = None
        self._customer_reference = None
        self._customer_reference2 = None
        self._carrier_consignment_id = None
        self._carrier_id = None
        self._carrier = None
        self._carrier_service_id = None
        self._carrier_service = None
        self._carrier_account_id = None
        self._carrier_account = None
        self._company_carrier_account_id = None
        self._company_carrier_account = None
        self._from_company_location_id = None
        self._from_name = None
        self._from_abbreviation = None
        self._from_contact = None
        self._from_phone = None
        self._from_email = None
        self._from_address_line1 = None
        self._from_address_line2 = None
        self._from_location_id = None
        self._from_location = None
        self._to_company_location_id = None
        self._to_name = None
        self._to_abbreviation = None
        self._to_contact = None
        self._to_phone = None
        self._to_email = None
        self._to_address_line1 = None
        self._to_address_line2 = None
        self._to_location_id = None
        self._to_location = None
        self._special_instructions = None
        self._printer_token = None
        self._items = None
        self._receiver_account_code = None
        self._is_receiver_account = None
        self._question_ids = None
        self._staff_member_name = None
        self._send_tracking_email = None
        self._custom_values = None
        self._is_international = None
        self._international_from_city = None
        self._international_from_postcode = None
        self._international_from_province = None
        self._from_country_id = None
        self._from_country_code = None
        self._from_country = None
        self._international_to_city = None
        self._international_to_postcode = None
        self._international_to_province = None
        self._to_country_id = None
        self._to_country_code = None
        self._to_country = None
        self.discriminator = None
        if company_id is not None:
            self.company_id = company_id
        if despatch_date_time_local is not None:
            self.despatch_date_time_local = despatch_date_time_local
        if customer_reference is not None:
            self.customer_reference = customer_reference
        if customer_reference2 is not None:
            self.customer_reference2 = customer_reference2
        if carrier_consignment_id is not None:
            self.carrier_consignment_id = carrier_consignment_id
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier is not None:
            self.carrier = carrier
        if carrier_service_id is not None:
            self.carrier_service_id = carrier_service_id
        if carrier_service is not None:
            self.carrier_service = carrier_service
        if carrier_account_id is not None:
            self.carrier_account_id = carrier_account_id
        if carrier_account is not None:
            self.carrier_account = carrier_account
        if company_carrier_account_id is not None:
            self.company_carrier_account_id = company_carrier_account_id
        if company_carrier_account is not None:
            self.company_carrier_account = company_carrier_account
        if from_company_location_id is not None:
            self.from_company_location_id = from_company_location_id
        if from_name is not None:
            self.from_name = from_name
        if from_abbreviation is not None:
            self.from_abbreviation = from_abbreviation
        if from_contact is not None:
            self.from_contact = from_contact
        if from_phone is not None:
            self.from_phone = from_phone
        if from_email is not None:
            self.from_email = from_email
        if from_address_line1 is not None:
            self.from_address_line1 = from_address_line1
        if from_address_line2 is not None:
            self.from_address_line2 = from_address_line2
        if from_location_id is not None:
            self.from_location_id = from_location_id
        if from_location is not None:
            self.from_location = from_location
        if to_company_location_id is not None:
            self.to_company_location_id = to_company_location_id
        if to_name is not None:
            self.to_name = to_name
        if to_abbreviation is not None:
            self.to_abbreviation = to_abbreviation
        if to_contact is not None:
            self.to_contact = to_contact
        if to_phone is not None:
            self.to_phone = to_phone
        if to_email is not None:
            self.to_email = to_email
        if to_address_line1 is not None:
            self.to_address_line1 = to_address_line1
        if to_address_line2 is not None:
            self.to_address_line2 = to_address_line2
        if to_location_id is not None:
            self.to_location_id = to_location_id
        if to_location is not None:
            self.to_location = to_location
        if special_instructions is not None:
            self.special_instructions = special_instructions
        if printer_token is not None:
            self.printer_token = printer_token
        if items is not None:
            self.items = items
        if receiver_account_code is not None:
            self.receiver_account_code = receiver_account_code
        if is_receiver_account is not None:
            self.is_receiver_account = is_receiver_account
        if question_ids is not None:
            self.question_ids = question_ids
        if staff_member_name is not None:
            self.staff_member_name = staff_member_name
        if send_tracking_email is not None:
            self.send_tracking_email = send_tracking_email
        if custom_values is not None:
            self.custom_values = custom_values
        if is_international is not None:
            self.is_international = is_international
        if international_from_city is not None:
            self.international_from_city = international_from_city
        if international_from_postcode is not None:
            self.international_from_postcode = international_from_postcode
        if international_from_province is not None:
            self.international_from_province = international_from_province
        if from_country_id is not None:
            self.from_country_id = from_country_id
        if from_country_code is not None:
            self.from_country_code = from_country_code
        if from_country is not None:
            self.from_country = from_country
        if international_to_city is not None:
            self.international_to_city = international_to_city
        if international_to_postcode is not None:
            self.international_to_postcode = international_to_postcode
        if international_to_province is not None:
            self.international_to_province = international_to_province
        if to_country_id is not None:
            self.to_country_id = to_country_id
        if to_country_code is not None:
            self.to_country_code = to_country_code
        if to_country is not None:
            self.to_country = to_country

    @property
    def company_id(self):
        """Gets the company_id of this CreatePendingConsignmentV2.  # noqa: E501

        An (optional) Machship ID of a company. When supplied the routes will be those of the company specified, when left  blank they will be routes for the company associated with the authorised user.  # noqa: E501

        :return: The company_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CreatePendingConsignmentV2.

        An (optional) Machship ID of a company. When supplied the routes will be those of the company specified, when left  blank they will be routes for the company associated with the authorised user.  # noqa: E501

        :param company_id: The company_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def despatch_date_time_local(self):
        """Gets the despatch_date_time_local of this CreatePendingConsignmentV2.  # noqa: E501

        Optional: The local despatch datetime that was provided in the route. This datetime must be local to the pickup location. If the DespatchDateTimeUtc is provided, this does not need to be set. If no time is set, this will default to NOW (pickup local time)  # noqa: E501

        :return: The despatch_date_time_local of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: datetime
        """
        return self._despatch_date_time_local

    @despatch_date_time_local.setter
    def despatch_date_time_local(self, despatch_date_time_local):
        """Sets the despatch_date_time_local of this CreatePendingConsignmentV2.

        Optional: The local despatch datetime that was provided in the route. This datetime must be local to the pickup location. If the DespatchDateTimeUtc is provided, this does not need to be set. If no time is set, this will default to NOW (pickup local time)  # noqa: E501

        :param despatch_date_time_local: The despatch_date_time_local of this CreatePendingConsignmentV2.  # noqa: E501
        :type: datetime
        """

        self._despatch_date_time_local = despatch_date_time_local

    @property
    def customer_reference(self):
        """Gets the customer_reference of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The customer_reference of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this CreatePendingConsignmentV2.


        :param customer_reference: The customer_reference of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._customer_reference = customer_reference

    @property
    def customer_reference2(self):
        """Gets the customer_reference2 of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The customer_reference2 of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference2

    @customer_reference2.setter
    def customer_reference2(self, customer_reference2):
        """Sets the customer_reference2 of this CreatePendingConsignmentV2.


        :param customer_reference2: The customer_reference2 of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._customer_reference2 = customer_reference2

    @property
    def carrier_consignment_id(self):
        """Gets the carrier_consignment_id of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The carrier_consignment_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_consignment_id

    @carrier_consignment_id.setter
    def carrier_consignment_id(self, carrier_consignment_id):
        """Sets the carrier_consignment_id of this CreatePendingConsignmentV2.


        :param carrier_consignment_id: The carrier_consignment_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._carrier_consignment_id = carrier_consignment_id

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The carrier_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CreatePendingConsignmentV2.


        :param carrier_id: The carrier_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier(self):
        """Gets the carrier of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The carrier of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CreatePendingConsignmentV2.


        :param carrier: The carrier of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def carrier_service_id(self):
        """Gets the carrier_service_id of this CreatePendingConsignmentV2.  # noqa: E501

        Abbreviation of the Carrier that you would like to create a consignment for. This should only be provided if carrier id could not be determined via routing  # noqa: E501

        :return: The carrier_service_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_id

    @carrier_service_id.setter
    def carrier_service_id(self, carrier_service_id):
        """Sets the carrier_service_id of this CreatePendingConsignmentV2.

        Abbreviation of the Carrier that you would like to create a consignment for. This should only be provided if carrier id could not be determined via routing  # noqa: E501

        :param carrier_service_id: The carrier_service_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._carrier_service_id = carrier_service_id

    @property
    def carrier_service(self):
        """Gets the carrier_service of this CreatePendingConsignmentV2.  # noqa: E501

        Abbreviation of the CarrierService that you would like to create a consignment for. This should only be provided if carrier service id could not be determined via routing  # noqa: E501

        :return: The carrier_service of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this CreatePendingConsignmentV2.

        Abbreviation of the CarrierService that you would like to create a consignment for. This should only be provided if carrier service id could not be determined via routing  # noqa: E501

        :param carrier_service: The carrier_service of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._carrier_service = carrier_service

    @property
    def carrier_account_id(self):
        """Gets the carrier_account_id of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The carrier_account_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._carrier_account_id

    @carrier_account_id.setter
    def carrier_account_id(self, carrier_account_id):
        """Sets the carrier_account_id of this CreatePendingConsignmentV2.


        :param carrier_account_id: The carrier_account_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._carrier_account_id = carrier_account_id

    @property
    def carrier_account(self):
        """Gets the carrier_account of this CreatePendingConsignmentV2.  # noqa: E501

        Abbreviation of the CarrierAccount that you would like to create a consignment for. This should only be provided if carrier account id could not be determined via routing  # noqa: E501

        :return: The carrier_account of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_account

    @carrier_account.setter
    def carrier_account(self, carrier_account):
        """Sets the carrier_account of this CreatePendingConsignmentV2.

        Abbreviation of the CarrierAccount that you would like to create a consignment for. This should only be provided if carrier account id could not be determined via routing  # noqa: E501

        :param carrier_account: The carrier_account of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._carrier_account = carrier_account

    @property
    def company_carrier_account_id(self):
        """Gets the company_carrier_account_id of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The company_carrier_account_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._company_carrier_account_id

    @company_carrier_account_id.setter
    def company_carrier_account_id(self, company_carrier_account_id):
        """Sets the company_carrier_account_id of this CreatePendingConsignmentV2.


        :param company_carrier_account_id: The company_carrier_account_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._company_carrier_account_id = company_carrier_account_id

    @property
    def company_carrier_account(self):
        """Gets the company_carrier_account of this CreatePendingConsignmentV2.  # noqa: E501

        Abbreviation of the CompanyCarrierAccount that you would like to create a consignment for. This should only be provided if company carrier account id could not be determined via routing  # noqa: E501

        :return: The company_carrier_account of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._company_carrier_account

    @company_carrier_account.setter
    def company_carrier_account(self, company_carrier_account):
        """Sets the company_carrier_account of this CreatePendingConsignmentV2.

        Abbreviation of the CompanyCarrierAccount that you would like to create a consignment for. This should only be provided if company carrier account id could not be determined via routing  # noqa: E501

        :param company_carrier_account: The company_carrier_account of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._company_carrier_account = company_carrier_account

    @property
    def from_company_location_id(self):
        """Gets the from_company_location_id of this CreatePendingConsignmentV2.  # noqa: E501

        The Machship Id of the saved company location that you want to use. If this is provided, Machship will link this consignment to your saved location and you do not have to provide the delivery details  # noqa: E501

        :return: The from_company_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._from_company_location_id

    @from_company_location_id.setter
    def from_company_location_id(self, from_company_location_id):
        """Sets the from_company_location_id of this CreatePendingConsignmentV2.

        The Machship Id of the saved company location that you want to use. If this is provided, Machship will link this consignment to your saved location and you do not have to provide the delivery details  # noqa: E501

        :param from_company_location_id: The from_company_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._from_company_location_id = from_company_location_id

    @property
    def from_name(self):
        """Gets the from_name of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_name of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this CreatePendingConsignmentV2.


        :param from_name: The from_name of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def from_abbreviation(self):
        """Gets the from_abbreviation of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_abbreviation of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_abbreviation

    @from_abbreviation.setter
    def from_abbreviation(self, from_abbreviation):
        """Sets the from_abbreviation of this CreatePendingConsignmentV2.


        :param from_abbreviation: The from_abbreviation of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_abbreviation = from_abbreviation

    @property
    def from_contact(self):
        """Gets the from_contact of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_contact of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_contact

    @from_contact.setter
    def from_contact(self, from_contact):
        """Sets the from_contact of this CreatePendingConsignmentV2.


        :param from_contact: The from_contact of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_contact = from_contact

    @property
    def from_phone(self):
        """Gets the from_phone of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_phone of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_phone

    @from_phone.setter
    def from_phone(self, from_phone):
        """Sets the from_phone of this CreatePendingConsignmentV2.


        :param from_phone: The from_phone of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_phone = from_phone

    @property
    def from_email(self):
        """Gets the from_email of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_email of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this CreatePendingConsignmentV2.


        :param from_email: The from_email of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_email = from_email

    @property
    def from_address_line1(self):
        """Gets the from_address_line1 of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_address_line1 of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_address_line1

    @from_address_line1.setter
    def from_address_line1(self, from_address_line1):
        """Sets the from_address_line1 of this CreatePendingConsignmentV2.


        :param from_address_line1: The from_address_line1 of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_address_line1 = from_address_line1

    @property
    def from_address_line2(self):
        """Gets the from_address_line2 of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_address_line2 of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_address_line2

    @from_address_line2.setter
    def from_address_line2(self, from_address_line2):
        """Sets the from_address_line2 of this CreatePendingConsignmentV2.


        :param from_address_line2: The from_address_line2 of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_address_line2 = from_address_line2

    @property
    def from_location_id(self):
        """Gets the from_location_id of this CreatePendingConsignmentV2.  # noqa: E501

        The machship ID of the from (pickup) location. Can be left blank if supplying the suburb / postcode instead  # noqa: E501

        :return: The from_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._from_location_id

    @from_location_id.setter
    def from_location_id(self, from_location_id):
        """Sets the from_location_id of this CreatePendingConsignmentV2.

        The machship ID of the from (pickup) location. Can be left blank if supplying the suburb / postcode instead  # noqa: E501

        :param from_location_id: The from_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._from_location_id = from_location_id

    @property
    def from_location(self):
        """Gets the from_location of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_location of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: SendLocationV2
        """
        return self._from_location

    @from_location.setter
    def from_location(self, from_location):
        """Sets the from_location of this CreatePendingConsignmentV2.


        :param from_location: The from_location of this CreatePendingConsignmentV2.  # noqa: E501
        :type: SendLocationV2
        """

        self._from_location = from_location

    @property
    def to_company_location_id(self):
        """Gets the to_company_location_id of this CreatePendingConsignmentV2.  # noqa: E501

        The Machship Id of the saved company location that you want to use. If this is provided, Machship will link this consignment to your saved location and you do not have to provide the delivery details  # noqa: E501

        :return: The to_company_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._to_company_location_id

    @to_company_location_id.setter
    def to_company_location_id(self, to_company_location_id):
        """Sets the to_company_location_id of this CreatePendingConsignmentV2.

        The Machship Id of the saved company location that you want to use. If this is provided, Machship will link this consignment to your saved location and you do not have to provide the delivery details  # noqa: E501

        :param to_company_location_id: The to_company_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._to_company_location_id = to_company_location_id

    @property
    def to_name(self):
        """Gets the to_name of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_name of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name):
        """Sets the to_name of this CreatePendingConsignmentV2.


        :param to_name: The to_name of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_name = to_name

    @property
    def to_abbreviation(self):
        """Gets the to_abbreviation of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_abbreviation of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_abbreviation

    @to_abbreviation.setter
    def to_abbreviation(self, to_abbreviation):
        """Sets the to_abbreviation of this CreatePendingConsignmentV2.


        :param to_abbreviation: The to_abbreviation of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_abbreviation = to_abbreviation

    @property
    def to_contact(self):
        """Gets the to_contact of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_contact of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_contact

    @to_contact.setter
    def to_contact(self, to_contact):
        """Sets the to_contact of this CreatePendingConsignmentV2.


        :param to_contact: The to_contact of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_contact = to_contact

    @property
    def to_phone(self):
        """Gets the to_phone of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_phone of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_phone

    @to_phone.setter
    def to_phone(self, to_phone):
        """Sets the to_phone of this CreatePendingConsignmentV2.


        :param to_phone: The to_phone of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_phone = to_phone

    @property
    def to_email(self):
        """Gets the to_email of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_email of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_email

    @to_email.setter
    def to_email(self, to_email):
        """Sets the to_email of this CreatePendingConsignmentV2.


        :param to_email: The to_email of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_email = to_email

    @property
    def to_address_line1(self):
        """Gets the to_address_line1 of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_address_line1 of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_address_line1

    @to_address_line1.setter
    def to_address_line1(self, to_address_line1):
        """Sets the to_address_line1 of this CreatePendingConsignmentV2.


        :param to_address_line1: The to_address_line1 of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_address_line1 = to_address_line1

    @property
    def to_address_line2(self):
        """Gets the to_address_line2 of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_address_line2 of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_address_line2

    @to_address_line2.setter
    def to_address_line2(self, to_address_line2):
        """Sets the to_address_line2 of this CreatePendingConsignmentV2.


        :param to_address_line2: The to_address_line2 of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_address_line2 = to_address_line2

    @property
    def to_location_id(self):
        """Gets the to_location_id of this CreatePendingConsignmentV2.  # noqa: E501

        The machship ID of the to (receiver) location. Can be left blank if supplying the suburb / postcode instead  # noqa: E501

        :return: The to_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._to_location_id

    @to_location_id.setter
    def to_location_id(self, to_location_id):
        """Sets the to_location_id of this CreatePendingConsignmentV2.

        The machship ID of the to (receiver) location. Can be left blank if supplying the suburb / postcode instead  # noqa: E501

        :param to_location_id: The to_location_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._to_location_id = to_location_id

    @property
    def to_location(self):
        """Gets the to_location of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_location of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: SendLocationV2
        """
        return self._to_location

    @to_location.setter
    def to_location(self, to_location):
        """Sets the to_location of this CreatePendingConsignmentV2.


        :param to_location: The to_location of this CreatePendingConsignmentV2.  # noqa: E501
        :type: SendLocationV2
        """

        self._to_location = to_location

    @property
    def special_instructions(self):
        """Gets the special_instructions of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The special_instructions of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._special_instructions

    @special_instructions.setter
    def special_instructions(self, special_instructions):
        """Sets the special_instructions of this CreatePendingConsignmentV2.


        :param special_instructions: The special_instructions of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._special_instructions = special_instructions

    @property
    def printer_token(self):
        """Gets the printer_token of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The printer_token of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._printer_token

    @printer_token.setter
    def printer_token(self, printer_token):
        """Sets the printer_token of this CreatePendingConsignmentV2.


        :param printer_token: The printer_token of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._printer_token = printer_token

    @property
    def items(self):
        """Gets the items of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The items of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: list[PendingConsignmentItemV2]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CreatePendingConsignmentV2.


        :param items: The items of this CreatePendingConsignmentV2.  # noqa: E501
        :type: list[PendingConsignmentItemV2]
        """

        self._items = items

    @property
    def receiver_account_code(self):
        """Gets the receiver_account_code of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The receiver_account_code of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._receiver_account_code

    @receiver_account_code.setter
    def receiver_account_code(self, receiver_account_code):
        """Sets the receiver_account_code of this CreatePendingConsignmentV2.


        :param receiver_account_code: The receiver_account_code of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._receiver_account_code = receiver_account_code

    @property
    def is_receiver_account(self):
        """Gets the is_receiver_account of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The is_receiver_account of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_receiver_account

    @is_receiver_account.setter
    def is_receiver_account(self, is_receiver_account):
        """Sets the is_receiver_account of this CreatePendingConsignmentV2.


        :param is_receiver_account: The is_receiver_account of this CreatePendingConsignmentV2.  # noqa: E501
        :type: bool
        """

        self._is_receiver_account = is_receiver_account

    @property
    def question_ids(self):
        """Gets the question_ids of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The question_ids of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: list[int]
        """
        return self._question_ids

    @question_ids.setter
    def question_ids(self, question_ids):
        """Sets the question_ids of this CreatePendingConsignmentV2.


        :param question_ids: The question_ids of this CreatePendingConsignmentV2.  # noqa: E501
        :type: list[int]
        """

        self._question_ids = question_ids

    @property
    def staff_member_name(self):
        """Gets the staff_member_name of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The staff_member_name of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._staff_member_name

    @staff_member_name.setter
    def staff_member_name(self, staff_member_name):
        """Sets the staff_member_name of this CreatePendingConsignmentV2.


        :param staff_member_name: The staff_member_name of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._staff_member_name = staff_member_name

    @property
    def send_tracking_email(self):
        """Gets the send_tracking_email of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The send_tracking_email of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: bool
        """
        return self._send_tracking_email

    @send_tracking_email.setter
    def send_tracking_email(self, send_tracking_email):
        """Sets the send_tracking_email of this CreatePendingConsignmentV2.


        :param send_tracking_email: The send_tracking_email of this CreatePendingConsignmentV2.  # noqa: E501
        :type: bool
        """

        self._send_tracking_email = send_tracking_email

    @property
    def custom_values(self):
        """Gets the custom_values of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The custom_values of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CreatePendingConsignmentV2.


        :param custom_values: The custom_values of this CreatePendingConsignmentV2.  # noqa: E501
        :type: list[CustomValue]
        """

        self._custom_values = custom_values

    @property
    def is_international(self):
        """Gets the is_international of this CreatePendingConsignmentV2.  # noqa: E501

        Flag to indicate if this consignment is international.  # noqa: E501

        :return: The is_international of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_international

    @is_international.setter
    def is_international(self, is_international):
        """Sets the is_international of this CreatePendingConsignmentV2.

        Flag to indicate if this consignment is international.  # noqa: E501

        :param is_international: The is_international of this CreatePendingConsignmentV2.  # noqa: E501
        :type: bool
        """

        self._is_international = is_international

    @property
    def international_from_city(self):
        """Gets the international_from_city of this CreatePendingConsignmentV2.  # noqa: E501

        International from city.  # noqa: E501

        :return: The international_from_city of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._international_from_city

    @international_from_city.setter
    def international_from_city(self, international_from_city):
        """Sets the international_from_city of this CreatePendingConsignmentV2.

        International from city.  # noqa: E501

        :param international_from_city: The international_from_city of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._international_from_city = international_from_city

    @property
    def international_from_postcode(self):
        """Gets the international_from_postcode of this CreatePendingConsignmentV2.  # noqa: E501

        International from postcode.  # noqa: E501

        :return: The international_from_postcode of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._international_from_postcode

    @international_from_postcode.setter
    def international_from_postcode(self, international_from_postcode):
        """Sets the international_from_postcode of this CreatePendingConsignmentV2.

        International from postcode.  # noqa: E501

        :param international_from_postcode: The international_from_postcode of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._international_from_postcode = international_from_postcode

    @property
    def international_from_province(self):
        """Gets the international_from_province of this CreatePendingConsignmentV2.  # noqa: E501

        International from province.  # noqa: E501

        :return: The international_from_province of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._international_from_province

    @international_from_province.setter
    def international_from_province(self, international_from_province):
        """Sets the international_from_province of this CreatePendingConsignmentV2.

        International from province.  # noqa: E501

        :param international_from_province: The international_from_province of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._international_from_province = international_from_province

    @property
    def from_country_id(self):
        """Gets the from_country_id of this CreatePendingConsignmentV2.  # noqa: E501

        MachShip assigned ID of the country of origin.  # noqa: E501

        :return: The from_country_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._from_country_id

    @from_country_id.setter
    def from_country_id(self, from_country_id):
        """Sets the from_country_id of this CreatePendingConsignmentV2.

        MachShip assigned ID of the country of origin.  # noqa: E501

        :param from_country_id: The from_country_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._from_country_id = from_country_id

    @property
    def from_country_code(self):
        """Gets the from_country_code of this CreatePendingConsignmentV2.  # noqa: E501

        Two or three letter ISO code of the country of origin.  # noqa: E501

        :return: The from_country_code of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._from_country_code

    @from_country_code.setter
    def from_country_code(self, from_country_code):
        """Sets the from_country_code of this CreatePendingConsignmentV2.

        Two or three letter ISO code of the country of origin.  # noqa: E501

        :param from_country_code: The from_country_code of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._from_country_code = from_country_code

    @property
    def from_country(self):
        """Gets the from_country of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The from_country of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: Country
        """
        return self._from_country

    @from_country.setter
    def from_country(self, from_country):
        """Sets the from_country of this CreatePendingConsignmentV2.


        :param from_country: The from_country of this CreatePendingConsignmentV2.  # noqa: E501
        :type: Country
        """

        self._from_country = from_country

    @property
    def international_to_city(self):
        """Gets the international_to_city of this CreatePendingConsignmentV2.  # noqa: E501

        International to city.  # noqa: E501

        :return: The international_to_city of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._international_to_city

    @international_to_city.setter
    def international_to_city(self, international_to_city):
        """Sets the international_to_city of this CreatePendingConsignmentV2.

        International to city.  # noqa: E501

        :param international_to_city: The international_to_city of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._international_to_city = international_to_city

    @property
    def international_to_postcode(self):
        """Gets the international_to_postcode of this CreatePendingConsignmentV2.  # noqa: E501

        International to postcode.  # noqa: E501

        :return: The international_to_postcode of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._international_to_postcode

    @international_to_postcode.setter
    def international_to_postcode(self, international_to_postcode):
        """Sets the international_to_postcode of this CreatePendingConsignmentV2.

        International to postcode.  # noqa: E501

        :param international_to_postcode: The international_to_postcode of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._international_to_postcode = international_to_postcode

    @property
    def international_to_province(self):
        """Gets the international_to_province of this CreatePendingConsignmentV2.  # noqa: E501

        International to province.  # noqa: E501

        :return: The international_to_province of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._international_to_province

    @international_to_province.setter
    def international_to_province(self, international_to_province):
        """Sets the international_to_province of this CreatePendingConsignmentV2.

        International to province.  # noqa: E501

        :param international_to_province: The international_to_province of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._international_to_province = international_to_province

    @property
    def to_country_id(self):
        """Gets the to_country_id of this CreatePendingConsignmentV2.  # noqa: E501

        MachShip assigned ID of the destination country.  # noqa: E501

        :return: The to_country_id of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: int
        """
        return self._to_country_id

    @to_country_id.setter
    def to_country_id(self, to_country_id):
        """Sets the to_country_id of this CreatePendingConsignmentV2.

        MachShip assigned ID of the destination country.  # noqa: E501

        :param to_country_id: The to_country_id of this CreatePendingConsignmentV2.  # noqa: E501
        :type: int
        """

        self._to_country_id = to_country_id

    @property
    def to_country_code(self):
        """Gets the to_country_code of this CreatePendingConsignmentV2.  # noqa: E501

        Two or three letter ISO code of the destination country.  # noqa: E501

        :return: The to_country_code of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: str
        """
        return self._to_country_code

    @to_country_code.setter
    def to_country_code(self, to_country_code):
        """Sets the to_country_code of this CreatePendingConsignmentV2.

        Two or three letter ISO code of the destination country.  # noqa: E501

        :param to_country_code: The to_country_code of this CreatePendingConsignmentV2.  # noqa: E501
        :type: str
        """

        self._to_country_code = to_country_code

    @property
    def to_country(self):
        """Gets the to_country of this CreatePendingConsignmentV2.  # noqa: E501


        :return: The to_country of this CreatePendingConsignmentV2.  # noqa: E501
        :rtype: Country
        """
        return self._to_country

    @to_country.setter
    def to_country(self, to_country):
        """Sets the to_country of this CreatePendingConsignmentV2.


        :param to_country: The to_country of this CreatePendingConsignmentV2.  # noqa: E501
        :type: Country
        """

        self._to_country = to_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePendingConsignmentV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePendingConsignmentV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
