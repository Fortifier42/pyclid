# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'carrier_item_type_id': 'int',
        'consignment_id': 'int',
        'carrier_item_type': 'CarrierItemType',
        'carrier_item_type_for_sell_price': 'CarrierItemType',
        'service_types': 'list[RouteServiceType]',
        'company_item_carrier_service_type_strings_concatenated': 'str',
        'company_item_carrier_service_type_name_strings_concatenated': 'str',
        'company_item_carrier_service_type_abbreviation_strings_concatenated': 'str',
        'company_item_id': 'int',
        'id': 'int',
        'item_type': 'ItemType',
        'name': 'str',
        'sku': 'str',
        'foot_print_area': 'float',
        'cubic_weight': 'float',
        'heaviest_weight': 'float',
        'quantity': 'int',
        'pallet_spaces': 'float',
        'is_pro_rated': 'bool',
        'pro_rata_spaces': 'float',
        'pro_rata_weight_adjustment': 'float',
        'per_item_weight_price': 'float',
        'per_item_volume_price': 'float',
        'pricing_applied': 'bool',
        'total_pieces_price': 'float',
        'cost_route_price': 'float',
        'sell_total_route_price': 'float',
        'markup': 'float',
        'carrier_item_type_name': 'str',
        'carrier_item_type_abbreviation': 'str',
        'sell_carrier_item_type_name': 'str',
        'sell_carrier_item_type_abbreviation': 'str',
        'carrier_reference': 'str',
        'carrier_consignment_id': 'str',
        'consignment_item_consignment_surcharges': 'list[ConsignmentItemConsignmentSurcharge]',
        'item': 'IConsignmentItem',
        'standard_item_id': 'int',
        'standard_item': 'ConsignmentStandardItem',
        'combined_item_id': 'int',
        'combined_item': 'ConsignmentCombinedItem',
        'combined_load_size_id': 'int',
        'combined_load_size': 'ConsignmentCombinedLoadSizeItem',
        'consignment_item_dg_items': 'list[ConsignmentItemDgItem]',
        'consignment_item_references': 'list[ConsignmentItemReference]',
        'consignment_item_contents': 'list[ConsignmentItemContent]',
        'is_dg_item': 'bool',
        'volume': 'float',
        'height': 'float',
        'weight': 'float',
        'length': 'float',
        'width': 'float',
        'total_linear_length': 'float',
        'longest_dimension_all': 'float',
        'middle_dimension_all': 'float',
        'shortest_dimension_all': 'float',
        'longest_dimension_length_width': 'float',
        'shortest_dimension_length_width': 'float',
        'diagonal_length': 'float',
        'originating_item_guid': 'str',
        'flattened_guids': 'list[str]',
        'machship_item_type': 'MachshipItemType'
    }

    attribute_map = {
        'guid': 'guid',
        'carrier_item_type_id': 'carrierItemTypeId',
        'consignment_id': 'consignmentId',
        'carrier_item_type': 'carrierItemType',
        'carrier_item_type_for_sell_price': 'carrierItemTypeForSellPrice',
        'service_types': 'serviceTypes',
        'company_item_carrier_service_type_strings_concatenated': 'companyItemCarrierServiceTypeStringsConcatenated',
        'company_item_carrier_service_type_name_strings_concatenated': 'companyItemCarrierServiceTypeNameStringsConcatenated',
        'company_item_carrier_service_type_abbreviation_strings_concatenated': 'companyItemCarrierServiceTypeAbbreviationStringsConcatenated',
        'company_item_id': 'companyItemId',
        'id': 'id',
        'item_type': 'itemType',
        'name': 'name',
        'sku': 'sku',
        'foot_print_area': 'footPrintArea',
        'cubic_weight': 'cubicWeight',
        'heaviest_weight': 'heaviestWeight',
        'quantity': 'quantity',
        'pallet_spaces': 'palletSpaces',
        'is_pro_rated': 'isProRated',
        'pro_rata_spaces': 'proRataSpaces',
        'pro_rata_weight_adjustment': 'proRataWeightAdjustment',
        'per_item_weight_price': 'perItemWeightPrice',
        'per_item_volume_price': 'perItemVolumePrice',
        'pricing_applied': 'pricingApplied',
        'total_pieces_price': 'totalPiecesPrice',
        'cost_route_price': 'costRoutePrice',
        'sell_total_route_price': 'sellTotalRoutePrice',
        'markup': 'markup',
        'carrier_item_type_name': 'carrierItemTypeName',
        'carrier_item_type_abbreviation': 'carrierItemTypeAbbreviation',
        'sell_carrier_item_type_name': 'sellCarrierItemTypeName',
        'sell_carrier_item_type_abbreviation': 'sellCarrierItemTypeAbbreviation',
        'carrier_reference': 'carrierReference',
        'carrier_consignment_id': 'carrierConsignmentId',
        'consignment_item_consignment_surcharges': 'consignmentItemConsignmentSurcharges',
        'item': 'item',
        'standard_item_id': 'standardItemId',
        'standard_item': 'standardItem',
        'combined_item_id': 'combinedItemId',
        'combined_item': 'combinedItem',
        'combined_load_size_id': 'combinedLoadSizeId',
        'combined_load_size': 'combinedLoadSize',
        'consignment_item_dg_items': 'consignmentItemDgItems',
        'consignment_item_references': 'consignmentItemReferences',
        'consignment_item_contents': 'consignmentItemContents',
        'is_dg_item': 'isDgItem',
        'volume': 'volume',
        'height': 'height',
        'weight': 'weight',
        'length': 'length',
        'width': 'width',
        'total_linear_length': 'totalLinearLength',
        'longest_dimension_all': 'longestDimensionAll',
        'middle_dimension_all': 'middleDimensionAll',
        'shortest_dimension_all': 'shortestDimensionAll',
        'longest_dimension_length_width': 'longestDimensionLengthWidth',
        'shortest_dimension_length_width': 'shortestDimensionLengthWidth',
        'diagonal_length': 'diagonalLength',
        'originating_item_guid': 'originatingItemGuid',
        'flattened_guids': 'flattenedGuids',
        'machship_item_type': 'machshipItemType'
    }

    def __init__(self, guid=None, carrier_item_type_id=None, consignment_id=None, carrier_item_type=None, carrier_item_type_for_sell_price=None, service_types=None, company_item_carrier_service_type_strings_concatenated=None, company_item_carrier_service_type_name_strings_concatenated=None, company_item_carrier_service_type_abbreviation_strings_concatenated=None, company_item_id=None, id=None, item_type=None, name=None, sku=None, foot_print_area=None, cubic_weight=None, heaviest_weight=None, quantity=None, pallet_spaces=None, is_pro_rated=None, pro_rata_spaces=None, pro_rata_weight_adjustment=None, per_item_weight_price=None, per_item_volume_price=None, pricing_applied=None, total_pieces_price=None, cost_route_price=None, sell_total_route_price=None, markup=None, carrier_item_type_name=None, carrier_item_type_abbreviation=None, sell_carrier_item_type_name=None, sell_carrier_item_type_abbreviation=None, carrier_reference=None, carrier_consignment_id=None, consignment_item_consignment_surcharges=None, item=None, standard_item_id=None, standard_item=None, combined_item_id=None, combined_item=None, combined_load_size_id=None, combined_load_size=None, consignment_item_dg_items=None, consignment_item_references=None, consignment_item_contents=None, is_dg_item=None, volume=None, height=None, weight=None, length=None, width=None, total_linear_length=None, longest_dimension_all=None, middle_dimension_all=None, shortest_dimension_all=None, longest_dimension_length_width=None, shortest_dimension_length_width=None, diagonal_length=None, originating_item_guid=None, flattened_guids=None, machship_item_type=None):  # noqa: E501
        """ConsignmentItem - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._carrier_item_type_id = None
        self._consignment_id = None
        self._carrier_item_type = None
        self._carrier_item_type_for_sell_price = None
        self._service_types = None
        self._company_item_carrier_service_type_strings_concatenated = None
        self._company_item_carrier_service_type_name_strings_concatenated = None
        self._company_item_carrier_service_type_abbreviation_strings_concatenated = None
        self._company_item_id = None
        self._id = None
        self._item_type = None
        self._name = None
        self._sku = None
        self._foot_print_area = None
        self._cubic_weight = None
        self._heaviest_weight = None
        self._quantity = None
        self._pallet_spaces = None
        self._is_pro_rated = None
        self._pro_rata_spaces = None
        self._pro_rata_weight_adjustment = None
        self._per_item_weight_price = None
        self._per_item_volume_price = None
        self._pricing_applied = None
        self._total_pieces_price = None
        self._cost_route_price = None
        self._sell_total_route_price = None
        self._markup = None
        self._carrier_item_type_name = None
        self._carrier_item_type_abbreviation = None
        self._sell_carrier_item_type_name = None
        self._sell_carrier_item_type_abbreviation = None
        self._carrier_reference = None
        self._carrier_consignment_id = None
        self._consignment_item_consignment_surcharges = None
        self._item = None
        self._standard_item_id = None
        self._standard_item = None
        self._combined_item_id = None
        self._combined_item = None
        self._combined_load_size_id = None
        self._combined_load_size = None
        self._consignment_item_dg_items = None
        self._consignment_item_references = None
        self._consignment_item_contents = None
        self._is_dg_item = None
        self._volume = None
        self._height = None
        self._weight = None
        self._length = None
        self._width = None
        self._total_linear_length = None
        self._longest_dimension_all = None
        self._middle_dimension_all = None
        self._shortest_dimension_all = None
        self._longest_dimension_length_width = None
        self._shortest_dimension_length_width = None
        self._diagonal_length = None
        self._originating_item_guid = None
        self._flattened_guids = None
        self._machship_item_type = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if carrier_item_type_id is not None:
            self.carrier_item_type_id = carrier_item_type_id
        if consignment_id is not None:
            self.consignment_id = consignment_id
        if carrier_item_type is not None:
            self.carrier_item_type = carrier_item_type
        if carrier_item_type_for_sell_price is not None:
            self.carrier_item_type_for_sell_price = carrier_item_type_for_sell_price
        if service_types is not None:
            self.service_types = service_types
        if company_item_carrier_service_type_strings_concatenated is not None:
            self.company_item_carrier_service_type_strings_concatenated = company_item_carrier_service_type_strings_concatenated
        if company_item_carrier_service_type_name_strings_concatenated is not None:
            self.company_item_carrier_service_type_name_strings_concatenated = company_item_carrier_service_type_name_strings_concatenated
        if company_item_carrier_service_type_abbreviation_strings_concatenated is not None:
            self.company_item_carrier_service_type_abbreviation_strings_concatenated = company_item_carrier_service_type_abbreviation_strings_concatenated
        if company_item_id is not None:
            self.company_item_id = company_item_id
        if id is not None:
            self.id = id
        if item_type is not None:
            self.item_type = item_type
        self.name = name
        if sku is not None:
            self.sku = sku
        if foot_print_area is not None:
            self.foot_print_area = foot_print_area
        if cubic_weight is not None:
            self.cubic_weight = cubic_weight
        if heaviest_weight is not None:
            self.heaviest_weight = heaviest_weight
        if quantity is not None:
            self.quantity = quantity
        if pallet_spaces is not None:
            self.pallet_spaces = pallet_spaces
        if is_pro_rated is not None:
            self.is_pro_rated = is_pro_rated
        if pro_rata_spaces is not None:
            self.pro_rata_spaces = pro_rata_spaces
        if pro_rata_weight_adjustment is not None:
            self.pro_rata_weight_adjustment = pro_rata_weight_adjustment
        if per_item_weight_price is not None:
            self.per_item_weight_price = per_item_weight_price
        if per_item_volume_price is not None:
            self.per_item_volume_price = per_item_volume_price
        if pricing_applied is not None:
            self.pricing_applied = pricing_applied
        if total_pieces_price is not None:
            self.total_pieces_price = total_pieces_price
        if cost_route_price is not None:
            self.cost_route_price = cost_route_price
        if sell_total_route_price is not None:
            self.sell_total_route_price = sell_total_route_price
        if markup is not None:
            self.markup = markup
        if carrier_item_type_name is not None:
            self.carrier_item_type_name = carrier_item_type_name
        if carrier_item_type_abbreviation is not None:
            self.carrier_item_type_abbreviation = carrier_item_type_abbreviation
        if sell_carrier_item_type_name is not None:
            self.sell_carrier_item_type_name = sell_carrier_item_type_name
        if sell_carrier_item_type_abbreviation is not None:
            self.sell_carrier_item_type_abbreviation = sell_carrier_item_type_abbreviation
        if carrier_reference is not None:
            self.carrier_reference = carrier_reference
        if carrier_consignment_id is not None:
            self.carrier_consignment_id = carrier_consignment_id
        if consignment_item_consignment_surcharges is not None:
            self.consignment_item_consignment_surcharges = consignment_item_consignment_surcharges
        if item is not None:
            self.item = item
        if standard_item_id is not None:
            self.standard_item_id = standard_item_id
        if standard_item is not None:
            self.standard_item = standard_item
        if combined_item_id is not None:
            self.combined_item_id = combined_item_id
        if combined_item is not None:
            self.combined_item = combined_item
        if combined_load_size_id is not None:
            self.combined_load_size_id = combined_load_size_id
        if combined_load_size is not None:
            self.combined_load_size = combined_load_size
        if consignment_item_dg_items is not None:
            self.consignment_item_dg_items = consignment_item_dg_items
        if consignment_item_references is not None:
            self.consignment_item_references = consignment_item_references
        if consignment_item_contents is not None:
            self.consignment_item_contents = consignment_item_contents
        if is_dg_item is not None:
            self.is_dg_item = is_dg_item
        if volume is not None:
            self.volume = volume
        if height is not None:
            self.height = height
        if weight is not None:
            self.weight = weight
        if length is not None:
            self.length = length
        if width is not None:
            self.width = width
        if total_linear_length is not None:
            self.total_linear_length = total_linear_length
        if longest_dimension_all is not None:
            self.longest_dimension_all = longest_dimension_all
        if middle_dimension_all is not None:
            self.middle_dimension_all = middle_dimension_all
        if shortest_dimension_all is not None:
            self.shortest_dimension_all = shortest_dimension_all
        if longest_dimension_length_width is not None:
            self.longest_dimension_length_width = longest_dimension_length_width
        if shortest_dimension_length_width is not None:
            self.shortest_dimension_length_width = shortest_dimension_length_width
        if diagonal_length is not None:
            self.diagonal_length = diagonal_length
        if originating_item_guid is not None:
            self.originating_item_guid = originating_item_guid
        if flattened_guids is not None:
            self.flattened_guids = flattened_guids
        if machship_item_type is not None:
            self.machship_item_type = machship_item_type

    @property
    def guid(self):
        """Gets the guid of this ConsignmentItem.  # noqa: E501


        :return: The guid of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ConsignmentItem.


        :param guid: The guid of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def carrier_item_type_id(self):
        """Gets the carrier_item_type_id of this ConsignmentItem.  # noqa: E501


        :return: The carrier_item_type_id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._carrier_item_type_id

    @carrier_item_type_id.setter
    def carrier_item_type_id(self, carrier_item_type_id):
        """Sets the carrier_item_type_id of this ConsignmentItem.


        :param carrier_item_type_id: The carrier_item_type_id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._carrier_item_type_id = carrier_item_type_id

    @property
    def consignment_id(self):
        """Gets the consignment_id of this ConsignmentItem.  # noqa: E501


        :return: The consignment_id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._consignment_id

    @consignment_id.setter
    def consignment_id(self, consignment_id):
        """Sets the consignment_id of this ConsignmentItem.


        :param consignment_id: The consignment_id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._consignment_id = consignment_id

    @property
    def carrier_item_type(self):
        """Gets the carrier_item_type of this ConsignmentItem.  # noqa: E501


        :return: The carrier_item_type of this ConsignmentItem.  # noqa: E501
        :rtype: CarrierItemType
        """
        return self._carrier_item_type

    @carrier_item_type.setter
    def carrier_item_type(self, carrier_item_type):
        """Sets the carrier_item_type of this ConsignmentItem.


        :param carrier_item_type: The carrier_item_type of this ConsignmentItem.  # noqa: E501
        :type: CarrierItemType
        """

        self._carrier_item_type = carrier_item_type

    @property
    def carrier_item_type_for_sell_price(self):
        """Gets the carrier_item_type_for_sell_price of this ConsignmentItem.  # noqa: E501


        :return: The carrier_item_type_for_sell_price of this ConsignmentItem.  # noqa: E501
        :rtype: CarrierItemType
        """
        return self._carrier_item_type_for_sell_price

    @carrier_item_type_for_sell_price.setter
    def carrier_item_type_for_sell_price(self, carrier_item_type_for_sell_price):
        """Sets the carrier_item_type_for_sell_price of this ConsignmentItem.


        :param carrier_item_type_for_sell_price: The carrier_item_type_for_sell_price of this ConsignmentItem.  # noqa: E501
        :type: CarrierItemType
        """

        self._carrier_item_type_for_sell_price = carrier_item_type_for_sell_price

    @property
    def service_types(self):
        """Gets the service_types of this ConsignmentItem.  # noqa: E501


        :return: The service_types of this ConsignmentItem.  # noqa: E501
        :rtype: list[RouteServiceType]
        """
        return self._service_types

    @service_types.setter
    def service_types(self, service_types):
        """Sets the service_types of this ConsignmentItem.


        :param service_types: The service_types of this ConsignmentItem.  # noqa: E501
        :type: list[RouteServiceType]
        """

        self._service_types = service_types

    @property
    def company_item_carrier_service_type_strings_concatenated(self):
        """Gets the company_item_carrier_service_type_strings_concatenated of this ConsignmentItem.  # noqa: E501


        :return: The company_item_carrier_service_type_strings_concatenated of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._company_item_carrier_service_type_strings_concatenated

    @company_item_carrier_service_type_strings_concatenated.setter
    def company_item_carrier_service_type_strings_concatenated(self, company_item_carrier_service_type_strings_concatenated):
        """Sets the company_item_carrier_service_type_strings_concatenated of this ConsignmentItem.


        :param company_item_carrier_service_type_strings_concatenated: The company_item_carrier_service_type_strings_concatenated of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._company_item_carrier_service_type_strings_concatenated = company_item_carrier_service_type_strings_concatenated

    @property
    def company_item_carrier_service_type_name_strings_concatenated(self):
        """Gets the company_item_carrier_service_type_name_strings_concatenated of this ConsignmentItem.  # noqa: E501


        :return: The company_item_carrier_service_type_name_strings_concatenated of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._company_item_carrier_service_type_name_strings_concatenated

    @company_item_carrier_service_type_name_strings_concatenated.setter
    def company_item_carrier_service_type_name_strings_concatenated(self, company_item_carrier_service_type_name_strings_concatenated):
        """Sets the company_item_carrier_service_type_name_strings_concatenated of this ConsignmentItem.


        :param company_item_carrier_service_type_name_strings_concatenated: The company_item_carrier_service_type_name_strings_concatenated of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._company_item_carrier_service_type_name_strings_concatenated = company_item_carrier_service_type_name_strings_concatenated

    @property
    def company_item_carrier_service_type_abbreviation_strings_concatenated(self):
        """Gets the company_item_carrier_service_type_abbreviation_strings_concatenated of this ConsignmentItem.  # noqa: E501


        :return: The company_item_carrier_service_type_abbreviation_strings_concatenated of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._company_item_carrier_service_type_abbreviation_strings_concatenated

    @company_item_carrier_service_type_abbreviation_strings_concatenated.setter
    def company_item_carrier_service_type_abbreviation_strings_concatenated(self, company_item_carrier_service_type_abbreviation_strings_concatenated):
        """Sets the company_item_carrier_service_type_abbreviation_strings_concatenated of this ConsignmentItem.


        :param company_item_carrier_service_type_abbreviation_strings_concatenated: The company_item_carrier_service_type_abbreviation_strings_concatenated of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._company_item_carrier_service_type_abbreviation_strings_concatenated = company_item_carrier_service_type_abbreviation_strings_concatenated

    @property
    def company_item_id(self):
        """Gets the company_item_id of this ConsignmentItem.  # noqa: E501


        :return: The company_item_id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._company_item_id

    @company_item_id.setter
    def company_item_id(self, company_item_id):
        """Sets the company_item_id of this ConsignmentItem.


        :param company_item_id: The company_item_id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._company_item_id = company_item_id

    @property
    def id(self):
        """Gets the id of this ConsignmentItem.  # noqa: E501


        :return: The id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsignmentItem.


        :param id: The id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_type(self):
        """Gets the item_type of this ConsignmentItem.  # noqa: E501


        :return: The item_type of this ConsignmentItem.  # noqa: E501
        :rtype: ItemType
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this ConsignmentItem.


        :param item_type: The item_type of this ConsignmentItem.  # noqa: E501
        :type: ItemType
        """

        self._item_type = item_type

    @property
    def name(self):
        """Gets the name of this ConsignmentItem.  # noqa: E501


        :return: The name of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsignmentItem.


        :param name: The name of this ConsignmentItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this ConsignmentItem.  # noqa: E501


        :return: The sku of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ConsignmentItem.


        :param sku: The sku of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def foot_print_area(self):
        """Gets the foot_print_area of this ConsignmentItem.  # noqa: E501


        :return: The foot_print_area of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._foot_print_area

    @foot_print_area.setter
    def foot_print_area(self, foot_print_area):
        """Sets the foot_print_area of this ConsignmentItem.


        :param foot_print_area: The foot_print_area of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._foot_print_area = foot_print_area

    @property
    def cubic_weight(self):
        """Gets the cubic_weight of this ConsignmentItem.  # noqa: E501


        :return: The cubic_weight of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._cubic_weight

    @cubic_weight.setter
    def cubic_weight(self, cubic_weight):
        """Sets the cubic_weight of this ConsignmentItem.


        :param cubic_weight: The cubic_weight of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._cubic_weight = cubic_weight

    @property
    def heaviest_weight(self):
        """Gets the heaviest_weight of this ConsignmentItem.  # noqa: E501

        calculated weight that should be used for the pricing engine  # noqa: E501

        :return: The heaviest_weight of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._heaviest_weight

    @heaviest_weight.setter
    def heaviest_weight(self, heaviest_weight):
        """Sets the heaviest_weight of this ConsignmentItem.

        calculated weight that should be used for the pricing engine  # noqa: E501

        :param heaviest_weight: The heaviest_weight of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._heaviest_weight = heaviest_weight

    @property
    def quantity(self):
        """Gets the quantity of this ConsignmentItem.  # noqa: E501


        :return: The quantity of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ConsignmentItem.


        :param quantity: The quantity of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def pallet_spaces(self):
        """Gets the pallet_spaces of this ConsignmentItem.  # noqa: E501


        :return: The pallet_spaces of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._pallet_spaces

    @pallet_spaces.setter
    def pallet_spaces(self, pallet_spaces):
        """Sets the pallet_spaces of this ConsignmentItem.


        :param pallet_spaces: The pallet_spaces of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._pallet_spaces = pallet_spaces

    @property
    def is_pro_rated(self):
        """Gets the is_pro_rated of this ConsignmentItem.  # noqa: E501

        an item is proRated if it takes up more than one space (footprint prorata) OR it is heavier than the allowed amount (weight prorata)  # noqa: E501

        :return: The is_pro_rated of this ConsignmentItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_pro_rated

    @is_pro_rated.setter
    def is_pro_rated(self, is_pro_rated):
        """Sets the is_pro_rated of this ConsignmentItem.

        an item is proRated if it takes up more than one space (footprint prorata) OR it is heavier than the allowed amount (weight prorata)  # noqa: E501

        :param is_pro_rated: The is_pro_rated of this ConsignmentItem.  # noqa: E501
        :type: bool
        """

        self._is_pro_rated = is_pro_rated

    @property
    def pro_rata_spaces(self):
        """Gets the pro_rata_spaces of this ConsignmentItem.  # noqa: E501


        :return: The pro_rata_spaces of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._pro_rata_spaces

    @pro_rata_spaces.setter
    def pro_rata_spaces(self, pro_rata_spaces):
        """Sets the pro_rata_spaces of this ConsignmentItem.


        :param pro_rata_spaces: The pro_rata_spaces of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._pro_rata_spaces = pro_rata_spaces

    @property
    def pro_rata_weight_adjustment(self):
        """Gets the pro_rata_weight_adjustment of this ConsignmentItem.  # noqa: E501


        :return: The pro_rata_weight_adjustment of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._pro_rata_weight_adjustment

    @pro_rata_weight_adjustment.setter
    def pro_rata_weight_adjustment(self, pro_rata_weight_adjustment):
        """Sets the pro_rata_weight_adjustment of this ConsignmentItem.


        :param pro_rata_weight_adjustment: The pro_rata_weight_adjustment of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._pro_rata_weight_adjustment = pro_rata_weight_adjustment

    @property
    def per_item_weight_price(self):
        """Gets the per_item_weight_price of this ConsignmentItem.  # noqa: E501


        :return: The per_item_weight_price of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._per_item_weight_price

    @per_item_weight_price.setter
    def per_item_weight_price(self, per_item_weight_price):
        """Sets the per_item_weight_price of this ConsignmentItem.


        :param per_item_weight_price: The per_item_weight_price of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._per_item_weight_price = per_item_weight_price

    @property
    def per_item_volume_price(self):
        """Gets the per_item_volume_price of this ConsignmentItem.  # noqa: E501


        :return: The per_item_volume_price of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._per_item_volume_price

    @per_item_volume_price.setter
    def per_item_volume_price(self, per_item_volume_price):
        """Sets the per_item_volume_price of this ConsignmentItem.


        :param per_item_volume_price: The per_item_volume_price of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._per_item_volume_price = per_item_volume_price

    @property
    def pricing_applied(self):
        """Gets the pricing_applied of this ConsignmentItem.  # noqa: E501

        This is used in the pricing engine to determine whether each item has been priced in the pricing engine  If every item has not been accounted for then the carrier cannot do the job  # noqa: E501

        :return: The pricing_applied of this ConsignmentItem.  # noqa: E501
        :rtype: bool
        """
        return self._pricing_applied

    @pricing_applied.setter
    def pricing_applied(self, pricing_applied):
        """Sets the pricing_applied of this ConsignmentItem.

        This is used in the pricing engine to determine whether each item has been priced in the pricing engine  If every item has not been accounted for then the carrier cannot do the job  # noqa: E501

        :param pricing_applied: The pricing_applied of this ConsignmentItem.  # noqa: E501
        :type: bool
        """

        self._pricing_applied = pricing_applied

    @property
    def total_pieces_price(self):
        """Gets the total_pieces_price of this ConsignmentItem.  # noqa: E501


        :return: The total_pieces_price of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._total_pieces_price

    @total_pieces_price.setter
    def total_pieces_price(self, total_pieces_price):
        """Sets the total_pieces_price of this ConsignmentItem.


        :param total_pieces_price: The total_pieces_price of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._total_pieces_price = total_pieces_price

    @property
    def cost_route_price(self):
        """Gets the cost_route_price of this ConsignmentItem.  # noqa: E501


        :return: The cost_route_price of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._cost_route_price

    @cost_route_price.setter
    def cost_route_price(self, cost_route_price):
        """Sets the cost_route_price of this ConsignmentItem.


        :param cost_route_price: The cost_route_price of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._cost_route_price = cost_route_price

    @property
    def sell_total_route_price(self):
        """Gets the sell_total_route_price of this ConsignmentItem.  # noqa: E501


        :return: The sell_total_route_price of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._sell_total_route_price

    @sell_total_route_price.setter
    def sell_total_route_price(self, sell_total_route_price):
        """Sets the sell_total_route_price of this ConsignmentItem.


        :param sell_total_route_price: The sell_total_route_price of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._sell_total_route_price = sell_total_route_price

    @property
    def markup(self):
        """Gets the markup of this ConsignmentItem.  # noqa: E501


        :return: The markup of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this ConsignmentItem.


        :param markup: The markup of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._markup = markup

    @property
    def carrier_item_type_name(self):
        """Gets the carrier_item_type_name of this ConsignmentItem.  # noqa: E501

        Query parser cant handle nulls in related properties. ie. item.carrieritemtype.name  This getter handles the null value so that the parser doesn't have to  # noqa: E501

        :return: The carrier_item_type_name of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._carrier_item_type_name

    @carrier_item_type_name.setter
    def carrier_item_type_name(self, carrier_item_type_name):
        """Sets the carrier_item_type_name of this ConsignmentItem.

        Query parser cant handle nulls in related properties. ie. item.carrieritemtype.name  This getter handles the null value so that the parser doesn't have to  # noqa: E501

        :param carrier_item_type_name: The carrier_item_type_name of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._carrier_item_type_name = carrier_item_type_name

    @property
    def carrier_item_type_abbreviation(self):
        """Gets the carrier_item_type_abbreviation of this ConsignmentItem.  # noqa: E501

        Query parser cant handle nulls in related properties. ie. item.carrieritemtype.name  This getter handles the null value so that the parser doesn't have to  # noqa: E501

        :return: The carrier_item_type_abbreviation of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._carrier_item_type_abbreviation

    @carrier_item_type_abbreviation.setter
    def carrier_item_type_abbreviation(self, carrier_item_type_abbreviation):
        """Sets the carrier_item_type_abbreviation of this ConsignmentItem.

        Query parser cant handle nulls in related properties. ie. item.carrieritemtype.name  This getter handles the null value so that the parser doesn't have to  # noqa: E501

        :param carrier_item_type_abbreviation: The carrier_item_type_abbreviation of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._carrier_item_type_abbreviation = carrier_item_type_abbreviation

    @property
    def sell_carrier_item_type_name(self):
        """Gets the sell_carrier_item_type_name of this ConsignmentItem.  # noqa: E501


        :return: The sell_carrier_item_type_name of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._sell_carrier_item_type_name

    @sell_carrier_item_type_name.setter
    def sell_carrier_item_type_name(self, sell_carrier_item_type_name):
        """Sets the sell_carrier_item_type_name of this ConsignmentItem.


        :param sell_carrier_item_type_name: The sell_carrier_item_type_name of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._sell_carrier_item_type_name = sell_carrier_item_type_name

    @property
    def sell_carrier_item_type_abbreviation(self):
        """Gets the sell_carrier_item_type_abbreviation of this ConsignmentItem.  # noqa: E501


        :return: The sell_carrier_item_type_abbreviation of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._sell_carrier_item_type_abbreviation

    @sell_carrier_item_type_abbreviation.setter
    def sell_carrier_item_type_abbreviation(self, sell_carrier_item_type_abbreviation):
        """Sets the sell_carrier_item_type_abbreviation of this ConsignmentItem.


        :param sell_carrier_item_type_abbreviation: The sell_carrier_item_type_abbreviation of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._sell_carrier_item_type_abbreviation = sell_carrier_item_type_abbreviation

    @property
    def carrier_reference(self):
        """Gets the carrier_reference of this ConsignmentItem.  # noqa: E501


        :return: The carrier_reference of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._carrier_reference

    @carrier_reference.setter
    def carrier_reference(self, carrier_reference):
        """Sets the carrier_reference of this ConsignmentItem.


        :param carrier_reference: The carrier_reference of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._carrier_reference = carrier_reference

    @property
    def carrier_consignment_id(self):
        """Gets the carrier_consignment_id of this ConsignmentItem.  # noqa: E501


        :return: The carrier_consignment_id of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._carrier_consignment_id

    @carrier_consignment_id.setter
    def carrier_consignment_id(self, carrier_consignment_id):
        """Sets the carrier_consignment_id of this ConsignmentItem.


        :param carrier_consignment_id: The carrier_consignment_id of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._carrier_consignment_id = carrier_consignment_id

    @property
    def consignment_item_consignment_surcharges(self):
        """Gets the consignment_item_consignment_surcharges of this ConsignmentItem.  # noqa: E501


        :return: The consignment_item_consignment_surcharges of this ConsignmentItem.  # noqa: E501
        :rtype: list[ConsignmentItemConsignmentSurcharge]
        """
        return self._consignment_item_consignment_surcharges

    @consignment_item_consignment_surcharges.setter
    def consignment_item_consignment_surcharges(self, consignment_item_consignment_surcharges):
        """Sets the consignment_item_consignment_surcharges of this ConsignmentItem.


        :param consignment_item_consignment_surcharges: The consignment_item_consignment_surcharges of this ConsignmentItem.  # noqa: E501
        :type: list[ConsignmentItemConsignmentSurcharge]
        """

        self._consignment_item_consignment_surcharges = consignment_item_consignment_surcharges

    @property
    def item(self):
        """Gets the item of this ConsignmentItem.  # noqa: E501


        :return: The item of this ConsignmentItem.  # noqa: E501
        :rtype: IConsignmentItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ConsignmentItem.


        :param item: The item of this ConsignmentItem.  # noqa: E501
        :type: IConsignmentItem
        """

        self._item = item

    @property
    def standard_item_id(self):
        """Gets the standard_item_id of this ConsignmentItem.  # noqa: E501


        :return: The standard_item_id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._standard_item_id

    @standard_item_id.setter
    def standard_item_id(self, standard_item_id):
        """Sets the standard_item_id of this ConsignmentItem.


        :param standard_item_id: The standard_item_id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._standard_item_id = standard_item_id

    @property
    def standard_item(self):
        """Gets the standard_item of this ConsignmentItem.  # noqa: E501


        :return: The standard_item of this ConsignmentItem.  # noqa: E501
        :rtype: ConsignmentStandardItem
        """
        return self._standard_item

    @standard_item.setter
    def standard_item(self, standard_item):
        """Sets the standard_item of this ConsignmentItem.


        :param standard_item: The standard_item of this ConsignmentItem.  # noqa: E501
        :type: ConsignmentStandardItem
        """

        self._standard_item = standard_item

    @property
    def combined_item_id(self):
        """Gets the combined_item_id of this ConsignmentItem.  # noqa: E501


        :return: The combined_item_id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._combined_item_id

    @combined_item_id.setter
    def combined_item_id(self, combined_item_id):
        """Sets the combined_item_id of this ConsignmentItem.


        :param combined_item_id: The combined_item_id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._combined_item_id = combined_item_id

    @property
    def combined_item(self):
        """Gets the combined_item of this ConsignmentItem.  # noqa: E501


        :return: The combined_item of this ConsignmentItem.  # noqa: E501
        :rtype: ConsignmentCombinedItem
        """
        return self._combined_item

    @combined_item.setter
    def combined_item(self, combined_item):
        """Sets the combined_item of this ConsignmentItem.


        :param combined_item: The combined_item of this ConsignmentItem.  # noqa: E501
        :type: ConsignmentCombinedItem
        """

        self._combined_item = combined_item

    @property
    def combined_load_size_id(self):
        """Gets the combined_load_size_id of this ConsignmentItem.  # noqa: E501


        :return: The combined_load_size_id of this ConsignmentItem.  # noqa: E501
        :rtype: int
        """
        return self._combined_load_size_id

    @combined_load_size_id.setter
    def combined_load_size_id(self, combined_load_size_id):
        """Sets the combined_load_size_id of this ConsignmentItem.


        :param combined_load_size_id: The combined_load_size_id of this ConsignmentItem.  # noqa: E501
        :type: int
        """

        self._combined_load_size_id = combined_load_size_id

    @property
    def combined_load_size(self):
        """Gets the combined_load_size of this ConsignmentItem.  # noqa: E501


        :return: The combined_load_size of this ConsignmentItem.  # noqa: E501
        :rtype: ConsignmentCombinedLoadSizeItem
        """
        return self._combined_load_size

    @combined_load_size.setter
    def combined_load_size(self, combined_load_size):
        """Sets the combined_load_size of this ConsignmentItem.


        :param combined_load_size: The combined_load_size of this ConsignmentItem.  # noqa: E501
        :type: ConsignmentCombinedLoadSizeItem
        """

        self._combined_load_size = combined_load_size

    @property
    def consignment_item_dg_items(self):
        """Gets the consignment_item_dg_items of this ConsignmentItem.  # noqa: E501


        :return: The consignment_item_dg_items of this ConsignmentItem.  # noqa: E501
        :rtype: list[ConsignmentItemDgItem]
        """
        return self._consignment_item_dg_items

    @consignment_item_dg_items.setter
    def consignment_item_dg_items(self, consignment_item_dg_items):
        """Sets the consignment_item_dg_items of this ConsignmentItem.


        :param consignment_item_dg_items: The consignment_item_dg_items of this ConsignmentItem.  # noqa: E501
        :type: list[ConsignmentItemDgItem]
        """

        self._consignment_item_dg_items = consignment_item_dg_items

    @property
    def consignment_item_references(self):
        """Gets the consignment_item_references of this ConsignmentItem.  # noqa: E501


        :return: The consignment_item_references of this ConsignmentItem.  # noqa: E501
        :rtype: list[ConsignmentItemReference]
        """
        return self._consignment_item_references

    @consignment_item_references.setter
    def consignment_item_references(self, consignment_item_references):
        """Sets the consignment_item_references of this ConsignmentItem.


        :param consignment_item_references: The consignment_item_references of this ConsignmentItem.  # noqa: E501
        :type: list[ConsignmentItemReference]
        """

        self._consignment_item_references = consignment_item_references

    @property
    def consignment_item_contents(self):
        """Gets the consignment_item_contents of this ConsignmentItem.  # noqa: E501


        :return: The consignment_item_contents of this ConsignmentItem.  # noqa: E501
        :rtype: list[ConsignmentItemContent]
        """
        return self._consignment_item_contents

    @consignment_item_contents.setter
    def consignment_item_contents(self, consignment_item_contents):
        """Sets the consignment_item_contents of this ConsignmentItem.


        :param consignment_item_contents: The consignment_item_contents of this ConsignmentItem.  # noqa: E501
        :type: list[ConsignmentItemContent]
        """

        self._consignment_item_contents = consignment_item_contents

    @property
    def is_dg_item(self):
        """Gets the is_dg_item of this ConsignmentItem.  # noqa: E501


        :return: The is_dg_item of this ConsignmentItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_dg_item

    @is_dg_item.setter
    def is_dg_item(self, is_dg_item):
        """Sets the is_dg_item of this ConsignmentItem.


        :param is_dg_item: The is_dg_item of this ConsignmentItem.  # noqa: E501
        :type: bool
        """

        self._is_dg_item = is_dg_item

    @property
    def volume(self):
        """Gets the volume of this ConsignmentItem.  # noqa: E501


        :return: The volume of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ConsignmentItem.


        :param volume: The volume of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def height(self):
        """Gets the height of this ConsignmentItem.  # noqa: E501


        :return: The height of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ConsignmentItem.


        :param height: The height of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this ConsignmentItem.  # noqa: E501


        :return: The weight of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ConsignmentItem.


        :param weight: The weight of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def length(self):
        """Gets the length of this ConsignmentItem.  # noqa: E501


        :return: The length of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ConsignmentItem.


        :param length: The length of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def width(self):
        """Gets the width of this ConsignmentItem.  # noqa: E501


        :return: The width of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ConsignmentItem.


        :param width: The width of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def total_linear_length(self):
        """Gets the total_linear_length of this ConsignmentItem.  # noqa: E501


        :return: The total_linear_length of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._total_linear_length

    @total_linear_length.setter
    def total_linear_length(self, total_linear_length):
        """Sets the total_linear_length of this ConsignmentItem.


        :param total_linear_length: The total_linear_length of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._total_linear_length = total_linear_length

    @property
    def longest_dimension_all(self):
        """Gets the longest_dimension_all of this ConsignmentItem.  # noqa: E501


        :return: The longest_dimension_all of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._longest_dimension_all

    @longest_dimension_all.setter
    def longest_dimension_all(self, longest_dimension_all):
        """Sets the longest_dimension_all of this ConsignmentItem.


        :param longest_dimension_all: The longest_dimension_all of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._longest_dimension_all = longest_dimension_all

    @property
    def middle_dimension_all(self):
        """Gets the middle_dimension_all of this ConsignmentItem.  # noqa: E501


        :return: The middle_dimension_all of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._middle_dimension_all

    @middle_dimension_all.setter
    def middle_dimension_all(self, middle_dimension_all):
        """Sets the middle_dimension_all of this ConsignmentItem.


        :param middle_dimension_all: The middle_dimension_all of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._middle_dimension_all = middle_dimension_all

    @property
    def shortest_dimension_all(self):
        """Gets the shortest_dimension_all of this ConsignmentItem.  # noqa: E501


        :return: The shortest_dimension_all of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._shortest_dimension_all

    @shortest_dimension_all.setter
    def shortest_dimension_all(self, shortest_dimension_all):
        """Sets the shortest_dimension_all of this ConsignmentItem.


        :param shortest_dimension_all: The shortest_dimension_all of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._shortest_dimension_all = shortest_dimension_all

    @property
    def longest_dimension_length_width(self):
        """Gets the longest_dimension_length_width of this ConsignmentItem.  # noqa: E501


        :return: The longest_dimension_length_width of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._longest_dimension_length_width

    @longest_dimension_length_width.setter
    def longest_dimension_length_width(self, longest_dimension_length_width):
        """Sets the longest_dimension_length_width of this ConsignmentItem.


        :param longest_dimension_length_width: The longest_dimension_length_width of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._longest_dimension_length_width = longest_dimension_length_width

    @property
    def shortest_dimension_length_width(self):
        """Gets the shortest_dimension_length_width of this ConsignmentItem.  # noqa: E501


        :return: The shortest_dimension_length_width of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._shortest_dimension_length_width

    @shortest_dimension_length_width.setter
    def shortest_dimension_length_width(self, shortest_dimension_length_width):
        """Sets the shortest_dimension_length_width of this ConsignmentItem.


        :param shortest_dimension_length_width: The shortest_dimension_length_width of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._shortest_dimension_length_width = shortest_dimension_length_width

    @property
    def diagonal_length(self):
        """Gets the diagonal_length of this ConsignmentItem.  # noqa: E501


        :return: The diagonal_length of this ConsignmentItem.  # noqa: E501
        :rtype: float
        """
        return self._diagonal_length

    @diagonal_length.setter
    def diagonal_length(self, diagonal_length):
        """Sets the diagonal_length of this ConsignmentItem.


        :param diagonal_length: The diagonal_length of this ConsignmentItem.  # noqa: E501
        :type: float
        """

        self._diagonal_length = diagonal_length

    @property
    def originating_item_guid(self):
        """Gets the originating_item_guid of this ConsignmentItem.  # noqa: E501


        :return: The originating_item_guid of this ConsignmentItem.  # noqa: E501
        :rtype: str
        """
        return self._originating_item_guid

    @originating_item_guid.setter
    def originating_item_guid(self, originating_item_guid):
        """Sets the originating_item_guid of this ConsignmentItem.


        :param originating_item_guid: The originating_item_guid of this ConsignmentItem.  # noqa: E501
        :type: str
        """

        self._originating_item_guid = originating_item_guid

    @property
    def flattened_guids(self):
        """Gets the flattened_guids of this ConsignmentItem.  # noqa: E501


        :return: The flattened_guids of this ConsignmentItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._flattened_guids

    @flattened_guids.setter
    def flattened_guids(self, flattened_guids):
        """Sets the flattened_guids of this ConsignmentItem.


        :param flattened_guids: The flattened_guids of this ConsignmentItem.  # noqa: E501
        :type: list[str]
        """

        self._flattened_guids = flattened_guids

    @property
    def machship_item_type(self):
        """Gets the machship_item_type of this ConsignmentItem.  # noqa: E501


        :return: The machship_item_type of this ConsignmentItem.  # noqa: E501
        :rtype: MachshipItemType
        """
        return self._machship_item_type

    @machship_item_type.setter
    def machship_item_type(self, machship_item_type):
        """Sets the machship_item_type of this ConsignmentItem.


        :param machship_item_type: The machship_item_type of this ConsignmentItem.  # noqa: E501
        :type: MachshipItemType
        """

        self._machship_item_type = machship_item_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
