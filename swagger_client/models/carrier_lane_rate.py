# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierLaneRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_service_id': 'int',
        'carrier_service': 'CarrierServiceModel',
        'ratecard_version_id': 'int',
        'ratecard_version': 'RatecardVersion',
        'from_zone_id': 'int',
        'from_zone': 'CarrierZone',
        'to_zone_id': 'int',
        'to_zone': 'CarrierZone',
        'minimum_charge': 'float',
        'basic_charge': 'float',
        'cubic_conversion_rate': 'float',
        'reciprocal': 'bool',
        'carrier_lane_rate_breaks': 'list[CarrierLaneRateBreak]',
        'consignments': 'list[Consignment]',
        'is_deleted': 'bool',
        'date_deleted': 'datetime',
        'insertion_guid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'carrier_service_id': 'carrierServiceId',
        'carrier_service': 'carrierService',
        'ratecard_version_id': 'ratecardVersionId',
        'ratecard_version': 'ratecardVersion',
        'from_zone_id': 'fromZoneId',
        'from_zone': 'fromZone',
        'to_zone_id': 'toZoneId',
        'to_zone': 'toZone',
        'minimum_charge': 'minimumCharge',
        'basic_charge': 'basicCharge',
        'cubic_conversion_rate': 'cubicConversionRate',
        'reciprocal': 'reciprocal',
        'carrier_lane_rate_breaks': 'carrierLaneRateBreaks',
        'consignments': 'consignments',
        'is_deleted': 'isDeleted',
        'date_deleted': 'dateDeleted',
        'insertion_guid': 'insertionGuid'
    }

    def __init__(self, id=None, carrier_service_id=None, carrier_service=None, ratecard_version_id=None, ratecard_version=None, from_zone_id=None, from_zone=None, to_zone_id=None, to_zone=None, minimum_charge=None, basic_charge=None, cubic_conversion_rate=None, reciprocal=None, carrier_lane_rate_breaks=None, consignments=None, is_deleted=None, date_deleted=None, insertion_guid=None):  # noqa: E501
        """CarrierLaneRate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_service_id = None
        self._carrier_service = None
        self._ratecard_version_id = None
        self._ratecard_version = None
        self._from_zone_id = None
        self._from_zone = None
        self._to_zone_id = None
        self._to_zone = None
        self._minimum_charge = None
        self._basic_charge = None
        self._cubic_conversion_rate = None
        self._reciprocal = None
        self._carrier_lane_rate_breaks = None
        self._consignments = None
        self._is_deleted = None
        self._date_deleted = None
        self._insertion_guid = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_service_id is not None:
            self.carrier_service_id = carrier_service_id
        if carrier_service is not None:
            self.carrier_service = carrier_service
        if ratecard_version_id is not None:
            self.ratecard_version_id = ratecard_version_id
        if ratecard_version is not None:
            self.ratecard_version = ratecard_version
        if from_zone_id is not None:
            self.from_zone_id = from_zone_id
        if from_zone is not None:
            self.from_zone = from_zone
        if to_zone_id is not None:
            self.to_zone_id = to_zone_id
        if to_zone is not None:
            self.to_zone = to_zone
        if minimum_charge is not None:
            self.minimum_charge = minimum_charge
        if basic_charge is not None:
            self.basic_charge = basic_charge
        if cubic_conversion_rate is not None:
            self.cubic_conversion_rate = cubic_conversion_rate
        if reciprocal is not None:
            self.reciprocal = reciprocal
        if carrier_lane_rate_breaks is not None:
            self.carrier_lane_rate_breaks = carrier_lane_rate_breaks
        if consignments is not None:
            self.consignments = consignments
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if date_deleted is not None:
            self.date_deleted = date_deleted
        if insertion_guid is not None:
            self.insertion_guid = insertion_guid

    @property
    def id(self):
        """Gets the id of this CarrierLaneRate.  # noqa: E501


        :return: The id of this CarrierLaneRate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierLaneRate.


        :param id: The id of this CarrierLaneRate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_service_id(self):
        """Gets the carrier_service_id of this CarrierLaneRate.  # noqa: E501


        :return: The carrier_service_id of this CarrierLaneRate.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_id

    @carrier_service_id.setter
    def carrier_service_id(self, carrier_service_id):
        """Sets the carrier_service_id of this CarrierLaneRate.


        :param carrier_service_id: The carrier_service_id of this CarrierLaneRate.  # noqa: E501
        :type: int
        """

        self._carrier_service_id = carrier_service_id

    @property
    def carrier_service(self):
        """Gets the carrier_service of this CarrierLaneRate.  # noqa: E501


        :return: The carrier_service of this CarrierLaneRate.  # noqa: E501
        :rtype: CarrierServiceModel
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this CarrierLaneRate.


        :param carrier_service: The carrier_service of this CarrierLaneRate.  # noqa: E501
        :type: CarrierServiceModel
        """

        self._carrier_service = carrier_service

    @property
    def ratecard_version_id(self):
        """Gets the ratecard_version_id of this CarrierLaneRate.  # noqa: E501


        :return: The ratecard_version_id of this CarrierLaneRate.  # noqa: E501
        :rtype: int
        """
        return self._ratecard_version_id

    @ratecard_version_id.setter
    def ratecard_version_id(self, ratecard_version_id):
        """Sets the ratecard_version_id of this CarrierLaneRate.


        :param ratecard_version_id: The ratecard_version_id of this CarrierLaneRate.  # noqa: E501
        :type: int
        """

        self._ratecard_version_id = ratecard_version_id

    @property
    def ratecard_version(self):
        """Gets the ratecard_version of this CarrierLaneRate.  # noqa: E501


        :return: The ratecard_version of this CarrierLaneRate.  # noqa: E501
        :rtype: RatecardVersion
        """
        return self._ratecard_version

    @ratecard_version.setter
    def ratecard_version(self, ratecard_version):
        """Sets the ratecard_version of this CarrierLaneRate.


        :param ratecard_version: The ratecard_version of this CarrierLaneRate.  # noqa: E501
        :type: RatecardVersion
        """

        self._ratecard_version = ratecard_version

    @property
    def from_zone_id(self):
        """Gets the from_zone_id of this CarrierLaneRate.  # noqa: E501


        :return: The from_zone_id of this CarrierLaneRate.  # noqa: E501
        :rtype: int
        """
        return self._from_zone_id

    @from_zone_id.setter
    def from_zone_id(self, from_zone_id):
        """Sets the from_zone_id of this CarrierLaneRate.


        :param from_zone_id: The from_zone_id of this CarrierLaneRate.  # noqa: E501
        :type: int
        """

        self._from_zone_id = from_zone_id

    @property
    def from_zone(self):
        """Gets the from_zone of this CarrierLaneRate.  # noqa: E501


        :return: The from_zone of this CarrierLaneRate.  # noqa: E501
        :rtype: CarrierZone
        """
        return self._from_zone

    @from_zone.setter
    def from_zone(self, from_zone):
        """Sets the from_zone of this CarrierLaneRate.


        :param from_zone: The from_zone of this CarrierLaneRate.  # noqa: E501
        :type: CarrierZone
        """

        self._from_zone = from_zone

    @property
    def to_zone_id(self):
        """Gets the to_zone_id of this CarrierLaneRate.  # noqa: E501


        :return: The to_zone_id of this CarrierLaneRate.  # noqa: E501
        :rtype: int
        """
        return self._to_zone_id

    @to_zone_id.setter
    def to_zone_id(self, to_zone_id):
        """Sets the to_zone_id of this CarrierLaneRate.


        :param to_zone_id: The to_zone_id of this CarrierLaneRate.  # noqa: E501
        :type: int
        """

        self._to_zone_id = to_zone_id

    @property
    def to_zone(self):
        """Gets the to_zone of this CarrierLaneRate.  # noqa: E501


        :return: The to_zone of this CarrierLaneRate.  # noqa: E501
        :rtype: CarrierZone
        """
        return self._to_zone

    @to_zone.setter
    def to_zone(self, to_zone):
        """Sets the to_zone of this CarrierLaneRate.


        :param to_zone: The to_zone of this CarrierLaneRate.  # noqa: E501
        :type: CarrierZone
        """

        self._to_zone = to_zone

    @property
    def minimum_charge(self):
        """Gets the minimum_charge of this CarrierLaneRate.  # noqa: E501


        :return: The minimum_charge of this CarrierLaneRate.  # noqa: E501
        :rtype: float
        """
        return self._minimum_charge

    @minimum_charge.setter
    def minimum_charge(self, minimum_charge):
        """Sets the minimum_charge of this CarrierLaneRate.


        :param minimum_charge: The minimum_charge of this CarrierLaneRate.  # noqa: E501
        :type: float
        """

        self._minimum_charge = minimum_charge

    @property
    def basic_charge(self):
        """Gets the basic_charge of this CarrierLaneRate.  # noqa: E501


        :return: The basic_charge of this CarrierLaneRate.  # noqa: E501
        :rtype: float
        """
        return self._basic_charge

    @basic_charge.setter
    def basic_charge(self, basic_charge):
        """Sets the basic_charge of this CarrierLaneRate.


        :param basic_charge: The basic_charge of this CarrierLaneRate.  # noqa: E501
        :type: float
        """

        self._basic_charge = basic_charge

    @property
    def cubic_conversion_rate(self):
        """Gets the cubic_conversion_rate of this CarrierLaneRate.  # noqa: E501


        :return: The cubic_conversion_rate of this CarrierLaneRate.  # noqa: E501
        :rtype: float
        """
        return self._cubic_conversion_rate

    @cubic_conversion_rate.setter
    def cubic_conversion_rate(self, cubic_conversion_rate):
        """Sets the cubic_conversion_rate of this CarrierLaneRate.


        :param cubic_conversion_rate: The cubic_conversion_rate of this CarrierLaneRate.  # noqa: E501
        :type: float
        """

        self._cubic_conversion_rate = cubic_conversion_rate

    @property
    def reciprocal(self):
        """Gets the reciprocal of this CarrierLaneRate.  # noqa: E501


        :return: The reciprocal of this CarrierLaneRate.  # noqa: E501
        :rtype: bool
        """
        return self._reciprocal

    @reciprocal.setter
    def reciprocal(self, reciprocal):
        """Sets the reciprocal of this CarrierLaneRate.


        :param reciprocal: The reciprocal of this CarrierLaneRate.  # noqa: E501
        :type: bool
        """

        self._reciprocal = reciprocal

    @property
    def carrier_lane_rate_breaks(self):
        """Gets the carrier_lane_rate_breaks of this CarrierLaneRate.  # noqa: E501


        :return: The carrier_lane_rate_breaks of this CarrierLaneRate.  # noqa: E501
        :rtype: list[CarrierLaneRateBreak]
        """
        return self._carrier_lane_rate_breaks

    @carrier_lane_rate_breaks.setter
    def carrier_lane_rate_breaks(self, carrier_lane_rate_breaks):
        """Sets the carrier_lane_rate_breaks of this CarrierLaneRate.


        :param carrier_lane_rate_breaks: The carrier_lane_rate_breaks of this CarrierLaneRate.  # noqa: E501
        :type: list[CarrierLaneRateBreak]
        """

        self._carrier_lane_rate_breaks = carrier_lane_rate_breaks

    @property
    def consignments(self):
        """Gets the consignments of this CarrierLaneRate.  # noqa: E501


        :return: The consignments of this CarrierLaneRate.  # noqa: E501
        :rtype: list[Consignment]
        """
        return self._consignments

    @consignments.setter
    def consignments(self, consignments):
        """Sets the consignments of this CarrierLaneRate.


        :param consignments: The consignments of this CarrierLaneRate.  # noqa: E501
        :type: list[Consignment]
        """

        self._consignments = consignments

    @property
    def is_deleted(self):
        """Gets the is_deleted of this CarrierLaneRate.  # noqa: E501


        :return: The is_deleted of this CarrierLaneRate.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this CarrierLaneRate.


        :param is_deleted: The is_deleted of this CarrierLaneRate.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def date_deleted(self):
        """Gets the date_deleted of this CarrierLaneRate.  # noqa: E501


        :return: The date_deleted of this CarrierLaneRate.  # noqa: E501
        :rtype: datetime
        """
        return self._date_deleted

    @date_deleted.setter
    def date_deleted(self, date_deleted):
        """Sets the date_deleted of this CarrierLaneRate.


        :param date_deleted: The date_deleted of this CarrierLaneRate.  # noqa: E501
        :type: datetime
        """

        self._date_deleted = date_deleted

    @property
    def insertion_guid(self):
        """Gets the insertion_guid of this CarrierLaneRate.  # noqa: E501


        :return: The insertion_guid of this CarrierLaneRate.  # noqa: E501
        :rtype: str
        """
        return self._insertion_guid

    @insertion_guid.setter
    def insertion_guid(self, insertion_guid):
        """Sets the insertion_guid of this CarrierLaneRate.


        :param insertion_guid: The insertion_guid of this CarrierLaneRate.  # noqa: E501
        :type: str
        """

        self._insertion_guid = insertion_guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierLaneRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierLaneRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
