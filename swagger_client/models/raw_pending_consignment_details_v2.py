# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawPendingConsignmentDetailsV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_location_name': 'str',
        'from_location_abbreviation': 'str',
        'to_location_name': 'str',
        'to_location_abbreviation': 'str',
        'carrier': 'str',
        'carrier_service': 'str',
        'carrier_account': 'str',
        'company_carrier_account': 'str',
        'to_postcode': 'str',
        'to_suburb': 'str',
        'from_postcode': 'str',
        'from_suburb': 'str',
        'from_country_code': 'str',
        'to_country_code': 'str'
    }

    attribute_map = {
        'from_location_name': 'fromLocationName',
        'from_location_abbreviation': 'fromLocationAbbreviation',
        'to_location_name': 'toLocationName',
        'to_location_abbreviation': 'toLocationAbbreviation',
        'carrier': 'carrier',
        'carrier_service': 'carrierService',
        'carrier_account': 'carrierAccount',
        'company_carrier_account': 'companyCarrierAccount',
        'to_postcode': 'toPostcode',
        'to_suburb': 'toSuburb',
        'from_postcode': 'fromPostcode',
        'from_suburb': 'fromSuburb',
        'from_country_code': 'fromCountryCode',
        'to_country_code': 'toCountryCode'
    }

    def __init__(self, from_location_name=None, from_location_abbreviation=None, to_location_name=None, to_location_abbreviation=None, carrier=None, carrier_service=None, carrier_account=None, company_carrier_account=None, to_postcode=None, to_suburb=None, from_postcode=None, from_suburb=None, from_country_code=None, to_country_code=None):  # noqa: E501
        """RawPendingConsignmentDetailsV2 - a model defined in Swagger"""  # noqa: E501
        self._from_location_name = None
        self._from_location_abbreviation = None
        self._to_location_name = None
        self._to_location_abbreviation = None
        self._carrier = None
        self._carrier_service = None
        self._carrier_account = None
        self._company_carrier_account = None
        self._to_postcode = None
        self._to_suburb = None
        self._from_postcode = None
        self._from_suburb = None
        self._from_country_code = None
        self._to_country_code = None
        self.discriminator = None
        if from_location_name is not None:
            self.from_location_name = from_location_name
        if from_location_abbreviation is not None:
            self.from_location_abbreviation = from_location_abbreviation
        if to_location_name is not None:
            self.to_location_name = to_location_name
        if to_location_abbreviation is not None:
            self.to_location_abbreviation = to_location_abbreviation
        if carrier is not None:
            self.carrier = carrier
        if carrier_service is not None:
            self.carrier_service = carrier_service
        if carrier_account is not None:
            self.carrier_account = carrier_account
        if company_carrier_account is not None:
            self.company_carrier_account = company_carrier_account
        if to_postcode is not None:
            self.to_postcode = to_postcode
        if to_suburb is not None:
            self.to_suburb = to_suburb
        if from_postcode is not None:
            self.from_postcode = from_postcode
        if from_suburb is not None:
            self.from_suburb = from_suburb
        if from_country_code is not None:
            self.from_country_code = from_country_code
        if to_country_code is not None:
            self.to_country_code = to_country_code

    @property
    def from_location_name(self):
        """Gets the from_location_name of this RawPendingConsignmentDetailsV2.  # noqa: E501

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :return: The from_location_name of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._from_location_name

    @from_location_name.setter
    def from_location_name(self, from_location_name):
        """Sets the from_location_name of this RawPendingConsignmentDetailsV2.

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :param from_location_name: The from_location_name of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._from_location_name = from_location_name

    @property
    def from_location_abbreviation(self):
        """Gets the from_location_abbreviation of this RawPendingConsignmentDetailsV2.  # noqa: E501

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :return: The from_location_abbreviation of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._from_location_abbreviation

    @from_location_abbreviation.setter
    def from_location_abbreviation(self, from_location_abbreviation):
        """Sets the from_location_abbreviation of this RawPendingConsignmentDetailsV2.

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :param from_location_abbreviation: The from_location_abbreviation of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._from_location_abbreviation = from_location_abbreviation

    @property
    def to_location_name(self):
        """Gets the to_location_name of this RawPendingConsignmentDetailsV2.  # noqa: E501

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :return: The to_location_name of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._to_location_name

    @to_location_name.setter
    def to_location_name(self, to_location_name):
        """Sets the to_location_name of this RawPendingConsignmentDetailsV2.

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :param to_location_name: The to_location_name of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._to_location_name = to_location_name

    @property
    def to_location_abbreviation(self):
        """Gets the to_location_abbreviation of this RawPendingConsignmentDetailsV2.  # noqa: E501

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :return: The to_location_abbreviation of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._to_location_abbreviation

    @to_location_abbreviation.setter
    def to_location_abbreviation(self, to_location_abbreviation):
        """Sets the to_location_abbreviation of this RawPendingConsignmentDetailsV2.

        If the abbreviation was set but no company location was found, this will be set  # noqa: E501

        :param to_location_abbreviation: The to_location_abbreviation of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._to_location_abbreviation = to_location_abbreviation

    @property
    def carrier(self):
        """Gets the carrier of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The carrier of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this RawPendingConsignmentDetailsV2.


        :param carrier: The carrier of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def carrier_service(self):
        """Gets the carrier_service of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The carrier_service of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this RawPendingConsignmentDetailsV2.


        :param carrier_service: The carrier_service of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._carrier_service = carrier_service

    @property
    def carrier_account(self):
        """Gets the carrier_account of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The carrier_account of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_account

    @carrier_account.setter
    def carrier_account(self, carrier_account):
        """Sets the carrier_account of this RawPendingConsignmentDetailsV2.


        :param carrier_account: The carrier_account of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._carrier_account = carrier_account

    @property
    def company_carrier_account(self):
        """Gets the company_carrier_account of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The company_carrier_account of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._company_carrier_account

    @company_carrier_account.setter
    def company_carrier_account(self, company_carrier_account):
        """Sets the company_carrier_account of this RawPendingConsignmentDetailsV2.


        :param company_carrier_account: The company_carrier_account of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._company_carrier_account = company_carrier_account

    @property
    def to_postcode(self):
        """Gets the to_postcode of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The to_postcode of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._to_postcode

    @to_postcode.setter
    def to_postcode(self, to_postcode):
        """Sets the to_postcode of this RawPendingConsignmentDetailsV2.


        :param to_postcode: The to_postcode of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._to_postcode = to_postcode

    @property
    def to_suburb(self):
        """Gets the to_suburb of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The to_suburb of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._to_suburb

    @to_suburb.setter
    def to_suburb(self, to_suburb):
        """Sets the to_suburb of this RawPendingConsignmentDetailsV2.


        :param to_suburb: The to_suburb of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._to_suburb = to_suburb

    @property
    def from_postcode(self):
        """Gets the from_postcode of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The from_postcode of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._from_postcode

    @from_postcode.setter
    def from_postcode(self, from_postcode):
        """Sets the from_postcode of this RawPendingConsignmentDetailsV2.


        :param from_postcode: The from_postcode of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._from_postcode = from_postcode

    @property
    def from_suburb(self):
        """Gets the from_suburb of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The from_suburb of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._from_suburb

    @from_suburb.setter
    def from_suburb(self, from_suburb):
        """Sets the from_suburb of this RawPendingConsignmentDetailsV2.


        :param from_suburb: The from_suburb of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._from_suburb = from_suburb

    @property
    def from_country_code(self):
        """Gets the from_country_code of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The from_country_code of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._from_country_code

    @from_country_code.setter
    def from_country_code(self, from_country_code):
        """Sets the from_country_code of this RawPendingConsignmentDetailsV2.


        :param from_country_code: The from_country_code of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._from_country_code = from_country_code

    @property
    def to_country_code(self):
        """Gets the to_country_code of this RawPendingConsignmentDetailsV2.  # noqa: E501


        :return: The to_country_code of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :rtype: str
        """
        return self._to_country_code

    @to_country_code.setter
    def to_country_code(self, to_country_code):
        """Sets the to_country_code of this RawPendingConsignmentDetailsV2.


        :param to_country_code: The to_country_code of this RawPendingConsignmentDetailsV2.  # noqa: E501
        :type: str
        """

        self._to_country_code = to_country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawPendingConsignmentDetailsV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawPendingConsignmentDetailsV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
