# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'document_number': 'str',
        'company_id': 'int',
        'invoice_date': 'datetime',
        'date_due': 'datetime',
        'total_tax': 'float',
        'total': 'float',
        'line_items': 'list[InvoiceItemV2]',
        'row_number': 'int',
        'total_rows': 'int',
        'pdf': 'str',
        'invoice_pdf_file_information_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'document_number': 'documentNumber',
        'company_id': 'companyId',
        'invoice_date': 'invoiceDate',
        'date_due': 'dateDue',
        'total_tax': 'totalTax',
        'total': 'total',
        'line_items': 'lineItems',
        'row_number': 'rowNumber',
        'total_rows': 'totalRows',
        'pdf': 'pdf',
        'invoice_pdf_file_information_id': 'invoicePdfFileInformationId'
    }

    def __init__(self, id=None, document_number=None, company_id=None, invoice_date=None, date_due=None, total_tax=None, total=None, line_items=None, row_number=None, total_rows=None, pdf=None, invoice_pdf_file_information_id=None):  # noqa: E501
        """InvoiceV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._document_number = None
        self._company_id = None
        self._invoice_date = None
        self._date_due = None
        self._total_tax = None
        self._total = None
        self._line_items = None
        self._row_number = None
        self._total_rows = None
        self._pdf = None
        self._invoice_pdf_file_information_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if document_number is not None:
            self.document_number = document_number
        if company_id is not None:
            self.company_id = company_id
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if date_due is not None:
            self.date_due = date_due
        if total_tax is not None:
            self.total_tax = total_tax
        if total is not None:
            self.total = total
        if line_items is not None:
            self.line_items = line_items
        if row_number is not None:
            self.row_number = row_number
        if total_rows is not None:
            self.total_rows = total_rows
        if pdf is not None:
            self.pdf = pdf
        if invoice_pdf_file_information_id is not None:
            self.invoice_pdf_file_information_id = invoice_pdf_file_information_id

    @property
    def id(self):
        """Gets the id of this InvoiceV2.  # noqa: E501


        :return: The id of this InvoiceV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceV2.


        :param id: The id of this InvoiceV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def document_number(self):
        """Gets the document_number of this InvoiceV2.  # noqa: E501


        :return: The document_number of this InvoiceV2.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this InvoiceV2.


        :param document_number: The document_number of this InvoiceV2.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def company_id(self):
        """Gets the company_id of this InvoiceV2.  # noqa: E501


        :return: The company_id of this InvoiceV2.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this InvoiceV2.


        :param company_id: The company_id of this InvoiceV2.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def invoice_date(self):
        """Gets the invoice_date of this InvoiceV2.  # noqa: E501


        :return: The invoice_date of this InvoiceV2.  # noqa: E501
        :rtype: datetime
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this InvoiceV2.


        :param invoice_date: The invoice_date of this InvoiceV2.  # noqa: E501
        :type: datetime
        """

        self._invoice_date = invoice_date

    @property
    def date_due(self):
        """Gets the date_due of this InvoiceV2.  # noqa: E501


        :return: The date_due of this InvoiceV2.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this InvoiceV2.


        :param date_due: The date_due of this InvoiceV2.  # noqa: E501
        :type: datetime
        """

        self._date_due = date_due

    @property
    def total_tax(self):
        """Gets the total_tax of this InvoiceV2.  # noqa: E501


        :return: The total_tax of this InvoiceV2.  # noqa: E501
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this InvoiceV2.


        :param total_tax: The total_tax of this InvoiceV2.  # noqa: E501
        :type: float
        """

        self._total_tax = total_tax

    @property
    def total(self):
        """Gets the total of this InvoiceV2.  # noqa: E501


        :return: The total of this InvoiceV2.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InvoiceV2.


        :param total: The total of this InvoiceV2.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def line_items(self):
        """Gets the line_items of this InvoiceV2.  # noqa: E501


        :return: The line_items of this InvoiceV2.  # noqa: E501
        :rtype: list[InvoiceItemV2]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this InvoiceV2.


        :param line_items: The line_items of this InvoiceV2.  # noqa: E501
        :type: list[InvoiceItemV2]
        """

        self._line_items = line_items

    @property
    def row_number(self):
        """Gets the row_number of this InvoiceV2.  # noqa: E501


        :return: The row_number of this InvoiceV2.  # noqa: E501
        :rtype: int
        """
        return self._row_number

    @row_number.setter
    def row_number(self, row_number):
        """Sets the row_number of this InvoiceV2.


        :param row_number: The row_number of this InvoiceV2.  # noqa: E501
        :type: int
        """

        self._row_number = row_number

    @property
    def total_rows(self):
        """Gets the total_rows of this InvoiceV2.  # noqa: E501


        :return: The total_rows of this InvoiceV2.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this InvoiceV2.


        :param total_rows: The total_rows of this InvoiceV2.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def pdf(self):
        """Gets the pdf of this InvoiceV2.  # noqa: E501


        :return: The pdf of this InvoiceV2.  # noqa: E501
        :rtype: str
        """
        return self._pdf

    @pdf.setter
    def pdf(self, pdf):
        """Sets the pdf of this InvoiceV2.


        :param pdf: The pdf of this InvoiceV2.  # noqa: E501
        :type: str
        """

        self._pdf = pdf

    @property
    def invoice_pdf_file_information_id(self):
        """Gets the invoice_pdf_file_information_id of this InvoiceV2.  # noqa: E501


        :return: The invoice_pdf_file_information_id of this InvoiceV2.  # noqa: E501
        :rtype: int
        """
        return self._invoice_pdf_file_information_id

    @invoice_pdf_file_information_id.setter
    def invoice_pdf_file_information_id(self, invoice_pdf_file_information_id):
        """Sets the invoice_pdf_file_information_id of this InvoiceV2.


        :param invoice_pdf_file_information_id: The invoice_pdf_file_information_id of this InvoiceV2.  # noqa: E501
        :type: int
        """

        self._invoice_pdf_file_information_id = invoice_pdf_file_information_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
