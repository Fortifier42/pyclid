# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyCarrierAccountServiceOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_service_id': 'int',
        'markup': 'float',
        'total_markup_type': 'SellRateType',
        'minimum_charge_markup': 'float',
        'minimum_charge_type': 'SellRateType',
        'basic_charge_markup': 'float',
        'basic_charge_type': 'SellRateType',
        'break_charge': 'float',
        'break_charge_type': 'SellRateType',
        'hard_set_sell_price': 'float',
        'hard_set_base_sell_price': 'float',
        'max_total_surcharge_sell_price': 'float',
        'max_total_fuel_exempt_surcharge_sell_price': 'float',
        'cubic_conversion_rate': 'float',
        'fuel_surcharge_id': 'int',
        'company_carrier_account_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'carrier_service_id': 'carrierServiceId',
        'markup': 'markup',
        'total_markup_type': 'totalMarkupType',
        'minimum_charge_markup': 'minimumChargeMarkup',
        'minimum_charge_type': 'minimumChargeType',
        'basic_charge_markup': 'basicChargeMarkup',
        'basic_charge_type': 'basicChargeType',
        'break_charge': 'breakCharge',
        'break_charge_type': 'breakChargeType',
        'hard_set_sell_price': 'hardSetSellPrice',
        'hard_set_base_sell_price': 'hardSetBaseSellPrice',
        'max_total_surcharge_sell_price': 'maxTotalSurchargeSellPrice',
        'max_total_fuel_exempt_surcharge_sell_price': 'maxTotalFuelExemptSurchargeSellPrice',
        'cubic_conversion_rate': 'cubicConversionRate',
        'fuel_surcharge_id': 'fuelSurchargeId',
        'company_carrier_account_id': 'companyCarrierAccountId'
    }

    def __init__(self, id=None, carrier_service_id=None, markup=None, total_markup_type=None, minimum_charge_markup=None, minimum_charge_type=None, basic_charge_markup=None, basic_charge_type=None, break_charge=None, break_charge_type=None, hard_set_sell_price=None, hard_set_base_sell_price=None, max_total_surcharge_sell_price=None, max_total_fuel_exempt_surcharge_sell_price=None, cubic_conversion_rate=None, fuel_surcharge_id=None, company_carrier_account_id=None):  # noqa: E501
        """CompanyCarrierAccountServiceOverride - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_service_id = None
        self._markup = None
        self._total_markup_type = None
        self._minimum_charge_markup = None
        self._minimum_charge_type = None
        self._basic_charge_markup = None
        self._basic_charge_type = None
        self._break_charge = None
        self._break_charge_type = None
        self._hard_set_sell_price = None
        self._hard_set_base_sell_price = None
        self._max_total_surcharge_sell_price = None
        self._max_total_fuel_exempt_surcharge_sell_price = None
        self._cubic_conversion_rate = None
        self._fuel_surcharge_id = None
        self._company_carrier_account_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_service_id is not None:
            self.carrier_service_id = carrier_service_id
        if markup is not None:
            self.markup = markup
        if total_markup_type is not None:
            self.total_markup_type = total_markup_type
        if minimum_charge_markup is not None:
            self.minimum_charge_markup = minimum_charge_markup
        if minimum_charge_type is not None:
            self.minimum_charge_type = minimum_charge_type
        if basic_charge_markup is not None:
            self.basic_charge_markup = basic_charge_markup
        if basic_charge_type is not None:
            self.basic_charge_type = basic_charge_type
        if break_charge is not None:
            self.break_charge = break_charge
        if break_charge_type is not None:
            self.break_charge_type = break_charge_type
        if hard_set_sell_price is not None:
            self.hard_set_sell_price = hard_set_sell_price
        if hard_set_base_sell_price is not None:
            self.hard_set_base_sell_price = hard_set_base_sell_price
        if max_total_surcharge_sell_price is not None:
            self.max_total_surcharge_sell_price = max_total_surcharge_sell_price
        if max_total_fuel_exempt_surcharge_sell_price is not None:
            self.max_total_fuel_exempt_surcharge_sell_price = max_total_fuel_exempt_surcharge_sell_price
        if cubic_conversion_rate is not None:
            self.cubic_conversion_rate = cubic_conversion_rate
        if fuel_surcharge_id is not None:
            self.fuel_surcharge_id = fuel_surcharge_id
        if company_carrier_account_id is not None:
            self.company_carrier_account_id = company_carrier_account_id

    @property
    def id(self):
        """Gets the id of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyCarrierAccountServiceOverride.


        :param id: The id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_service_id(self):
        """Gets the carrier_service_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The carrier_service_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_id

    @carrier_service_id.setter
    def carrier_service_id(self, carrier_service_id):
        """Sets the carrier_service_id of this CompanyCarrierAccountServiceOverride.


        :param carrier_service_id: The carrier_service_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: int
        """

        self._carrier_service_id = carrier_service_id

    @property
    def markup(self):
        """Gets the markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this CompanyCarrierAccountServiceOverride.


        :param markup: The markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._markup = markup

    @property
    def total_markup_type(self):
        """Gets the total_markup_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The total_markup_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: SellRateType
        """
        return self._total_markup_type

    @total_markup_type.setter
    def total_markup_type(self, total_markup_type):
        """Sets the total_markup_type of this CompanyCarrierAccountServiceOverride.


        :param total_markup_type: The total_markup_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: SellRateType
        """

        self._total_markup_type = total_markup_type

    @property
    def minimum_charge_markup(self):
        """Gets the minimum_charge_markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The minimum_charge_markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._minimum_charge_markup

    @minimum_charge_markup.setter
    def minimum_charge_markup(self, minimum_charge_markup):
        """Sets the minimum_charge_markup of this CompanyCarrierAccountServiceOverride.


        :param minimum_charge_markup: The minimum_charge_markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._minimum_charge_markup = minimum_charge_markup

    @property
    def minimum_charge_type(self):
        """Gets the minimum_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The minimum_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: SellRateType
        """
        return self._minimum_charge_type

    @minimum_charge_type.setter
    def minimum_charge_type(self, minimum_charge_type):
        """Sets the minimum_charge_type of this CompanyCarrierAccountServiceOverride.


        :param minimum_charge_type: The minimum_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: SellRateType
        """

        self._minimum_charge_type = minimum_charge_type

    @property
    def basic_charge_markup(self):
        """Gets the basic_charge_markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The basic_charge_markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._basic_charge_markup

    @basic_charge_markup.setter
    def basic_charge_markup(self, basic_charge_markup):
        """Sets the basic_charge_markup of this CompanyCarrierAccountServiceOverride.


        :param basic_charge_markup: The basic_charge_markup of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._basic_charge_markup = basic_charge_markup

    @property
    def basic_charge_type(self):
        """Gets the basic_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The basic_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: SellRateType
        """
        return self._basic_charge_type

    @basic_charge_type.setter
    def basic_charge_type(self, basic_charge_type):
        """Sets the basic_charge_type of this CompanyCarrierAccountServiceOverride.


        :param basic_charge_type: The basic_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: SellRateType
        """

        self._basic_charge_type = basic_charge_type

    @property
    def break_charge(self):
        """Gets the break_charge of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The break_charge of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._break_charge

    @break_charge.setter
    def break_charge(self, break_charge):
        """Sets the break_charge of this CompanyCarrierAccountServiceOverride.


        :param break_charge: The break_charge of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._break_charge = break_charge

    @property
    def break_charge_type(self):
        """Gets the break_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The break_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: SellRateType
        """
        return self._break_charge_type

    @break_charge_type.setter
    def break_charge_type(self, break_charge_type):
        """Sets the break_charge_type of this CompanyCarrierAccountServiceOverride.


        :param break_charge_type: The break_charge_type of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: SellRateType
        """

        self._break_charge_type = break_charge_type

    @property
    def hard_set_sell_price(self):
        """Gets the hard_set_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The hard_set_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._hard_set_sell_price

    @hard_set_sell_price.setter
    def hard_set_sell_price(self, hard_set_sell_price):
        """Sets the hard_set_sell_price of this CompanyCarrierAccountServiceOverride.


        :param hard_set_sell_price: The hard_set_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._hard_set_sell_price = hard_set_sell_price

    @property
    def hard_set_base_sell_price(self):
        """Gets the hard_set_base_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The hard_set_base_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._hard_set_base_sell_price

    @hard_set_base_sell_price.setter
    def hard_set_base_sell_price(self, hard_set_base_sell_price):
        """Sets the hard_set_base_sell_price of this CompanyCarrierAccountServiceOverride.


        :param hard_set_base_sell_price: The hard_set_base_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._hard_set_base_sell_price = hard_set_base_sell_price

    @property
    def max_total_surcharge_sell_price(self):
        """Gets the max_total_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The max_total_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._max_total_surcharge_sell_price

    @max_total_surcharge_sell_price.setter
    def max_total_surcharge_sell_price(self, max_total_surcharge_sell_price):
        """Sets the max_total_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.


        :param max_total_surcharge_sell_price: The max_total_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._max_total_surcharge_sell_price = max_total_surcharge_sell_price

    @property
    def max_total_fuel_exempt_surcharge_sell_price(self):
        """Gets the max_total_fuel_exempt_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The max_total_fuel_exempt_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._max_total_fuel_exempt_surcharge_sell_price

    @max_total_fuel_exempt_surcharge_sell_price.setter
    def max_total_fuel_exempt_surcharge_sell_price(self, max_total_fuel_exempt_surcharge_sell_price):
        """Sets the max_total_fuel_exempt_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.


        :param max_total_fuel_exempt_surcharge_sell_price: The max_total_fuel_exempt_surcharge_sell_price of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._max_total_fuel_exempt_surcharge_sell_price = max_total_fuel_exempt_surcharge_sell_price

    @property
    def cubic_conversion_rate(self):
        """Gets the cubic_conversion_rate of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The cubic_conversion_rate of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: float
        """
        return self._cubic_conversion_rate

    @cubic_conversion_rate.setter
    def cubic_conversion_rate(self, cubic_conversion_rate):
        """Sets the cubic_conversion_rate of this CompanyCarrierAccountServiceOverride.


        :param cubic_conversion_rate: The cubic_conversion_rate of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: float
        """

        self._cubic_conversion_rate = cubic_conversion_rate

    @property
    def fuel_surcharge_id(self):
        """Gets the fuel_surcharge_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The fuel_surcharge_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: int
        """
        return self._fuel_surcharge_id

    @fuel_surcharge_id.setter
    def fuel_surcharge_id(self, fuel_surcharge_id):
        """Sets the fuel_surcharge_id of this CompanyCarrierAccountServiceOverride.


        :param fuel_surcharge_id: The fuel_surcharge_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: int
        """

        self._fuel_surcharge_id = fuel_surcharge_id

    @property
    def company_carrier_account_id(self):
        """Gets the company_carrier_account_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501


        :return: The company_carrier_account_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :rtype: int
        """
        return self._company_carrier_account_id

    @company_carrier_account_id.setter
    def company_carrier_account_id(self, company_carrier_account_id):
        """Sets the company_carrier_account_id of this CompanyCarrierAccountServiceOverride.


        :param company_carrier_account_id: The company_carrier_account_id of this CompanyCarrierAccountServiceOverride.  # noqa: E501
        :type: int
        """

        self._company_carrier_account_id = company_carrier_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyCarrierAccountServiceOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyCarrierAccountServiceOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
