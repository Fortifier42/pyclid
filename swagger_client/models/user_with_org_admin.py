# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserWithOrgAdmin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'email_address': 'str',
        'first_name': 'str',
        'surname': 'str',
        'password': 'str',
        'confirm_password': 'str',
        'phone': 'str',
        'business_phone': 'str',
        'mobile': 'str',
        'is_deleted': 'bool',
        'is_active': 'bool',
        'last_login': 'datetime',
        'invalid_password_attempts': 'int',
        'roles': 'list[Role]',
        'groups': 'list[Group]',
        'company_id': 'int',
        'company': 'Company',
        'display_name': 'str',
        'user_type': 'UserType',
        'dashboard_user_preferences': 'str',
        'notes': 'str',
        'title': 'str',
        'session_updater_guid': 'str',
        'test_mode_setting': 'UserTestModeSetting',
        'enable_email_notifications': 'bool',
        'is_local_account': 'bool',
        'is_organisation_admin': 'bool',
        'identity_information': 'IdentityInformation'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'email_address': 'emailAddress',
        'first_name': 'firstName',
        'surname': 'surname',
        'password': 'password',
        'confirm_password': 'confirmPassword',
        'phone': 'phone',
        'business_phone': 'businessPhone',
        'mobile': 'mobile',
        'is_deleted': 'isDeleted',
        'is_active': 'isActive',
        'last_login': 'lastLogin',
        'invalid_password_attempts': 'invalidPasswordAttempts',
        'roles': 'roles',
        'groups': 'groups',
        'company_id': 'companyId',
        'company': 'company',
        'display_name': 'displayName',
        'user_type': 'userType',
        'dashboard_user_preferences': 'dashboardUserPreferences',
        'notes': 'notes',
        'title': 'title',
        'session_updater_guid': 'sessionUpdaterGuid',
        'test_mode_setting': 'testModeSetting',
        'enable_email_notifications': 'enableEmailNotifications',
        'is_local_account': 'isLocalAccount',
        'is_organisation_admin': 'isOrganisationAdmin',
        'identity_information': 'identityInformation'
    }

    def __init__(self, id=None, username=None, email_address=None, first_name=None, surname=None, password=None, confirm_password=None, phone=None, business_phone=None, mobile=None, is_deleted=None, is_active=None, last_login=None, invalid_password_attempts=None, roles=None, groups=None, company_id=None, company=None, display_name=None, user_type=None, dashboard_user_preferences=None, notes=None, title=None, session_updater_guid=None, test_mode_setting=None, enable_email_notifications=None, is_local_account=None, is_organisation_admin=None, identity_information=None):  # noqa: E501
        """UserWithOrgAdmin - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._username = None
        self._email_address = None
        self._first_name = None
        self._surname = None
        self._password = None
        self._confirm_password = None
        self._phone = None
        self._business_phone = None
        self._mobile = None
        self._is_deleted = None
        self._is_active = None
        self._last_login = None
        self._invalid_password_attempts = None
        self._roles = None
        self._groups = None
        self._company_id = None
        self._company = None
        self._display_name = None
        self._user_type = None
        self._dashboard_user_preferences = None
        self._notes = None
        self._title = None
        self._session_updater_guid = None
        self._test_mode_setting = None
        self._enable_email_notifications = None
        self._is_local_account = None
        self._is_organisation_admin = None
        self._identity_information = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if email_address is not None:
            self.email_address = email_address
        if first_name is not None:
            self.first_name = first_name
        if surname is not None:
            self.surname = surname
        if password is not None:
            self.password = password
        if confirm_password is not None:
            self.confirm_password = confirm_password
        if phone is not None:
            self.phone = phone
        if business_phone is not None:
            self.business_phone = business_phone
        if mobile is not None:
            self.mobile = mobile
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if is_active is not None:
            self.is_active = is_active
        if last_login is not None:
            self.last_login = last_login
        if invalid_password_attempts is not None:
            self.invalid_password_attempts = invalid_password_attempts
        if roles is not None:
            self.roles = roles
        if groups is not None:
            self.groups = groups
        if company_id is not None:
            self.company_id = company_id
        if company is not None:
            self.company = company
        if display_name is not None:
            self.display_name = display_name
        if user_type is not None:
            self.user_type = user_type
        if dashboard_user_preferences is not None:
            self.dashboard_user_preferences = dashboard_user_preferences
        if notes is not None:
            self.notes = notes
        if title is not None:
            self.title = title
        if session_updater_guid is not None:
            self.session_updater_guid = session_updater_guid
        if test_mode_setting is not None:
            self.test_mode_setting = test_mode_setting
        if enable_email_notifications is not None:
            self.enable_email_notifications = enable_email_notifications
        if is_local_account is not None:
            self.is_local_account = is_local_account
        if is_organisation_admin is not None:
            self.is_organisation_admin = is_organisation_admin
        if identity_information is not None:
            self.identity_information = identity_information

    @property
    def id(self):
        """Gets the id of this UserWithOrgAdmin.  # noqa: E501


        :return: The id of this UserWithOrgAdmin.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserWithOrgAdmin.


        :param id: The id of this UserWithOrgAdmin.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this UserWithOrgAdmin.  # noqa: E501


        :return: The username of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserWithOrgAdmin.


        :param username: The username of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email_address(self):
        """Gets the email_address of this UserWithOrgAdmin.  # noqa: E501


        :return: The email_address of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserWithOrgAdmin.


        :param email_address: The email_address of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this UserWithOrgAdmin.  # noqa: E501


        :return: The first_name of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserWithOrgAdmin.


        :param first_name: The first_name of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def surname(self):
        """Gets the surname of this UserWithOrgAdmin.  # noqa: E501


        :return: The surname of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this UserWithOrgAdmin.


        :param surname: The surname of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def password(self):
        """Gets the password of this UserWithOrgAdmin.  # noqa: E501


        :return: The password of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserWithOrgAdmin.


        :param password: The password of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def confirm_password(self):
        """Gets the confirm_password of this UserWithOrgAdmin.  # noqa: E501


        :return: The confirm_password of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._confirm_password

    @confirm_password.setter
    def confirm_password(self, confirm_password):
        """Sets the confirm_password of this UserWithOrgAdmin.


        :param confirm_password: The confirm_password of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._confirm_password = confirm_password

    @property
    def phone(self):
        """Gets the phone of this UserWithOrgAdmin.  # noqa: E501


        :return: The phone of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserWithOrgAdmin.


        :param phone: The phone of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def business_phone(self):
        """Gets the business_phone of this UserWithOrgAdmin.  # noqa: E501


        :return: The business_phone of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._business_phone

    @business_phone.setter
    def business_phone(self, business_phone):
        """Sets the business_phone of this UserWithOrgAdmin.


        :param business_phone: The business_phone of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._business_phone = business_phone

    @property
    def mobile(self):
        """Gets the mobile of this UserWithOrgAdmin.  # noqa: E501


        :return: The mobile of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this UserWithOrgAdmin.


        :param mobile: The mobile of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def is_deleted(self):
        """Gets the is_deleted of this UserWithOrgAdmin.  # noqa: E501


        :return: The is_deleted of this UserWithOrgAdmin.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this UserWithOrgAdmin.


        :param is_deleted: The is_deleted of this UserWithOrgAdmin.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_active(self):
        """Gets the is_active of this UserWithOrgAdmin.  # noqa: E501


        :return: The is_active of this UserWithOrgAdmin.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserWithOrgAdmin.


        :param is_active: The is_active of this UserWithOrgAdmin.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def last_login(self):
        """Gets the last_login of this UserWithOrgAdmin.  # noqa: E501


        :return: The last_login of this UserWithOrgAdmin.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserWithOrgAdmin.


        :param last_login: The last_login of this UserWithOrgAdmin.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def invalid_password_attempts(self):
        """Gets the invalid_password_attempts of this UserWithOrgAdmin.  # noqa: E501


        :return: The invalid_password_attempts of this UserWithOrgAdmin.  # noqa: E501
        :rtype: int
        """
        return self._invalid_password_attempts

    @invalid_password_attempts.setter
    def invalid_password_attempts(self, invalid_password_attempts):
        """Sets the invalid_password_attempts of this UserWithOrgAdmin.


        :param invalid_password_attempts: The invalid_password_attempts of this UserWithOrgAdmin.  # noqa: E501
        :type: int
        """

        self._invalid_password_attempts = invalid_password_attempts

    @property
    def roles(self):
        """Gets the roles of this UserWithOrgAdmin.  # noqa: E501


        :return: The roles of this UserWithOrgAdmin.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserWithOrgAdmin.


        :param roles: The roles of this UserWithOrgAdmin.  # noqa: E501
        :type: list[Role]
        """

        self._roles = roles

    @property
    def groups(self):
        """Gets the groups of this UserWithOrgAdmin.  # noqa: E501


        :return: The groups of this UserWithOrgAdmin.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserWithOrgAdmin.


        :param groups: The groups of this UserWithOrgAdmin.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def company_id(self):
        """Gets the company_id of this UserWithOrgAdmin.  # noqa: E501


        :return: The company_id of this UserWithOrgAdmin.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UserWithOrgAdmin.


        :param company_id: The company_id of this UserWithOrgAdmin.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def company(self):
        """Gets the company of this UserWithOrgAdmin.  # noqa: E501


        :return: The company of this UserWithOrgAdmin.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserWithOrgAdmin.


        :param company: The company of this UserWithOrgAdmin.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def display_name(self):
        """Gets the display_name of this UserWithOrgAdmin.  # noqa: E501


        :return: The display_name of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserWithOrgAdmin.


        :param display_name: The display_name of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def user_type(self):
        """Gets the user_type of this UserWithOrgAdmin.  # noqa: E501


        :return: The user_type of this UserWithOrgAdmin.  # noqa: E501
        :rtype: UserType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserWithOrgAdmin.


        :param user_type: The user_type of this UserWithOrgAdmin.  # noqa: E501
        :type: UserType
        """

        self._user_type = user_type

    @property
    def dashboard_user_preferences(self):
        """Gets the dashboard_user_preferences of this UserWithOrgAdmin.  # noqa: E501


        :return: The dashboard_user_preferences of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_user_preferences

    @dashboard_user_preferences.setter
    def dashboard_user_preferences(self, dashboard_user_preferences):
        """Sets the dashboard_user_preferences of this UserWithOrgAdmin.


        :param dashboard_user_preferences: The dashboard_user_preferences of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._dashboard_user_preferences = dashboard_user_preferences

    @property
    def notes(self):
        """Gets the notes of this UserWithOrgAdmin.  # noqa: E501


        :return: The notes of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UserWithOrgAdmin.


        :param notes: The notes of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def title(self):
        """Gets the title of this UserWithOrgAdmin.  # noqa: E501


        :return: The title of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserWithOrgAdmin.


        :param title: The title of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def session_updater_guid(self):
        """Gets the session_updater_guid of this UserWithOrgAdmin.  # noqa: E501


        :return: The session_updater_guid of this UserWithOrgAdmin.  # noqa: E501
        :rtype: str
        """
        return self._session_updater_guid

    @session_updater_guid.setter
    def session_updater_guid(self, session_updater_guid):
        """Sets the session_updater_guid of this UserWithOrgAdmin.


        :param session_updater_guid: The session_updater_guid of this UserWithOrgAdmin.  # noqa: E501
        :type: str
        """

        self._session_updater_guid = session_updater_guid

    @property
    def test_mode_setting(self):
        """Gets the test_mode_setting of this UserWithOrgAdmin.  # noqa: E501


        :return: The test_mode_setting of this UserWithOrgAdmin.  # noqa: E501
        :rtype: UserTestModeSetting
        """
        return self._test_mode_setting

    @test_mode_setting.setter
    def test_mode_setting(self, test_mode_setting):
        """Sets the test_mode_setting of this UserWithOrgAdmin.


        :param test_mode_setting: The test_mode_setting of this UserWithOrgAdmin.  # noqa: E501
        :type: UserTestModeSetting
        """

        self._test_mode_setting = test_mode_setting

    @property
    def enable_email_notifications(self):
        """Gets the enable_email_notifications of this UserWithOrgAdmin.  # noqa: E501


        :return: The enable_email_notifications of this UserWithOrgAdmin.  # noqa: E501
        :rtype: bool
        """
        return self._enable_email_notifications

    @enable_email_notifications.setter
    def enable_email_notifications(self, enable_email_notifications):
        """Sets the enable_email_notifications of this UserWithOrgAdmin.


        :param enable_email_notifications: The enable_email_notifications of this UserWithOrgAdmin.  # noqa: E501
        :type: bool
        """

        self._enable_email_notifications = enable_email_notifications

    @property
    def is_local_account(self):
        """Gets the is_local_account of this UserWithOrgAdmin.  # noqa: E501


        :return: The is_local_account of this UserWithOrgAdmin.  # noqa: E501
        :rtype: bool
        """
        return self._is_local_account

    @is_local_account.setter
    def is_local_account(self, is_local_account):
        """Sets the is_local_account of this UserWithOrgAdmin.


        :param is_local_account: The is_local_account of this UserWithOrgAdmin.  # noqa: E501
        :type: bool
        """

        self._is_local_account = is_local_account

    @property
    def is_organisation_admin(self):
        """Gets the is_organisation_admin of this UserWithOrgAdmin.  # noqa: E501


        :return: The is_organisation_admin of this UserWithOrgAdmin.  # noqa: E501
        :rtype: bool
        """
        return self._is_organisation_admin

    @is_organisation_admin.setter
    def is_organisation_admin(self, is_organisation_admin):
        """Sets the is_organisation_admin of this UserWithOrgAdmin.


        :param is_organisation_admin: The is_organisation_admin of this UserWithOrgAdmin.  # noqa: E501
        :type: bool
        """

        self._is_organisation_admin = is_organisation_admin

    @property
    def identity_information(self):
        """Gets the identity_information of this UserWithOrgAdmin.  # noqa: E501


        :return: The identity_information of this UserWithOrgAdmin.  # noqa: E501
        :rtype: IdentityInformation
        """
        return self._identity_information

    @identity_information.setter
    def identity_information(self, identity_information):
        """Sets the identity_information of this UserWithOrgAdmin.


        :param identity_information: The identity_information of this UserWithOrgAdmin.  # noqa: E501
        :type: IdentityInformation
        """

        self._identity_information = identity_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserWithOrgAdmin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserWithOrgAdmin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
