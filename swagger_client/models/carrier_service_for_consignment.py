# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierServiceForConsignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_id': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'display_name': 'str',
        'custom_disclaimer_message': 'str',
        'custom_eta_interpolation_string': 'str',
        'carrier_service_surcharges': 'list[Surcharge]',
        'fuel_surcharge_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'carrier_id': 'carrierId',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'display_name': 'displayName',
        'custom_disclaimer_message': 'customDisclaimerMessage',
        'custom_eta_interpolation_string': 'customEtaInterpolationString',
        'carrier_service_surcharges': 'carrierServiceSurcharges',
        'fuel_surcharge_id': 'fuelSurchargeId'
    }

    def __init__(self, id=None, carrier_id=None, name=None, abbreviation=None, display_name=None, custom_disclaimer_message=None, custom_eta_interpolation_string=None, carrier_service_surcharges=None, fuel_surcharge_id=None):  # noqa: E501
        """CarrierServiceForConsignment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_id = None
        self._name = None
        self._abbreviation = None
        self._display_name = None
        self._custom_disclaimer_message = None
        self._custom_eta_interpolation_string = None
        self._carrier_service_surcharges = None
        self._fuel_surcharge_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_id is not None:
            self.carrier_id = carrier_id
        self.name = name
        self.abbreviation = abbreviation
        if display_name is not None:
            self.display_name = display_name
        if custom_disclaimer_message is not None:
            self.custom_disclaimer_message = custom_disclaimer_message
        if custom_eta_interpolation_string is not None:
            self.custom_eta_interpolation_string = custom_eta_interpolation_string
        if carrier_service_surcharges is not None:
            self.carrier_service_surcharges = carrier_service_surcharges
        if fuel_surcharge_id is not None:
            self.fuel_surcharge_id = fuel_surcharge_id

    @property
    def id(self):
        """Gets the id of this CarrierServiceForConsignment.  # noqa: E501


        :return: The id of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierServiceForConsignment.


        :param id: The id of this CarrierServiceForConsignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CarrierServiceForConsignment.  # noqa: E501


        :return: The carrier_id of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CarrierServiceForConsignment.


        :param carrier_id: The carrier_id of this CarrierServiceForConsignment.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def name(self):
        """Gets the name of this CarrierServiceForConsignment.  # noqa: E501


        :return: The name of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierServiceForConsignment.


        :param name: The name of this CarrierServiceForConsignment.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CarrierServiceForConsignment.  # noqa: E501


        :return: The abbreviation of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CarrierServiceForConsignment.


        :param abbreviation: The abbreviation of this CarrierServiceForConsignment.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def display_name(self):
        """Gets the display_name of this CarrierServiceForConsignment.  # noqa: E501


        :return: The display_name of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CarrierServiceForConsignment.


        :param display_name: The display_name of this CarrierServiceForConsignment.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def custom_disclaimer_message(self):
        """Gets the custom_disclaimer_message of this CarrierServiceForConsignment.  # noqa: E501


        :return: The custom_disclaimer_message of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: str
        """
        return self._custom_disclaimer_message

    @custom_disclaimer_message.setter
    def custom_disclaimer_message(self, custom_disclaimer_message):
        """Sets the custom_disclaimer_message of this CarrierServiceForConsignment.


        :param custom_disclaimer_message: The custom_disclaimer_message of this CarrierServiceForConsignment.  # noqa: E501
        :type: str
        """

        self._custom_disclaimer_message = custom_disclaimer_message

    @property
    def custom_eta_interpolation_string(self):
        """Gets the custom_eta_interpolation_string of this CarrierServiceForConsignment.  # noqa: E501


        :return: The custom_eta_interpolation_string of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: str
        """
        return self._custom_eta_interpolation_string

    @custom_eta_interpolation_string.setter
    def custom_eta_interpolation_string(self, custom_eta_interpolation_string):
        """Sets the custom_eta_interpolation_string of this CarrierServiceForConsignment.


        :param custom_eta_interpolation_string: The custom_eta_interpolation_string of this CarrierServiceForConsignment.  # noqa: E501
        :type: str
        """

        self._custom_eta_interpolation_string = custom_eta_interpolation_string

    @property
    def carrier_service_surcharges(self):
        """Gets the carrier_service_surcharges of this CarrierServiceForConsignment.  # noqa: E501


        :return: The carrier_service_surcharges of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: list[Surcharge]
        """
        return self._carrier_service_surcharges

    @carrier_service_surcharges.setter
    def carrier_service_surcharges(self, carrier_service_surcharges):
        """Sets the carrier_service_surcharges of this CarrierServiceForConsignment.


        :param carrier_service_surcharges: The carrier_service_surcharges of this CarrierServiceForConsignment.  # noqa: E501
        :type: list[Surcharge]
        """

        self._carrier_service_surcharges = carrier_service_surcharges

    @property
    def fuel_surcharge_id(self):
        """Gets the fuel_surcharge_id of this CarrierServiceForConsignment.  # noqa: E501

        this is taken from the carrierAccountService.  # noqa: E501

        :return: The fuel_surcharge_id of this CarrierServiceForConsignment.  # noqa: E501
        :rtype: int
        """
        return self._fuel_surcharge_id

    @fuel_surcharge_id.setter
    def fuel_surcharge_id(self, fuel_surcharge_id):
        """Sets the fuel_surcharge_id of this CarrierServiceForConsignment.

        this is taken from the carrierAccountService.  # noqa: E501

        :param fuel_surcharge_id: The fuel_surcharge_id of this CarrierServiceForConsignment.  # noqa: E501
        :type: int
        """

        self._fuel_surcharge_id = fuel_surcharge_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierServiceForConsignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierServiceForConsignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
