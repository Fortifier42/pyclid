# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentItemDgItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'id': 'int',
        'consignment_item_id': 'int',
        'consignment_item': 'ConsignmentItem',
        'company_dg_item_id': 'int',
        'company_dg_item': 'CompanyDgItem',
        'un_number': 'int',
        'packing_group': 'PackingGroup',
        'container_type': 'ContainerType',
        'aggregate_quantity': 'float',
        'is_aggregate_quantity_weight': 'bool',
        'number_of_containers': 'int',
        'dg_class_type': 'DgClassType',
        'sub_dg_class_types': 'list[DgClassType]',
        'proper_shipping_name': 'str',
        'technical_or_chemical_group_names': 'str',
        'is_marine_pollutant': 'bool',
        'is_temperature_controlled': 'bool',
        'is_empty_dg_container': 'bool',
        'sub_dg_class_types_value': 'str',
        'packing_group_string_value': 'str',
        'container_type_string_value': 'str',
        'un_number_info': 'DgUnNumberFlat'
    }

    attribute_map = {
        'guid': 'guid',
        'id': 'id',
        'consignment_item_id': 'consignmentItemId',
        'consignment_item': 'consignmentItem',
        'company_dg_item_id': 'companyDgItemId',
        'company_dg_item': 'companyDgItem',
        'un_number': 'unNumber',
        'packing_group': 'packingGroup',
        'container_type': 'containerType',
        'aggregate_quantity': 'aggregateQuantity',
        'is_aggregate_quantity_weight': 'isAggregateQuantityWeight',
        'number_of_containers': 'numberOfContainers',
        'dg_class_type': 'dgClassType',
        'sub_dg_class_types': 'subDgClassTypes',
        'proper_shipping_name': 'properShippingName',
        'technical_or_chemical_group_names': 'technicalOrChemicalGroupNames',
        'is_marine_pollutant': 'isMarinePollutant',
        'is_temperature_controlled': 'isTemperatureControlled',
        'is_empty_dg_container': 'isEmptyDgContainer',
        'sub_dg_class_types_value': 'subDgClassTypesValue',
        'packing_group_string_value': 'packingGroupStringValue',
        'container_type_string_value': 'containerTypeStringValue',
        'un_number_info': 'unNumberInfo'
    }

    def __init__(self, guid=None, id=None, consignment_item_id=None, consignment_item=None, company_dg_item_id=None, company_dg_item=None, un_number=None, packing_group=None, container_type=None, aggregate_quantity=None, is_aggregate_quantity_weight=None, number_of_containers=None, dg_class_type=None, sub_dg_class_types=None, proper_shipping_name=None, technical_or_chemical_group_names=None, is_marine_pollutant=None, is_temperature_controlled=None, is_empty_dg_container=None, sub_dg_class_types_value=None, packing_group_string_value=None, container_type_string_value=None, un_number_info=None):  # noqa: E501
        """ConsignmentItemDgItem - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._id = None
        self._consignment_item_id = None
        self._consignment_item = None
        self._company_dg_item_id = None
        self._company_dg_item = None
        self._un_number = None
        self._packing_group = None
        self._container_type = None
        self._aggregate_quantity = None
        self._is_aggregate_quantity_weight = None
        self._number_of_containers = None
        self._dg_class_type = None
        self._sub_dg_class_types = None
        self._proper_shipping_name = None
        self._technical_or_chemical_group_names = None
        self._is_marine_pollutant = None
        self._is_temperature_controlled = None
        self._is_empty_dg_container = None
        self._sub_dg_class_types_value = None
        self._packing_group_string_value = None
        self._container_type_string_value = None
        self._un_number_info = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if id is not None:
            self.id = id
        if consignment_item_id is not None:
            self.consignment_item_id = consignment_item_id
        if consignment_item is not None:
            self.consignment_item = consignment_item
        if company_dg_item_id is not None:
            self.company_dg_item_id = company_dg_item_id
        if company_dg_item is not None:
            self.company_dg_item = company_dg_item
        if un_number is not None:
            self.un_number = un_number
        if packing_group is not None:
            self.packing_group = packing_group
        if container_type is not None:
            self.container_type = container_type
        if aggregate_quantity is not None:
            self.aggregate_quantity = aggregate_quantity
        if is_aggregate_quantity_weight is not None:
            self.is_aggregate_quantity_weight = is_aggregate_quantity_weight
        if number_of_containers is not None:
            self.number_of_containers = number_of_containers
        if dg_class_type is not None:
            self.dg_class_type = dg_class_type
        if sub_dg_class_types is not None:
            self.sub_dg_class_types = sub_dg_class_types
        if proper_shipping_name is not None:
            self.proper_shipping_name = proper_shipping_name
        if technical_or_chemical_group_names is not None:
            self.technical_or_chemical_group_names = technical_or_chemical_group_names
        if is_marine_pollutant is not None:
            self.is_marine_pollutant = is_marine_pollutant
        if is_temperature_controlled is not None:
            self.is_temperature_controlled = is_temperature_controlled
        if is_empty_dg_container is not None:
            self.is_empty_dg_container = is_empty_dg_container
        if sub_dg_class_types_value is not None:
            self.sub_dg_class_types_value = sub_dg_class_types_value
        if packing_group_string_value is not None:
            self.packing_group_string_value = packing_group_string_value
        if container_type_string_value is not None:
            self.container_type_string_value = container_type_string_value
        if un_number_info is not None:
            self.un_number_info = un_number_info

    @property
    def guid(self):
        """Gets the guid of this ConsignmentItemDgItem.  # noqa: E501


        :return: The guid of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ConsignmentItemDgItem.


        :param guid: The guid of this ConsignmentItemDgItem.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def id(self):
        """Gets the id of this ConsignmentItemDgItem.  # noqa: E501


        :return: The id of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsignmentItemDgItem.


        :param id: The id of this ConsignmentItemDgItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def consignment_item_id(self):
        """Gets the consignment_item_id of this ConsignmentItemDgItem.  # noqa: E501


        :return: The consignment_item_id of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: int
        """
        return self._consignment_item_id

    @consignment_item_id.setter
    def consignment_item_id(self, consignment_item_id):
        """Sets the consignment_item_id of this ConsignmentItemDgItem.


        :param consignment_item_id: The consignment_item_id of this ConsignmentItemDgItem.  # noqa: E501
        :type: int
        """

        self._consignment_item_id = consignment_item_id

    @property
    def consignment_item(self):
        """Gets the consignment_item of this ConsignmentItemDgItem.  # noqa: E501


        :return: The consignment_item of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: ConsignmentItem
        """
        return self._consignment_item

    @consignment_item.setter
    def consignment_item(self, consignment_item):
        """Sets the consignment_item of this ConsignmentItemDgItem.


        :param consignment_item: The consignment_item of this ConsignmentItemDgItem.  # noqa: E501
        :type: ConsignmentItem
        """

        self._consignment_item = consignment_item

    @property
    def company_dg_item_id(self):
        """Gets the company_dg_item_id of this ConsignmentItemDgItem.  # noqa: E501


        :return: The company_dg_item_id of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: int
        """
        return self._company_dg_item_id

    @company_dg_item_id.setter
    def company_dg_item_id(self, company_dg_item_id):
        """Sets the company_dg_item_id of this ConsignmentItemDgItem.


        :param company_dg_item_id: The company_dg_item_id of this ConsignmentItemDgItem.  # noqa: E501
        :type: int
        """

        self._company_dg_item_id = company_dg_item_id

    @property
    def company_dg_item(self):
        """Gets the company_dg_item of this ConsignmentItemDgItem.  # noqa: E501


        :return: The company_dg_item of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: CompanyDgItem
        """
        return self._company_dg_item

    @company_dg_item.setter
    def company_dg_item(self, company_dg_item):
        """Sets the company_dg_item of this ConsignmentItemDgItem.


        :param company_dg_item: The company_dg_item of this ConsignmentItemDgItem.  # noqa: E501
        :type: CompanyDgItem
        """

        self._company_dg_item = company_dg_item

    @property
    def un_number(self):
        """Gets the un_number of this ConsignmentItemDgItem.  # noqa: E501


        :return: The un_number of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: int
        """
        return self._un_number

    @un_number.setter
    def un_number(self, un_number):
        """Sets the un_number of this ConsignmentItemDgItem.


        :param un_number: The un_number of this ConsignmentItemDgItem.  # noqa: E501
        :type: int
        """

        self._un_number = un_number

    @property
    def packing_group(self):
        """Gets the packing_group of this ConsignmentItemDgItem.  # noqa: E501


        :return: The packing_group of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: PackingGroup
        """
        return self._packing_group

    @packing_group.setter
    def packing_group(self, packing_group):
        """Sets the packing_group of this ConsignmentItemDgItem.


        :param packing_group: The packing_group of this ConsignmentItemDgItem.  # noqa: E501
        :type: PackingGroup
        """

        self._packing_group = packing_group

    @property
    def container_type(self):
        """Gets the container_type of this ConsignmentItemDgItem.  # noqa: E501


        :return: The container_type of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: ContainerType
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this ConsignmentItemDgItem.


        :param container_type: The container_type of this ConsignmentItemDgItem.  # noqa: E501
        :type: ContainerType
        """

        self._container_type = container_type

    @property
    def aggregate_quantity(self):
        """Gets the aggregate_quantity of this ConsignmentItemDgItem.  # noqa: E501


        :return: The aggregate_quantity of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: float
        """
        return self._aggregate_quantity

    @aggregate_quantity.setter
    def aggregate_quantity(self, aggregate_quantity):
        """Sets the aggregate_quantity of this ConsignmentItemDgItem.


        :param aggregate_quantity: The aggregate_quantity of this ConsignmentItemDgItem.  # noqa: E501
        :type: float
        """

        self._aggregate_quantity = aggregate_quantity

    @property
    def is_aggregate_quantity_weight(self):
        """Gets the is_aggregate_quantity_weight of this ConsignmentItemDgItem.  # noqa: E501


        :return: The is_aggregate_quantity_weight of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_aggregate_quantity_weight

    @is_aggregate_quantity_weight.setter
    def is_aggregate_quantity_weight(self, is_aggregate_quantity_weight):
        """Sets the is_aggregate_quantity_weight of this ConsignmentItemDgItem.


        :param is_aggregate_quantity_weight: The is_aggregate_quantity_weight of this ConsignmentItemDgItem.  # noqa: E501
        :type: bool
        """

        self._is_aggregate_quantity_weight = is_aggregate_quantity_weight

    @property
    def number_of_containers(self):
        """Gets the number_of_containers of this ConsignmentItemDgItem.  # noqa: E501


        :return: The number_of_containers of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: int
        """
        return self._number_of_containers

    @number_of_containers.setter
    def number_of_containers(self, number_of_containers):
        """Sets the number_of_containers of this ConsignmentItemDgItem.


        :param number_of_containers: The number_of_containers of this ConsignmentItemDgItem.  # noqa: E501
        :type: int
        """

        self._number_of_containers = number_of_containers

    @property
    def dg_class_type(self):
        """Gets the dg_class_type of this ConsignmentItemDgItem.  # noqa: E501


        :return: The dg_class_type of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: DgClassType
        """
        return self._dg_class_type

    @dg_class_type.setter
    def dg_class_type(self, dg_class_type):
        """Sets the dg_class_type of this ConsignmentItemDgItem.


        :param dg_class_type: The dg_class_type of this ConsignmentItemDgItem.  # noqa: E501
        :type: DgClassType
        """

        self._dg_class_type = dg_class_type

    @property
    def sub_dg_class_types(self):
        """Gets the sub_dg_class_types of this ConsignmentItemDgItem.  # noqa: E501


        :return: The sub_dg_class_types of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: list[DgClassType]
        """
        return self._sub_dg_class_types

    @sub_dg_class_types.setter
    def sub_dg_class_types(self, sub_dg_class_types):
        """Sets the sub_dg_class_types of this ConsignmentItemDgItem.


        :param sub_dg_class_types: The sub_dg_class_types of this ConsignmentItemDgItem.  # noqa: E501
        :type: list[DgClassType]
        """

        self._sub_dg_class_types = sub_dg_class_types

    @property
    def proper_shipping_name(self):
        """Gets the proper_shipping_name of this ConsignmentItemDgItem.  # noqa: E501


        :return: The proper_shipping_name of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: str
        """
        return self._proper_shipping_name

    @proper_shipping_name.setter
    def proper_shipping_name(self, proper_shipping_name):
        """Sets the proper_shipping_name of this ConsignmentItemDgItem.


        :param proper_shipping_name: The proper_shipping_name of this ConsignmentItemDgItem.  # noqa: E501
        :type: str
        """

        self._proper_shipping_name = proper_shipping_name

    @property
    def technical_or_chemical_group_names(self):
        """Gets the technical_or_chemical_group_names of this ConsignmentItemDgItem.  # noqa: E501


        :return: The technical_or_chemical_group_names of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: str
        """
        return self._technical_or_chemical_group_names

    @technical_or_chemical_group_names.setter
    def technical_or_chemical_group_names(self, technical_or_chemical_group_names):
        """Sets the technical_or_chemical_group_names of this ConsignmentItemDgItem.


        :param technical_or_chemical_group_names: The technical_or_chemical_group_names of this ConsignmentItemDgItem.  # noqa: E501
        :type: str
        """

        self._technical_or_chemical_group_names = technical_or_chemical_group_names

    @property
    def is_marine_pollutant(self):
        """Gets the is_marine_pollutant of this ConsignmentItemDgItem.  # noqa: E501


        :return: The is_marine_pollutant of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_marine_pollutant

    @is_marine_pollutant.setter
    def is_marine_pollutant(self, is_marine_pollutant):
        """Sets the is_marine_pollutant of this ConsignmentItemDgItem.


        :param is_marine_pollutant: The is_marine_pollutant of this ConsignmentItemDgItem.  # noqa: E501
        :type: bool
        """

        self._is_marine_pollutant = is_marine_pollutant

    @property
    def is_temperature_controlled(self):
        """Gets the is_temperature_controlled of this ConsignmentItemDgItem.  # noqa: E501


        :return: The is_temperature_controlled of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_temperature_controlled

    @is_temperature_controlled.setter
    def is_temperature_controlled(self, is_temperature_controlled):
        """Sets the is_temperature_controlled of this ConsignmentItemDgItem.


        :param is_temperature_controlled: The is_temperature_controlled of this ConsignmentItemDgItem.  # noqa: E501
        :type: bool
        """

        self._is_temperature_controlled = is_temperature_controlled

    @property
    def is_empty_dg_container(self):
        """Gets the is_empty_dg_container of this ConsignmentItemDgItem.  # noqa: E501


        :return: The is_empty_dg_container of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_empty_dg_container

    @is_empty_dg_container.setter
    def is_empty_dg_container(self, is_empty_dg_container):
        """Sets the is_empty_dg_container of this ConsignmentItemDgItem.


        :param is_empty_dg_container: The is_empty_dg_container of this ConsignmentItemDgItem.  # noqa: E501
        :type: bool
        """

        self._is_empty_dg_container = is_empty_dg_container

    @property
    def sub_dg_class_types_value(self):
        """Gets the sub_dg_class_types_value of this ConsignmentItemDgItem.  # noqa: E501


        :return: The sub_dg_class_types_value of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: str
        """
        return self._sub_dg_class_types_value

    @sub_dg_class_types_value.setter
    def sub_dg_class_types_value(self, sub_dg_class_types_value):
        """Sets the sub_dg_class_types_value of this ConsignmentItemDgItem.


        :param sub_dg_class_types_value: The sub_dg_class_types_value of this ConsignmentItemDgItem.  # noqa: E501
        :type: str
        """

        self._sub_dg_class_types_value = sub_dg_class_types_value

    @property
    def packing_group_string_value(self):
        """Gets the packing_group_string_value of this ConsignmentItemDgItem.  # noqa: E501


        :return: The packing_group_string_value of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: str
        """
        return self._packing_group_string_value

    @packing_group_string_value.setter
    def packing_group_string_value(self, packing_group_string_value):
        """Sets the packing_group_string_value of this ConsignmentItemDgItem.


        :param packing_group_string_value: The packing_group_string_value of this ConsignmentItemDgItem.  # noqa: E501
        :type: str
        """

        self._packing_group_string_value = packing_group_string_value

    @property
    def container_type_string_value(self):
        """Gets the container_type_string_value of this ConsignmentItemDgItem.  # noqa: E501


        :return: The container_type_string_value of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: str
        """
        return self._container_type_string_value

    @container_type_string_value.setter
    def container_type_string_value(self, container_type_string_value):
        """Sets the container_type_string_value of this ConsignmentItemDgItem.


        :param container_type_string_value: The container_type_string_value of this ConsignmentItemDgItem.  # noqa: E501
        :type: str
        """

        self._container_type_string_value = container_type_string_value

    @property
    def un_number_info(self):
        """Gets the un_number_info of this ConsignmentItemDgItem.  # noqa: E501


        :return: The un_number_info of this ConsignmentItemDgItem.  # noqa: E501
        :rtype: DgUnNumberFlat
        """
        return self._un_number_info

    @un_number_info.setter
    def un_number_info(self, un_number_info):
        """Sets the un_number_info of this ConsignmentItemDgItem.


        :param un_number_info: The un_number_info of this ConsignmentItemDgItem.  # noqa: E501
        :type: DgUnNumberFlat
        """

        self._un_number_info = un_number_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentItemDgItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentItemDgItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
