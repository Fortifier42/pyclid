# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PendingConsignmentItemV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_item_id': 'int',
        'item_type': 'ItemType',
        'name': 'str',
        'sku': 'str',
        'quantity': 'int',
        'volume': 'float',
        'height': 'float',
        'weight': 'float',
        'length': 'float',
        'width': 'float',
        'carrier_reference': 'str',
        'pallet_spaces': 'float',
        'pending_consignment_item_dg_items': 'list[PendingConsignmentItemDgItemV2]',
        'pending_consignment_item_references': 'list[PendingConsignmentItemReference]',
        'pending_consignment_item_contents': 'list[PendingConsignmentItemContentV2]'
    }

    attribute_map = {
        'company_item_id': 'companyItemId',
        'item_type': 'itemType',
        'name': 'name',
        'sku': 'sku',
        'quantity': 'quantity',
        'volume': 'volume',
        'height': 'height',
        'weight': 'weight',
        'length': 'length',
        'width': 'width',
        'carrier_reference': 'carrierReference',
        'pallet_spaces': 'palletSpaces',
        'pending_consignment_item_dg_items': 'pendingConsignmentItemDgItems',
        'pending_consignment_item_references': 'pendingConsignmentItemReferences',
        'pending_consignment_item_contents': 'pendingConsignmentItemContents'
    }

    def __init__(self, company_item_id=None, item_type=None, name=None, sku=None, quantity=None, volume=None, height=None, weight=None, length=None, width=None, carrier_reference=None, pallet_spaces=None, pending_consignment_item_dg_items=None, pending_consignment_item_references=None, pending_consignment_item_contents=None):  # noqa: E501
        """PendingConsignmentItemV2 - a model defined in Swagger"""  # noqa: E501
        self._company_item_id = None
        self._item_type = None
        self._name = None
        self._sku = None
        self._quantity = None
        self._volume = None
        self._height = None
        self._weight = None
        self._length = None
        self._width = None
        self._carrier_reference = None
        self._pallet_spaces = None
        self._pending_consignment_item_dg_items = None
        self._pending_consignment_item_references = None
        self._pending_consignment_item_contents = None
        self.discriminator = None
        if company_item_id is not None:
            self.company_item_id = company_item_id
        if item_type is not None:
            self.item_type = item_type
        if name is not None:
            self.name = name
        if sku is not None:
            self.sku = sku
        if quantity is not None:
            self.quantity = quantity
        if volume is not None:
            self.volume = volume
        if height is not None:
            self.height = height
        if weight is not None:
            self.weight = weight
        if length is not None:
            self.length = length
        if width is not None:
            self.width = width
        if carrier_reference is not None:
            self.carrier_reference = carrier_reference
        if pallet_spaces is not None:
            self.pallet_spaces = pallet_spaces
        if pending_consignment_item_dg_items is not None:
            self.pending_consignment_item_dg_items = pending_consignment_item_dg_items
        if pending_consignment_item_references is not None:
            self.pending_consignment_item_references = pending_consignment_item_references
        if pending_consignment_item_contents is not None:
            self.pending_consignment_item_contents = pending_consignment_item_contents

    @property
    def company_item_id(self):
        """Gets the company_item_id of this PendingConsignmentItemV2.  # noqa: E501

        Links this item back up to a saved item in Machship  # noqa: E501

        :return: The company_item_id of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: int
        """
        return self._company_item_id

    @company_item_id.setter
    def company_item_id(self, company_item_id):
        """Sets the company_item_id of this PendingConsignmentItemV2.

        Links this item back up to a saved item in Machship  # noqa: E501

        :param company_item_id: The company_item_id of this PendingConsignmentItemV2.  # noqa: E501
        :type: int
        """

        self._company_item_id = company_item_id

    @property
    def item_type(self):
        """Gets the item_type of this PendingConsignmentItemV2.  # noqa: E501


        :return: The item_type of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: ItemType
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this PendingConsignmentItemV2.


        :param item_type: The item_type of this PendingConsignmentItemV2.  # noqa: E501
        :type: ItemType
        """

        self._item_type = item_type

    @property
    def name(self):
        """Gets the name of this PendingConsignmentItemV2.  # noqa: E501

        Name or description of the goods you are sending  # noqa: E501

        :return: The name of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PendingConsignmentItemV2.

        Name or description of the goods you are sending  # noqa: E501

        :param name: The name of this PendingConsignmentItemV2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this PendingConsignmentItemV2.  # noqa: E501

        the SKU or code of the item you are sending  # noqa: E501

        :return: The sku of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this PendingConsignmentItemV2.

        the SKU or code of the item you are sending  # noqa: E501

        :param sku: The sku of this PendingConsignmentItemV2.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def quantity(self):
        """Gets the quantity of this PendingConsignmentItemV2.  # noqa: E501

        Number of items  # noqa: E501

        :return: The quantity of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PendingConsignmentItemV2.

        Number of items  # noqa: E501

        :param quantity: The quantity of this PendingConsignmentItemV2.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def volume(self):
        """Gets the volume of this PendingConsignmentItemV2.  # noqa: E501

        Volume of the item  # noqa: E501

        :return: The volume of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this PendingConsignmentItemV2.

        Volume of the item  # noqa: E501

        :param volume: The volume of this PendingConsignmentItemV2.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def height(self):
        """Gets the height of this PendingConsignmentItemV2.  # noqa: E501

        Height of the item in cm  # noqa: E501

        :return: The height of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PendingConsignmentItemV2.

        Height of the item in cm  # noqa: E501

        :param height: The height of this PendingConsignmentItemV2.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this PendingConsignmentItemV2.  # noqa: E501

        Weight of the item in kg  # noqa: E501

        :return: The weight of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PendingConsignmentItemV2.

        Weight of the item in kg  # noqa: E501

        :param weight: The weight of this PendingConsignmentItemV2.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def length(self):
        """Gets the length of this PendingConsignmentItemV2.  # noqa: E501

        Length of the item in cm  # noqa: E501

        :return: The length of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PendingConsignmentItemV2.

        Length of the item in cm  # noqa: E501

        :param length: The length of this PendingConsignmentItemV2.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def width(self):
        """Gets the width of this PendingConsignmentItemV2.  # noqa: E501

        Width of the item in cm  # noqa: E501

        :return: The width of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PendingConsignmentItemV2.

        Width of the item in cm  # noqa: E501

        :param width: The width of this PendingConsignmentItemV2.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def carrier_reference(self):
        """Gets the carrier_reference of this PendingConsignmentItemV2.  # noqa: E501

        The carrier reference of the item  # noqa: E501

        :return: The carrier_reference of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_reference

    @carrier_reference.setter
    def carrier_reference(self, carrier_reference):
        """Sets the carrier_reference of this PendingConsignmentItemV2.

        The carrier reference of the item  # noqa: E501

        :param carrier_reference: The carrier_reference of this PendingConsignmentItemV2.  # noqa: E501
        :type: str
        """

        self._carrier_reference = carrier_reference

    @property
    def pallet_spaces(self):
        """Gets the pallet_spaces of this PendingConsignmentItemV2.  # noqa: E501


        :return: The pallet_spaces of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: float
        """
        return self._pallet_spaces

    @pallet_spaces.setter
    def pallet_spaces(self, pallet_spaces):
        """Sets the pallet_spaces of this PendingConsignmentItemV2.


        :param pallet_spaces: The pallet_spaces of this PendingConsignmentItemV2.  # noqa: E501
        :type: float
        """

        self._pallet_spaces = pallet_spaces

    @property
    def pending_consignment_item_dg_items(self):
        """Gets the pending_consignment_item_dg_items of this PendingConsignmentItemV2.  # noqa: E501


        :return: The pending_consignment_item_dg_items of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: list[PendingConsignmentItemDgItemV2]
        """
        return self._pending_consignment_item_dg_items

    @pending_consignment_item_dg_items.setter
    def pending_consignment_item_dg_items(self, pending_consignment_item_dg_items):
        """Sets the pending_consignment_item_dg_items of this PendingConsignmentItemV2.


        :param pending_consignment_item_dg_items: The pending_consignment_item_dg_items of this PendingConsignmentItemV2.  # noqa: E501
        :type: list[PendingConsignmentItemDgItemV2]
        """

        self._pending_consignment_item_dg_items = pending_consignment_item_dg_items

    @property
    def pending_consignment_item_references(self):
        """Gets the pending_consignment_item_references of this PendingConsignmentItemV2.  # noqa: E501


        :return: The pending_consignment_item_references of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: list[PendingConsignmentItemReference]
        """
        return self._pending_consignment_item_references

    @pending_consignment_item_references.setter
    def pending_consignment_item_references(self, pending_consignment_item_references):
        """Sets the pending_consignment_item_references of this PendingConsignmentItemV2.


        :param pending_consignment_item_references: The pending_consignment_item_references of this PendingConsignmentItemV2.  # noqa: E501
        :type: list[PendingConsignmentItemReference]
        """

        self._pending_consignment_item_references = pending_consignment_item_references

    @property
    def pending_consignment_item_contents(self):
        """Gets the pending_consignment_item_contents of this PendingConsignmentItemV2.  # noqa: E501


        :return: The pending_consignment_item_contents of this PendingConsignmentItemV2.  # noqa: E501
        :rtype: list[PendingConsignmentItemContentV2]
        """
        return self._pending_consignment_item_contents

    @pending_consignment_item_contents.setter
    def pending_consignment_item_contents(self, pending_consignment_item_contents):
        """Sets the pending_consignment_item_contents of this PendingConsignmentItemV2.


        :param pending_consignment_item_contents: The pending_consignment_item_contents of this PendingConsignmentItemV2.  # noqa: E501
        :type: list[PendingConsignmentItemContentV2]
        """

        self._pending_consignment_item_contents = pending_consignment_item_contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PendingConsignmentItemV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingConsignmentItemV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
