# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sell_prices_cleared': 'bool',
        'consignment_carrier_surcharges_cost_price': 'float',
        'consignment_carrier_surcharges_sell_price': 'float',
        'consignment_carrier_surcharges_fuel_exempt_cost_price': 'float',
        'consignment_carrier_surcharges_fuel_exempt_sell_price': 'float',
        'total_consignment_carrier_surcharges_cost_price': 'float',
        'total_consignment_carrier_surcharges_sell_price': 'float',
        'total_sell_price': 'float',
        'total_cost_price': 'float',
        'total_base_sell_price': 'float',
        'total_base_cost_price': 'float',
        'total_tax_sell_price': 'float',
        'total_tax_cost_price': 'float',
        'cost_fuel_levy_price': 'float',
        'sell_fuel_levy_price': 'float',
        'consignment_route_cost_price': 'float',
        'consignment_route_sell_price': 'float',
        'total_cost_before_tax': 'float',
        'total_sell_before_tax': 'float'
    }

    attribute_map = {
        'sell_prices_cleared': 'sellPricesCleared',
        'consignment_carrier_surcharges_cost_price': 'consignmentCarrierSurchargesCostPrice',
        'consignment_carrier_surcharges_sell_price': 'consignmentCarrierSurchargesSellPrice',
        'consignment_carrier_surcharges_fuel_exempt_cost_price': 'consignmentCarrierSurchargesFuelExemptCostPrice',
        'consignment_carrier_surcharges_fuel_exempt_sell_price': 'consignmentCarrierSurchargesFuelExemptSellPrice',
        'total_consignment_carrier_surcharges_cost_price': 'totalConsignmentCarrierSurchargesCostPrice',
        'total_consignment_carrier_surcharges_sell_price': 'totalConsignmentCarrierSurchargesSellPrice',
        'total_sell_price': 'totalSellPrice',
        'total_cost_price': 'totalCostPrice',
        'total_base_sell_price': 'totalBaseSellPrice',
        'total_base_cost_price': 'totalBaseCostPrice',
        'total_tax_sell_price': 'totalTaxSellPrice',
        'total_tax_cost_price': 'totalTaxCostPrice',
        'cost_fuel_levy_price': 'costFuelLevyPrice',
        'sell_fuel_levy_price': 'sellFuelLevyPrice',
        'consignment_route_cost_price': 'consignmentRouteCostPrice',
        'consignment_route_sell_price': 'consignmentRouteSellPrice',
        'total_cost_before_tax': 'totalCostBeforeTax',
        'total_sell_before_tax': 'totalSellBeforeTax'
    }

    def __init__(self, sell_prices_cleared=None, consignment_carrier_surcharges_cost_price=None, consignment_carrier_surcharges_sell_price=None, consignment_carrier_surcharges_fuel_exempt_cost_price=None, consignment_carrier_surcharges_fuel_exempt_sell_price=None, total_consignment_carrier_surcharges_cost_price=None, total_consignment_carrier_surcharges_sell_price=None, total_sell_price=None, total_cost_price=None, total_base_sell_price=None, total_base_cost_price=None, total_tax_sell_price=None, total_tax_cost_price=None, cost_fuel_levy_price=None, sell_fuel_levy_price=None, consignment_route_cost_price=None, consignment_route_sell_price=None, total_cost_before_tax=None, total_sell_before_tax=None):  # noqa: E501
        """ConsignmentTotal - a model defined in Swagger"""  # noqa: E501
        self._sell_prices_cleared = None
        self._consignment_carrier_surcharges_cost_price = None
        self._consignment_carrier_surcharges_sell_price = None
        self._consignment_carrier_surcharges_fuel_exempt_cost_price = None
        self._consignment_carrier_surcharges_fuel_exempt_sell_price = None
        self._total_consignment_carrier_surcharges_cost_price = None
        self._total_consignment_carrier_surcharges_sell_price = None
        self._total_sell_price = None
        self._total_cost_price = None
        self._total_base_sell_price = None
        self._total_base_cost_price = None
        self._total_tax_sell_price = None
        self._total_tax_cost_price = None
        self._cost_fuel_levy_price = None
        self._sell_fuel_levy_price = None
        self._consignment_route_cost_price = None
        self._consignment_route_sell_price = None
        self._total_cost_before_tax = None
        self._total_sell_before_tax = None
        self.discriminator = None
        if sell_prices_cleared is not None:
            self.sell_prices_cleared = sell_prices_cleared
        if consignment_carrier_surcharges_cost_price is not None:
            self.consignment_carrier_surcharges_cost_price = consignment_carrier_surcharges_cost_price
        if consignment_carrier_surcharges_sell_price is not None:
            self.consignment_carrier_surcharges_sell_price = consignment_carrier_surcharges_sell_price
        if consignment_carrier_surcharges_fuel_exempt_cost_price is not None:
            self.consignment_carrier_surcharges_fuel_exempt_cost_price = consignment_carrier_surcharges_fuel_exempt_cost_price
        if consignment_carrier_surcharges_fuel_exempt_sell_price is not None:
            self.consignment_carrier_surcharges_fuel_exempt_sell_price = consignment_carrier_surcharges_fuel_exempt_sell_price
        if total_consignment_carrier_surcharges_cost_price is not None:
            self.total_consignment_carrier_surcharges_cost_price = total_consignment_carrier_surcharges_cost_price
        if total_consignment_carrier_surcharges_sell_price is not None:
            self.total_consignment_carrier_surcharges_sell_price = total_consignment_carrier_surcharges_sell_price
        if total_sell_price is not None:
            self.total_sell_price = total_sell_price
        if total_cost_price is not None:
            self.total_cost_price = total_cost_price
        if total_base_sell_price is not None:
            self.total_base_sell_price = total_base_sell_price
        if total_base_cost_price is not None:
            self.total_base_cost_price = total_base_cost_price
        if total_tax_sell_price is not None:
            self.total_tax_sell_price = total_tax_sell_price
        if total_tax_cost_price is not None:
            self.total_tax_cost_price = total_tax_cost_price
        if cost_fuel_levy_price is not None:
            self.cost_fuel_levy_price = cost_fuel_levy_price
        if sell_fuel_levy_price is not None:
            self.sell_fuel_levy_price = sell_fuel_levy_price
        if consignment_route_cost_price is not None:
            self.consignment_route_cost_price = consignment_route_cost_price
        if consignment_route_sell_price is not None:
            self.consignment_route_sell_price = consignment_route_sell_price
        if total_cost_before_tax is not None:
            self.total_cost_before_tax = total_cost_before_tax
        if total_sell_before_tax is not None:
            self.total_sell_before_tax = total_sell_before_tax

    @property
    def sell_prices_cleared(self):
        """Gets the sell_prices_cleared of this ConsignmentTotal.  # noqa: E501


        :return: The sell_prices_cleared of this ConsignmentTotal.  # noqa: E501
        :rtype: bool
        """
        return self._sell_prices_cleared

    @sell_prices_cleared.setter
    def sell_prices_cleared(self, sell_prices_cleared):
        """Sets the sell_prices_cleared of this ConsignmentTotal.


        :param sell_prices_cleared: The sell_prices_cleared of this ConsignmentTotal.  # noqa: E501
        :type: bool
        """

        self._sell_prices_cleared = sell_prices_cleared

    @property
    def consignment_carrier_surcharges_cost_price(self):
        """Gets the consignment_carrier_surcharges_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The consignment_carrier_surcharges_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._consignment_carrier_surcharges_cost_price

    @consignment_carrier_surcharges_cost_price.setter
    def consignment_carrier_surcharges_cost_price(self, consignment_carrier_surcharges_cost_price):
        """Sets the consignment_carrier_surcharges_cost_price of this ConsignmentTotal.


        :param consignment_carrier_surcharges_cost_price: The consignment_carrier_surcharges_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._consignment_carrier_surcharges_cost_price = consignment_carrier_surcharges_cost_price

    @property
    def consignment_carrier_surcharges_sell_price(self):
        """Gets the consignment_carrier_surcharges_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The consignment_carrier_surcharges_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._consignment_carrier_surcharges_sell_price

    @consignment_carrier_surcharges_sell_price.setter
    def consignment_carrier_surcharges_sell_price(self, consignment_carrier_surcharges_sell_price):
        """Sets the consignment_carrier_surcharges_sell_price of this ConsignmentTotal.


        :param consignment_carrier_surcharges_sell_price: The consignment_carrier_surcharges_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._consignment_carrier_surcharges_sell_price = consignment_carrier_surcharges_sell_price

    @property
    def consignment_carrier_surcharges_fuel_exempt_cost_price(self):
        """Gets the consignment_carrier_surcharges_fuel_exempt_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The consignment_carrier_surcharges_fuel_exempt_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._consignment_carrier_surcharges_fuel_exempt_cost_price

    @consignment_carrier_surcharges_fuel_exempt_cost_price.setter
    def consignment_carrier_surcharges_fuel_exempt_cost_price(self, consignment_carrier_surcharges_fuel_exempt_cost_price):
        """Sets the consignment_carrier_surcharges_fuel_exempt_cost_price of this ConsignmentTotal.


        :param consignment_carrier_surcharges_fuel_exempt_cost_price: The consignment_carrier_surcharges_fuel_exempt_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._consignment_carrier_surcharges_fuel_exempt_cost_price = consignment_carrier_surcharges_fuel_exempt_cost_price

    @property
    def consignment_carrier_surcharges_fuel_exempt_sell_price(self):
        """Gets the consignment_carrier_surcharges_fuel_exempt_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The consignment_carrier_surcharges_fuel_exempt_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._consignment_carrier_surcharges_fuel_exempt_sell_price

    @consignment_carrier_surcharges_fuel_exempt_sell_price.setter
    def consignment_carrier_surcharges_fuel_exempt_sell_price(self, consignment_carrier_surcharges_fuel_exempt_sell_price):
        """Sets the consignment_carrier_surcharges_fuel_exempt_sell_price of this ConsignmentTotal.


        :param consignment_carrier_surcharges_fuel_exempt_sell_price: The consignment_carrier_surcharges_fuel_exempt_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._consignment_carrier_surcharges_fuel_exempt_sell_price = consignment_carrier_surcharges_fuel_exempt_sell_price

    @property
    def total_consignment_carrier_surcharges_cost_price(self):
        """Gets the total_consignment_carrier_surcharges_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_consignment_carrier_surcharges_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_consignment_carrier_surcharges_cost_price

    @total_consignment_carrier_surcharges_cost_price.setter
    def total_consignment_carrier_surcharges_cost_price(self, total_consignment_carrier_surcharges_cost_price):
        """Sets the total_consignment_carrier_surcharges_cost_price of this ConsignmentTotal.


        :param total_consignment_carrier_surcharges_cost_price: The total_consignment_carrier_surcharges_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_consignment_carrier_surcharges_cost_price = total_consignment_carrier_surcharges_cost_price

    @property
    def total_consignment_carrier_surcharges_sell_price(self):
        """Gets the total_consignment_carrier_surcharges_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_consignment_carrier_surcharges_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_consignment_carrier_surcharges_sell_price

    @total_consignment_carrier_surcharges_sell_price.setter
    def total_consignment_carrier_surcharges_sell_price(self, total_consignment_carrier_surcharges_sell_price):
        """Sets the total_consignment_carrier_surcharges_sell_price of this ConsignmentTotal.


        :param total_consignment_carrier_surcharges_sell_price: The total_consignment_carrier_surcharges_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_consignment_carrier_surcharges_sell_price = total_consignment_carrier_surcharges_sell_price

    @property
    def total_sell_price(self):
        """Gets the total_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_sell_price

    @total_sell_price.setter
    def total_sell_price(self, total_sell_price):
        """Sets the total_sell_price of this ConsignmentTotal.


        :param total_sell_price: The total_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_sell_price = total_sell_price

    @property
    def total_cost_price(self):
        """Gets the total_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_cost_price

    @total_cost_price.setter
    def total_cost_price(self, total_cost_price):
        """Sets the total_cost_price of this ConsignmentTotal.


        :param total_cost_price: The total_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_cost_price = total_cost_price

    @property
    def total_base_sell_price(self):
        """Gets the total_base_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_base_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_base_sell_price

    @total_base_sell_price.setter
    def total_base_sell_price(self, total_base_sell_price):
        """Sets the total_base_sell_price of this ConsignmentTotal.


        :param total_base_sell_price: The total_base_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_base_sell_price = total_base_sell_price

    @property
    def total_base_cost_price(self):
        """Gets the total_base_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_base_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_base_cost_price

    @total_base_cost_price.setter
    def total_base_cost_price(self, total_base_cost_price):
        """Sets the total_base_cost_price of this ConsignmentTotal.


        :param total_base_cost_price: The total_base_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_base_cost_price = total_base_cost_price

    @property
    def total_tax_sell_price(self):
        """Gets the total_tax_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_tax_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_sell_price

    @total_tax_sell_price.setter
    def total_tax_sell_price(self, total_tax_sell_price):
        """Sets the total_tax_sell_price of this ConsignmentTotal.


        :param total_tax_sell_price: The total_tax_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_tax_sell_price = total_tax_sell_price

    @property
    def total_tax_cost_price(self):
        """Gets the total_tax_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The total_tax_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_cost_price

    @total_tax_cost_price.setter
    def total_tax_cost_price(self, total_tax_cost_price):
        """Sets the total_tax_cost_price of this ConsignmentTotal.


        :param total_tax_cost_price: The total_tax_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_tax_cost_price = total_tax_cost_price

    @property
    def cost_fuel_levy_price(self):
        """Gets the cost_fuel_levy_price of this ConsignmentTotal.  # noqa: E501


        :return: The cost_fuel_levy_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._cost_fuel_levy_price

    @cost_fuel_levy_price.setter
    def cost_fuel_levy_price(self, cost_fuel_levy_price):
        """Sets the cost_fuel_levy_price of this ConsignmentTotal.


        :param cost_fuel_levy_price: The cost_fuel_levy_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._cost_fuel_levy_price = cost_fuel_levy_price

    @property
    def sell_fuel_levy_price(self):
        """Gets the sell_fuel_levy_price of this ConsignmentTotal.  # noqa: E501


        :return: The sell_fuel_levy_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._sell_fuel_levy_price

    @sell_fuel_levy_price.setter
    def sell_fuel_levy_price(self, sell_fuel_levy_price):
        """Sets the sell_fuel_levy_price of this ConsignmentTotal.


        :param sell_fuel_levy_price: The sell_fuel_levy_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._sell_fuel_levy_price = sell_fuel_levy_price

    @property
    def consignment_route_cost_price(self):
        """Gets the consignment_route_cost_price of this ConsignmentTotal.  # noqa: E501


        :return: The consignment_route_cost_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._consignment_route_cost_price

    @consignment_route_cost_price.setter
    def consignment_route_cost_price(self, consignment_route_cost_price):
        """Sets the consignment_route_cost_price of this ConsignmentTotal.


        :param consignment_route_cost_price: The consignment_route_cost_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._consignment_route_cost_price = consignment_route_cost_price

    @property
    def consignment_route_sell_price(self):
        """Gets the consignment_route_sell_price of this ConsignmentTotal.  # noqa: E501


        :return: The consignment_route_sell_price of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._consignment_route_sell_price

    @consignment_route_sell_price.setter
    def consignment_route_sell_price(self, consignment_route_sell_price):
        """Sets the consignment_route_sell_price of this ConsignmentTotal.


        :param consignment_route_sell_price: The consignment_route_sell_price of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._consignment_route_sell_price = consignment_route_sell_price

    @property
    def total_cost_before_tax(self):
        """Gets the total_cost_before_tax of this ConsignmentTotal.  # noqa: E501


        :return: The total_cost_before_tax of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_cost_before_tax

    @total_cost_before_tax.setter
    def total_cost_before_tax(self, total_cost_before_tax):
        """Sets the total_cost_before_tax of this ConsignmentTotal.


        :param total_cost_before_tax: The total_cost_before_tax of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_cost_before_tax = total_cost_before_tax

    @property
    def total_sell_before_tax(self):
        """Gets the total_sell_before_tax of this ConsignmentTotal.  # noqa: E501


        :return: The total_sell_before_tax of this ConsignmentTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_sell_before_tax

    @total_sell_before_tax.setter
    def total_sell_before_tax(self, total_sell_before_tax):
        """Sets the total_sell_before_tax of this ConsignmentTotal.


        :param total_sell_before_tax: The total_sell_before_tax of this ConsignmentTotal.  # noqa: E501
        :type: float
        """

        self._total_sell_before_tax = total_sell_before_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
