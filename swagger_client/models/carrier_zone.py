# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_id': 'int',
        'carrier': 'Carrier',
        'name': 'str',
        'abbreviation': 'str',
        'parent_carrier_zone_id': 'int',
        'parent_carrier_zone': 'CarrierZone',
        'carrier_zone_set_id': 'int',
        'carrier_zone_set': 'CarrierZoneSetLite',
        'carrier_zone_locations': 'list[CarrierZoneLocation]',
        'insertion_guid': 'str',
        'display_name': 'str',
        'is_from_zone': 'bool',
        'is_to_zone': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'carrier_id': 'carrierId',
        'carrier': 'carrier',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'parent_carrier_zone_id': 'parentCarrierZoneId',
        'parent_carrier_zone': 'parentCarrierZone',
        'carrier_zone_set_id': 'carrierZoneSetId',
        'carrier_zone_set': 'carrierZoneSet',
        'carrier_zone_locations': 'carrierZoneLocations',
        'insertion_guid': 'insertionGuid',
        'display_name': 'displayName',
        'is_from_zone': 'isFromZone',
        'is_to_zone': 'isToZone'
    }

    def __init__(self, id=None, carrier_id=None, carrier=None, name=None, abbreviation=None, parent_carrier_zone_id=None, parent_carrier_zone=None, carrier_zone_set_id=None, carrier_zone_set=None, carrier_zone_locations=None, insertion_guid=None, display_name=None, is_from_zone=None, is_to_zone=None):  # noqa: E501
        """CarrierZone - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_id = None
        self._carrier = None
        self._name = None
        self._abbreviation = None
        self._parent_carrier_zone_id = None
        self._parent_carrier_zone = None
        self._carrier_zone_set_id = None
        self._carrier_zone_set = None
        self._carrier_zone_locations = None
        self._insertion_guid = None
        self._display_name = None
        self._is_from_zone = None
        self._is_to_zone = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier is not None:
            self.carrier = carrier
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if parent_carrier_zone_id is not None:
            self.parent_carrier_zone_id = parent_carrier_zone_id
        if parent_carrier_zone is not None:
            self.parent_carrier_zone = parent_carrier_zone
        if carrier_zone_set_id is not None:
            self.carrier_zone_set_id = carrier_zone_set_id
        if carrier_zone_set is not None:
            self.carrier_zone_set = carrier_zone_set
        if carrier_zone_locations is not None:
            self.carrier_zone_locations = carrier_zone_locations
        if insertion_guid is not None:
            self.insertion_guid = insertion_guid
        if display_name is not None:
            self.display_name = display_name
        if is_from_zone is not None:
            self.is_from_zone = is_from_zone
        if is_to_zone is not None:
            self.is_to_zone = is_to_zone

    @property
    def id(self):
        """Gets the id of this CarrierZone.  # noqa: E501


        :return: The id of this CarrierZone.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierZone.


        :param id: The id of this CarrierZone.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CarrierZone.  # noqa: E501


        :return: The carrier_id of this CarrierZone.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CarrierZone.


        :param carrier_id: The carrier_id of this CarrierZone.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier(self):
        """Gets the carrier of this CarrierZone.  # noqa: E501


        :return: The carrier of this CarrierZone.  # noqa: E501
        :rtype: Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CarrierZone.


        :param carrier: The carrier of this CarrierZone.  # noqa: E501
        :type: Carrier
        """

        self._carrier = carrier

    @property
    def name(self):
        """Gets the name of this CarrierZone.  # noqa: E501


        :return: The name of this CarrierZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierZone.


        :param name: The name of this CarrierZone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CarrierZone.  # noqa: E501


        :return: The abbreviation of this CarrierZone.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CarrierZone.


        :param abbreviation: The abbreviation of this CarrierZone.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def parent_carrier_zone_id(self):
        """Gets the parent_carrier_zone_id of this CarrierZone.  # noqa: E501


        :return: The parent_carrier_zone_id of this CarrierZone.  # noqa: E501
        :rtype: int
        """
        return self._parent_carrier_zone_id

    @parent_carrier_zone_id.setter
    def parent_carrier_zone_id(self, parent_carrier_zone_id):
        """Sets the parent_carrier_zone_id of this CarrierZone.


        :param parent_carrier_zone_id: The parent_carrier_zone_id of this CarrierZone.  # noqa: E501
        :type: int
        """

        self._parent_carrier_zone_id = parent_carrier_zone_id

    @property
    def parent_carrier_zone(self):
        """Gets the parent_carrier_zone of this CarrierZone.  # noqa: E501


        :return: The parent_carrier_zone of this CarrierZone.  # noqa: E501
        :rtype: CarrierZone
        """
        return self._parent_carrier_zone

    @parent_carrier_zone.setter
    def parent_carrier_zone(self, parent_carrier_zone):
        """Sets the parent_carrier_zone of this CarrierZone.


        :param parent_carrier_zone: The parent_carrier_zone of this CarrierZone.  # noqa: E501
        :type: CarrierZone
        """

        self._parent_carrier_zone = parent_carrier_zone

    @property
    def carrier_zone_set_id(self):
        """Gets the carrier_zone_set_id of this CarrierZone.  # noqa: E501


        :return: The carrier_zone_set_id of this CarrierZone.  # noqa: E501
        :rtype: int
        """
        return self._carrier_zone_set_id

    @carrier_zone_set_id.setter
    def carrier_zone_set_id(self, carrier_zone_set_id):
        """Sets the carrier_zone_set_id of this CarrierZone.


        :param carrier_zone_set_id: The carrier_zone_set_id of this CarrierZone.  # noqa: E501
        :type: int
        """

        self._carrier_zone_set_id = carrier_zone_set_id

    @property
    def carrier_zone_set(self):
        """Gets the carrier_zone_set of this CarrierZone.  # noqa: E501


        :return: The carrier_zone_set of this CarrierZone.  # noqa: E501
        :rtype: CarrierZoneSetLite
        """
        return self._carrier_zone_set

    @carrier_zone_set.setter
    def carrier_zone_set(self, carrier_zone_set):
        """Sets the carrier_zone_set of this CarrierZone.


        :param carrier_zone_set: The carrier_zone_set of this CarrierZone.  # noqa: E501
        :type: CarrierZoneSetLite
        """

        self._carrier_zone_set = carrier_zone_set

    @property
    def carrier_zone_locations(self):
        """Gets the carrier_zone_locations of this CarrierZone.  # noqa: E501


        :return: The carrier_zone_locations of this CarrierZone.  # noqa: E501
        :rtype: list[CarrierZoneLocation]
        """
        return self._carrier_zone_locations

    @carrier_zone_locations.setter
    def carrier_zone_locations(self, carrier_zone_locations):
        """Sets the carrier_zone_locations of this CarrierZone.


        :param carrier_zone_locations: The carrier_zone_locations of this CarrierZone.  # noqa: E501
        :type: list[CarrierZoneLocation]
        """

        self._carrier_zone_locations = carrier_zone_locations

    @property
    def insertion_guid(self):
        """Gets the insertion_guid of this CarrierZone.  # noqa: E501


        :return: The insertion_guid of this CarrierZone.  # noqa: E501
        :rtype: str
        """
        return self._insertion_guid

    @insertion_guid.setter
    def insertion_guid(self, insertion_guid):
        """Sets the insertion_guid of this CarrierZone.


        :param insertion_guid: The insertion_guid of this CarrierZone.  # noqa: E501
        :type: str
        """

        self._insertion_guid = insertion_guid

    @property
    def display_name(self):
        """Gets the display_name of this CarrierZone.  # noqa: E501


        :return: The display_name of this CarrierZone.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CarrierZone.


        :param display_name: The display_name of this CarrierZone.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_from_zone(self):
        """Gets the is_from_zone of this CarrierZone.  # noqa: E501


        :return: The is_from_zone of this CarrierZone.  # noqa: E501
        :rtype: bool
        """
        return self._is_from_zone

    @is_from_zone.setter
    def is_from_zone(self, is_from_zone):
        """Sets the is_from_zone of this CarrierZone.


        :param is_from_zone: The is_from_zone of this CarrierZone.  # noqa: E501
        :type: bool
        """

        self._is_from_zone = is_from_zone

    @property
    def is_to_zone(self):
        """Gets the is_to_zone of this CarrierZone.  # noqa: E501


        :return: The is_to_zone of this CarrierZone.  # noqa: E501
        :rtype: bool
        """
        return self._is_to_zone

    @is_to_zone.setter
    def is_to_zone(self, is_to_zone):
        """Sets the is_to_zone of this CarrierZone.


        :param is_to_zone: The is_to_zone of this CarrierZone.  # noqa: E501
        :type: bool
        """

        self._is_to_zone = is_to_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
