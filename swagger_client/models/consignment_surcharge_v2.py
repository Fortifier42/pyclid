# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentSurchargeV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost_price': 'float',
        'sell_price': 'float',
        'quantity': 'int',
        'name': 'str'
    }

    attribute_map = {
        'cost_price': 'costPrice',
        'sell_price': 'sellPrice',
        'quantity': 'quantity',
        'name': 'name'
    }

    def __init__(self, cost_price=None, sell_price=None, quantity=None, name=None):  # noqa: E501
        """ConsignmentSurchargeV2 - a model defined in Swagger"""  # noqa: E501
        self._cost_price = None
        self._sell_price = None
        self._quantity = None
        self._name = None
        self.discriminator = None
        if cost_price is not None:
            self.cost_price = cost_price
        if sell_price is not None:
            self.sell_price = sell_price
        if quantity is not None:
            self.quantity = quantity
        if name is not None:
            self.name = name

    @property
    def cost_price(self):
        """Gets the cost_price of this ConsignmentSurchargeV2.  # noqa: E501

        Cost Price of the surcharge  # noqa: E501

        :return: The cost_price of this ConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this ConsignmentSurchargeV2.

        Cost Price of the surcharge  # noqa: E501

        :param cost_price: The cost_price of this ConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def sell_price(self):
        """Gets the sell_price of this ConsignmentSurchargeV2.  # noqa: E501

        Sell Price of the surcharge  # noqa: E501

        :return: The sell_price of this ConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._sell_price

    @sell_price.setter
    def sell_price(self, sell_price):
        """Sets the sell_price of this ConsignmentSurchargeV2.

        Sell Price of the surcharge  # noqa: E501

        :param sell_price: The sell_price of this ConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._sell_price = sell_price

    @property
    def quantity(self):
        """Gets the quantity of this ConsignmentSurchargeV2.  # noqa: E501

        How many times this surcharge is being applied. Quantity has already been applied to the CostPrice and SellPrice  # noqa: E501

        :return: The quantity of this ConsignmentSurchargeV2.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ConsignmentSurchargeV2.

        How many times this surcharge is being applied. Quantity has already been applied to the CostPrice and SellPrice  # noqa: E501

        :param quantity: The quantity of this ConsignmentSurchargeV2.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def name(self):
        """Gets the name of this ConsignmentSurchargeV2.  # noqa: E501

        Surcharge Name  # noqa: E501

        :return: The name of this ConsignmentSurchargeV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsignmentSurchargeV2.

        Surcharge Name  # noqa: E501

        :param name: The name of this ConsignmentSurchargeV2.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentSurchargeV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentSurchargeV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
