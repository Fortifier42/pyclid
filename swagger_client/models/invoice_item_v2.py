# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceItemV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'quantity': 'float',
        'total_tax': 'float',
        'total': 'float',
        'consignment_id': 'int',
        'company_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'quantity': 'quantity',
        'total_tax': 'totalTax',
        'total': 'total',
        'consignment_id': 'consignmentId',
        'company_id': 'companyId'
    }

    def __init__(self, id=None, description=None, quantity=None, total_tax=None, total=None, consignment_id=None, company_id=None):  # noqa: E501
        """InvoiceItemV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._quantity = None
        self._total_tax = None
        self._total = None
        self._consignment_id = None
        self._company_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if quantity is not None:
            self.quantity = quantity
        if total_tax is not None:
            self.total_tax = total_tax
        if total is not None:
            self.total = total
        if consignment_id is not None:
            self.consignment_id = consignment_id
        if company_id is not None:
            self.company_id = company_id

    @property
    def id(self):
        """Gets the id of this InvoiceItemV2.  # noqa: E501


        :return: The id of this InvoiceItemV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceItemV2.


        :param id: The id of this InvoiceItemV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this InvoiceItemV2.  # noqa: E501


        :return: The description of this InvoiceItemV2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItemV2.


        :param description: The description of this InvoiceItemV2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItemV2.  # noqa: E501


        :return: The quantity of this InvoiceItemV2.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItemV2.


        :param quantity: The quantity of this InvoiceItemV2.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def total_tax(self):
        """Gets the total_tax of this InvoiceItemV2.  # noqa: E501


        :return: The total_tax of this InvoiceItemV2.  # noqa: E501
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this InvoiceItemV2.


        :param total_tax: The total_tax of this InvoiceItemV2.  # noqa: E501
        :type: float
        """

        self._total_tax = total_tax

    @property
    def total(self):
        """Gets the total of this InvoiceItemV2.  # noqa: E501


        :return: The total of this InvoiceItemV2.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InvoiceItemV2.


        :param total: The total of this InvoiceItemV2.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def consignment_id(self):
        """Gets the consignment_id of this InvoiceItemV2.  # noqa: E501


        :return: The consignment_id of this InvoiceItemV2.  # noqa: E501
        :rtype: int
        """
        return self._consignment_id

    @consignment_id.setter
    def consignment_id(self, consignment_id):
        """Sets the consignment_id of this InvoiceItemV2.


        :param consignment_id: The consignment_id of this InvoiceItemV2.  # noqa: E501
        :type: int
        """

        self._consignment_id = consignment_id

    @property
    def company_id(self):
        """Gets the company_id of this InvoiceItemV2.  # noqa: E501


        :return: The company_id of this InvoiceItemV2.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this InvoiceItemV2.


        :param company_id: The company_id of this InvoiceItemV2.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceItemV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceItemV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
