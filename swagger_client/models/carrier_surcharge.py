# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierSurcharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company_id': 'int',
        'company': 'CompanyLite',
        'surcharge_id': 'int',
        'surcharge': 'Surcharge',
        'carrier_id': 'int',
        'carrier': 'CarrierLite',
        'carrier_service_id': 'int',
        'carrier_service': 'CarrierServiceLite',
        'carrier_account_id': 'int',
        'carrier_account': 'BaseCarrierAccount',
        'carrier_services': 'list[CarrierSurchargeService]',
        'carrier_accounts': 'list[CarrierSurchargeAccount]',
        'exclude': 'bool',
        'price': 'float',
        'hard_set_sell_price': 'float',
        'percentage_of_sell_price': 'float',
        'markup': 'float',
        'price_type': 'SurchargePriceType',
        'override_pricing': 'bool',
        'cost_minimum': 'float',
        'sell_minimum': 'float',
        'sell_ratecard_id': 'int',
        'sell_ratecard': 'RatecardLite',
        'cost_ratecard_id': 'int',
        'cost_ratecard': 'RatecardLite',
        'markup_type': 'MarkupType'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'company': 'company',
        'surcharge_id': 'surchargeId',
        'surcharge': 'surcharge',
        'carrier_id': 'carrierId',
        'carrier': 'carrier',
        'carrier_service_id': 'carrierServiceId',
        'carrier_service': 'carrierService',
        'carrier_account_id': 'carrierAccountId',
        'carrier_account': 'carrierAccount',
        'carrier_services': 'carrierServices',
        'carrier_accounts': 'carrierAccounts',
        'exclude': 'exclude',
        'price': 'price',
        'hard_set_sell_price': 'hardSetSellPrice',
        'percentage_of_sell_price': 'percentageOfSellPrice',
        'markup': 'markup',
        'price_type': 'priceType',
        'override_pricing': 'overridePricing',
        'cost_minimum': 'costMinimum',
        'sell_minimum': 'sellMinimum',
        'sell_ratecard_id': 'sellRatecardId',
        'sell_ratecard': 'sellRatecard',
        'cost_ratecard_id': 'costRatecardId',
        'cost_ratecard': 'costRatecard',
        'markup_type': 'markupType'
    }

    def __init__(self, id=None, company_id=None, company=None, surcharge_id=None, surcharge=None, carrier_id=None, carrier=None, carrier_service_id=None, carrier_service=None, carrier_account_id=None, carrier_account=None, carrier_services=None, carrier_accounts=None, exclude=None, price=None, hard_set_sell_price=None, percentage_of_sell_price=None, markup=None, price_type=None, override_pricing=None, cost_minimum=None, sell_minimum=None, sell_ratecard_id=None, sell_ratecard=None, cost_ratecard_id=None, cost_ratecard=None, markup_type=None):  # noqa: E501
        """CarrierSurcharge - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._company = None
        self._surcharge_id = None
        self._surcharge = None
        self._carrier_id = None
        self._carrier = None
        self._carrier_service_id = None
        self._carrier_service = None
        self._carrier_account_id = None
        self._carrier_account = None
        self._carrier_services = None
        self._carrier_accounts = None
        self._exclude = None
        self._price = None
        self._hard_set_sell_price = None
        self._percentage_of_sell_price = None
        self._markup = None
        self._price_type = None
        self._override_pricing = None
        self._cost_minimum = None
        self._sell_minimum = None
        self._sell_ratecard_id = None
        self._sell_ratecard = None
        self._cost_ratecard_id = None
        self._cost_ratecard = None
        self._markup_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.company_id = company_id
        if company is not None:
            self.company = company
        if surcharge_id is not None:
            self.surcharge_id = surcharge_id
        if surcharge is not None:
            self.surcharge = surcharge
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier is not None:
            self.carrier = carrier
        if carrier_service_id is not None:
            self.carrier_service_id = carrier_service_id
        if carrier_service is not None:
            self.carrier_service = carrier_service
        if carrier_account_id is not None:
            self.carrier_account_id = carrier_account_id
        if carrier_account is not None:
            self.carrier_account = carrier_account
        if carrier_services is not None:
            self.carrier_services = carrier_services
        if carrier_accounts is not None:
            self.carrier_accounts = carrier_accounts
        if exclude is not None:
            self.exclude = exclude
        if price is not None:
            self.price = price
        if hard_set_sell_price is not None:
            self.hard_set_sell_price = hard_set_sell_price
        if percentage_of_sell_price is not None:
            self.percentage_of_sell_price = percentage_of_sell_price
        if markup is not None:
            self.markup = markup
        if price_type is not None:
            self.price_type = price_type
        if override_pricing is not None:
            self.override_pricing = override_pricing
        if cost_minimum is not None:
            self.cost_minimum = cost_minimum
        if sell_minimum is not None:
            self.sell_minimum = sell_minimum
        if sell_ratecard_id is not None:
            self.sell_ratecard_id = sell_ratecard_id
        if sell_ratecard is not None:
            self.sell_ratecard = sell_ratecard
        if cost_ratecard_id is not None:
            self.cost_ratecard_id = cost_ratecard_id
        if cost_ratecard is not None:
            self.cost_ratecard = cost_ratecard
        if markup_type is not None:
            self.markup_type = markup_type

    @property
    def id(self):
        """Gets the id of this CarrierSurcharge.  # noqa: E501


        :return: The id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierSurcharge.


        :param id: The id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this CarrierSurcharge.  # noqa: E501


        :return: The company_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CarrierSurcharge.


        :param company_id: The company_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def company(self):
        """Gets the company of this CarrierSurcharge.  # noqa: E501


        :return: The company of this CarrierSurcharge.  # noqa: E501
        :rtype: CompanyLite
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CarrierSurcharge.


        :param company: The company of this CarrierSurcharge.  # noqa: E501
        :type: CompanyLite
        """

        self._company = company

    @property
    def surcharge_id(self):
        """Gets the surcharge_id of this CarrierSurcharge.  # noqa: E501


        :return: The surcharge_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._surcharge_id

    @surcharge_id.setter
    def surcharge_id(self, surcharge_id):
        """Sets the surcharge_id of this CarrierSurcharge.


        :param surcharge_id: The surcharge_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._surcharge_id = surcharge_id

    @property
    def surcharge(self):
        """Gets the surcharge of this CarrierSurcharge.  # noqa: E501


        :return: The surcharge of this CarrierSurcharge.  # noqa: E501
        :rtype: Surcharge
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """Sets the surcharge of this CarrierSurcharge.


        :param surcharge: The surcharge of this CarrierSurcharge.  # noqa: E501
        :type: Surcharge
        """

        self._surcharge = surcharge

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CarrierSurcharge.  # noqa: E501


        :return: The carrier_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CarrierSurcharge.


        :param carrier_id: The carrier_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier(self):
        """Gets the carrier of this CarrierSurcharge.  # noqa: E501


        :return: The carrier of this CarrierSurcharge.  # noqa: E501
        :rtype: CarrierLite
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CarrierSurcharge.


        :param carrier: The carrier of this CarrierSurcharge.  # noqa: E501
        :type: CarrierLite
        """

        self._carrier = carrier

    @property
    def carrier_service_id(self):
        """Gets the carrier_service_id of this CarrierSurcharge.  # noqa: E501


        :return: The carrier_service_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_id

    @carrier_service_id.setter
    def carrier_service_id(self, carrier_service_id):
        """Sets the carrier_service_id of this CarrierSurcharge.


        :param carrier_service_id: The carrier_service_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._carrier_service_id = carrier_service_id

    @property
    def carrier_service(self):
        """Gets the carrier_service of this CarrierSurcharge.  # noqa: E501


        :return: The carrier_service of this CarrierSurcharge.  # noqa: E501
        :rtype: CarrierServiceLite
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this CarrierSurcharge.


        :param carrier_service: The carrier_service of this CarrierSurcharge.  # noqa: E501
        :type: CarrierServiceLite
        """

        self._carrier_service = carrier_service

    @property
    def carrier_account_id(self):
        """Gets the carrier_account_id of this CarrierSurcharge.  # noqa: E501


        :return: The carrier_account_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._carrier_account_id

    @carrier_account_id.setter
    def carrier_account_id(self, carrier_account_id):
        """Sets the carrier_account_id of this CarrierSurcharge.


        :param carrier_account_id: The carrier_account_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._carrier_account_id = carrier_account_id

    @property
    def carrier_account(self):
        """Gets the carrier_account of this CarrierSurcharge.  # noqa: E501


        :return: The carrier_account of this CarrierSurcharge.  # noqa: E501
        :rtype: BaseCarrierAccount
        """
        return self._carrier_account

    @carrier_account.setter
    def carrier_account(self, carrier_account):
        """Sets the carrier_account of this CarrierSurcharge.


        :param carrier_account: The carrier_account of this CarrierSurcharge.  # noqa: E501
        :type: BaseCarrierAccount
        """

        self._carrier_account = carrier_account

    @property
    def carrier_services(self):
        """Gets the carrier_services of this CarrierSurcharge.  # noqa: E501

        List of all the carrier services that point to the surcharge for a given carrier  # noqa: E501

        :return: The carrier_services of this CarrierSurcharge.  # noqa: E501
        :rtype: list[CarrierSurchargeService]
        """
        return self._carrier_services

    @carrier_services.setter
    def carrier_services(self, carrier_services):
        """Sets the carrier_services of this CarrierSurcharge.

        List of all the carrier services that point to the surcharge for a given carrier  # noqa: E501

        :param carrier_services: The carrier_services of this CarrierSurcharge.  # noqa: E501
        :type: list[CarrierSurchargeService]
        """

        self._carrier_services = carrier_services

    @property
    def carrier_accounts(self):
        """Gets the carrier_accounts of this CarrierSurcharge.  # noqa: E501

        List of all the carrier accounts that point to the surcharge for a given account  # noqa: E501

        :return: The carrier_accounts of this CarrierSurcharge.  # noqa: E501
        :rtype: list[CarrierSurchargeAccount]
        """
        return self._carrier_accounts

    @carrier_accounts.setter
    def carrier_accounts(self, carrier_accounts):
        """Sets the carrier_accounts of this CarrierSurcharge.

        List of all the carrier accounts that point to the surcharge for a given account  # noqa: E501

        :param carrier_accounts: The carrier_accounts of this CarrierSurcharge.  # noqa: E501
        :type: list[CarrierSurchargeAccount]
        """

        self._carrier_accounts = carrier_accounts

    @property
    def exclude(self):
        """Gets the exclude of this CarrierSurcharge.  # noqa: E501


        :return: The exclude of this CarrierSurcharge.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this CarrierSurcharge.


        :param exclude: The exclude of this CarrierSurcharge.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def price(self):
        """Gets the price of this CarrierSurcharge.  # noqa: E501


        :return: The price of this CarrierSurcharge.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CarrierSurcharge.


        :param price: The price of this CarrierSurcharge.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def hard_set_sell_price(self):
        """Gets the hard_set_sell_price of this CarrierSurcharge.  # noqa: E501


        :return: The hard_set_sell_price of this CarrierSurcharge.  # noqa: E501
        :rtype: float
        """
        return self._hard_set_sell_price

    @hard_set_sell_price.setter
    def hard_set_sell_price(self, hard_set_sell_price):
        """Sets the hard_set_sell_price of this CarrierSurcharge.


        :param hard_set_sell_price: The hard_set_sell_price of this CarrierSurcharge.  # noqa: E501
        :type: float
        """

        self._hard_set_sell_price = hard_set_sell_price

    @property
    def percentage_of_sell_price(self):
        """Gets the percentage_of_sell_price of this CarrierSurcharge.  # noqa: E501


        :return: The percentage_of_sell_price of this CarrierSurcharge.  # noqa: E501
        :rtype: float
        """
        return self._percentage_of_sell_price

    @percentage_of_sell_price.setter
    def percentage_of_sell_price(self, percentage_of_sell_price):
        """Sets the percentage_of_sell_price of this CarrierSurcharge.


        :param percentage_of_sell_price: The percentage_of_sell_price of this CarrierSurcharge.  # noqa: E501
        :type: float
        """

        self._percentage_of_sell_price = percentage_of_sell_price

    @property
    def markup(self):
        """Gets the markup of this CarrierSurcharge.  # noqa: E501


        :return: The markup of this CarrierSurcharge.  # noqa: E501
        :rtype: float
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this CarrierSurcharge.


        :param markup: The markup of this CarrierSurcharge.  # noqa: E501
        :type: float
        """

        self._markup = markup

    @property
    def price_type(self):
        """Gets the price_type of this CarrierSurcharge.  # noqa: E501


        :return: The price_type of this CarrierSurcharge.  # noqa: E501
        :rtype: SurchargePriceType
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this CarrierSurcharge.


        :param price_type: The price_type of this CarrierSurcharge.  # noqa: E501
        :type: SurchargePriceType
        """

        self._price_type = price_type

    @property
    def override_pricing(self):
        """Gets the override_pricing of this CarrierSurcharge.  # noqa: E501


        :return: The override_pricing of this CarrierSurcharge.  # noqa: E501
        :rtype: bool
        """
        return self._override_pricing

    @override_pricing.setter
    def override_pricing(self, override_pricing):
        """Sets the override_pricing of this CarrierSurcharge.


        :param override_pricing: The override_pricing of this CarrierSurcharge.  # noqa: E501
        :type: bool
        """

        self._override_pricing = override_pricing

    @property
    def cost_minimum(self):
        """Gets the cost_minimum of this CarrierSurcharge.  # noqa: E501


        :return: The cost_minimum of this CarrierSurcharge.  # noqa: E501
        :rtype: float
        """
        return self._cost_minimum

    @cost_minimum.setter
    def cost_minimum(self, cost_minimum):
        """Sets the cost_minimum of this CarrierSurcharge.


        :param cost_minimum: The cost_minimum of this CarrierSurcharge.  # noqa: E501
        :type: float
        """

        self._cost_minimum = cost_minimum

    @property
    def sell_minimum(self):
        """Gets the sell_minimum of this CarrierSurcharge.  # noqa: E501


        :return: The sell_minimum of this CarrierSurcharge.  # noqa: E501
        :rtype: float
        """
        return self._sell_minimum

    @sell_minimum.setter
    def sell_minimum(self, sell_minimum):
        """Sets the sell_minimum of this CarrierSurcharge.


        :param sell_minimum: The sell_minimum of this CarrierSurcharge.  # noqa: E501
        :type: float
        """

        self._sell_minimum = sell_minimum

    @property
    def sell_ratecard_id(self):
        """Gets the sell_ratecard_id of this CarrierSurcharge.  # noqa: E501


        :return: The sell_ratecard_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._sell_ratecard_id

    @sell_ratecard_id.setter
    def sell_ratecard_id(self, sell_ratecard_id):
        """Sets the sell_ratecard_id of this CarrierSurcharge.


        :param sell_ratecard_id: The sell_ratecard_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._sell_ratecard_id = sell_ratecard_id

    @property
    def sell_ratecard(self):
        """Gets the sell_ratecard of this CarrierSurcharge.  # noqa: E501


        :return: The sell_ratecard of this CarrierSurcharge.  # noqa: E501
        :rtype: RatecardLite
        """
        return self._sell_ratecard

    @sell_ratecard.setter
    def sell_ratecard(self, sell_ratecard):
        """Sets the sell_ratecard of this CarrierSurcharge.


        :param sell_ratecard: The sell_ratecard of this CarrierSurcharge.  # noqa: E501
        :type: RatecardLite
        """

        self._sell_ratecard = sell_ratecard

    @property
    def cost_ratecard_id(self):
        """Gets the cost_ratecard_id of this CarrierSurcharge.  # noqa: E501


        :return: The cost_ratecard_id of this CarrierSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._cost_ratecard_id

    @cost_ratecard_id.setter
    def cost_ratecard_id(self, cost_ratecard_id):
        """Sets the cost_ratecard_id of this CarrierSurcharge.


        :param cost_ratecard_id: The cost_ratecard_id of this CarrierSurcharge.  # noqa: E501
        :type: int
        """

        self._cost_ratecard_id = cost_ratecard_id

    @property
    def cost_ratecard(self):
        """Gets the cost_ratecard of this CarrierSurcharge.  # noqa: E501


        :return: The cost_ratecard of this CarrierSurcharge.  # noqa: E501
        :rtype: RatecardLite
        """
        return self._cost_ratecard

    @cost_ratecard.setter
    def cost_ratecard(self, cost_ratecard):
        """Sets the cost_ratecard of this CarrierSurcharge.


        :param cost_ratecard: The cost_ratecard of this CarrierSurcharge.  # noqa: E501
        :type: RatecardLite
        """

        self._cost_ratecard = cost_ratecard

    @property
    def markup_type(self):
        """Gets the markup_type of this CarrierSurcharge.  # noqa: E501


        :return: The markup_type of this CarrierSurcharge.  # noqa: E501
        :rtype: MarkupType
        """
        return self._markup_type

    @markup_type.setter
    def markup_type(self, markup_type):
        """Sets the markup_type of this CarrierSurcharge.


        :param markup_type: The markup_type of this CarrierSurcharge.  # noqa: E501
        :type: MarkupType
        """

        self._markup_type = markup_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierSurcharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierSurcharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
