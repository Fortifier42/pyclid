# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdentityV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'unique_id': 'str',
        'identifying_claim': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'display_name': 'str',
        'email_address': 'str',
        'provider': 'IdentityProviderV2',
        'companies': 'list[IdentityCompanyLink]'
    }

    attribute_map = {
        'id': 'id',
        'unique_id': 'uniqueId',
        'identifying_claim': 'identifyingClaim',
        'given_name': 'givenName',
        'family_name': 'familyName',
        'display_name': 'displayName',
        'email_address': 'emailAddress',
        'provider': 'provider',
        'companies': 'companies'
    }

    def __init__(self, id=None, unique_id=None, identifying_claim=None, given_name=None, family_name=None, display_name=None, email_address=None, provider=None, companies=None):  # noqa: E501
        """IdentityV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._unique_id = None
        self._identifying_claim = None
        self._given_name = None
        self._family_name = None
        self._display_name = None
        self._email_address = None
        self._provider = None
        self._companies = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if unique_id is not None:
            self.unique_id = unique_id
        if identifying_claim is not None:
            self.identifying_claim = identifying_claim
        if given_name is not None:
            self.given_name = given_name
        if family_name is not None:
            self.family_name = family_name
        if display_name is not None:
            self.display_name = display_name
        if email_address is not None:
            self.email_address = email_address
        if provider is not None:
            self.provider = provider
        if companies is not None:
            self.companies = companies

    @property
    def id(self):
        """Gets the id of this IdentityV2.  # noqa: E501


        :return: The id of this IdentityV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentityV2.


        :param id: The id of this IdentityV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def unique_id(self):
        """Gets the unique_id of this IdentityV2.  # noqa: E501


        :return: The unique_id of this IdentityV2.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this IdentityV2.


        :param unique_id: The unique_id of this IdentityV2.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def identifying_claim(self):
        """Gets the identifying_claim of this IdentityV2.  # noqa: E501


        :return: The identifying_claim of this IdentityV2.  # noqa: E501
        :rtype: str
        """
        return self._identifying_claim

    @identifying_claim.setter
    def identifying_claim(self, identifying_claim):
        """Sets the identifying_claim of this IdentityV2.


        :param identifying_claim: The identifying_claim of this IdentityV2.  # noqa: E501
        :type: str
        """

        self._identifying_claim = identifying_claim

    @property
    def given_name(self):
        """Gets the given_name of this IdentityV2.  # noqa: E501


        :return: The given_name of this IdentityV2.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this IdentityV2.


        :param given_name: The given_name of this IdentityV2.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this IdentityV2.  # noqa: E501


        :return: The family_name of this IdentityV2.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this IdentityV2.


        :param family_name: The family_name of this IdentityV2.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def display_name(self):
        """Gets the display_name of this IdentityV2.  # noqa: E501


        :return: The display_name of this IdentityV2.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IdentityV2.


        :param display_name: The display_name of this IdentityV2.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this IdentityV2.  # noqa: E501


        :return: The email_address of this IdentityV2.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this IdentityV2.


        :param email_address: The email_address of this IdentityV2.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def provider(self):
        """Gets the provider of this IdentityV2.  # noqa: E501


        :return: The provider of this IdentityV2.  # noqa: E501
        :rtype: IdentityProviderV2
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this IdentityV2.


        :param provider: The provider of this IdentityV2.  # noqa: E501
        :type: IdentityProviderV2
        """

        self._provider = provider

    @property
    def companies(self):
        """Gets the companies of this IdentityV2.  # noqa: E501


        :return: The companies of this IdentityV2.  # noqa: E501
        :rtype: list[IdentityCompanyLink]
        """
        return self._companies

    @companies.setter
    def companies(self, companies):
        """Sets the companies of this IdentityV2.


        :param companies: The companies of this IdentityV2.  # noqa: E501
        :type: list[IdentityCompanyLink]
        """

        self._companies = companies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
