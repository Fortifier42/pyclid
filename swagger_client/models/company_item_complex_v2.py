# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyItemComplexV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_type': 'ItemType',
        'name': 'str',
        'sku': 'str',
        'quantity': 'int',
        'standard_item': 'CreateConsignmentStandardItemV2',
        'combined_item': 'CreateConsignmentCombinedItemV2',
        'combined_load_size': 'CreateConsignmentCombinedLoadSizeItemV2',
        'very_frequent_item': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'item_type': 'itemType',
        'name': 'name',
        'sku': 'sku',
        'quantity': 'quantity',
        'standard_item': 'standardItem',
        'combined_item': 'combinedItem',
        'combined_load_size': 'combinedLoadSize',
        'very_frequent_item': 'veryFrequentItem'
    }

    def __init__(self, id=None, item_type=None, name=None, sku=None, quantity=None, standard_item=None, combined_item=None, combined_load_size=None, very_frequent_item=None):  # noqa: E501
        """CompanyItemComplexV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_type = None
        self._name = None
        self._sku = None
        self._quantity = None
        self._standard_item = None
        self._combined_item = None
        self._combined_load_size = None
        self._very_frequent_item = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.item_type = item_type
        self.name = name
        if sku is not None:
            self.sku = sku
        self.quantity = quantity
        if standard_item is not None:
            self.standard_item = standard_item
        if combined_item is not None:
            self.combined_item = combined_item
        if combined_load_size is not None:
            self.combined_load_size = combined_load_size
        if very_frequent_item is not None:
            self.very_frequent_item = very_frequent_item

    @property
    def id(self):
        """Gets the id of this CompanyItemComplexV2.  # noqa: E501

        The Machship Id for this item  # noqa: E501

        :return: The id of this CompanyItemComplexV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyItemComplexV2.

        The Machship Id for this item  # noqa: E501

        :param id: The id of this CompanyItemComplexV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_type(self):
        """Gets the item_type of this CompanyItemComplexV2.  # noqa: E501


        :return: The item_type of this CompanyItemComplexV2.  # noqa: E501
        :rtype: ItemType
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this CompanyItemComplexV2.


        :param item_type: The item_type of this CompanyItemComplexV2.  # noqa: E501
        :type: ItemType
        """
        if item_type is None:
            raise ValueError("Invalid value for `item_type`, must not be `None`")  # noqa: E501

        self._item_type = item_type

    @property
    def name(self):
        """Gets the name of this CompanyItemComplexV2.  # noqa: E501

        Name or description of the goods you are sending  # noqa: E501

        :return: The name of this CompanyItemComplexV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyItemComplexV2.

        Name or description of the goods you are sending  # noqa: E501

        :param name: The name of this CompanyItemComplexV2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this CompanyItemComplexV2.  # noqa: E501

        Optional: the SKU or code of the item you are sending  # noqa: E501

        :return: The sku of this CompanyItemComplexV2.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CompanyItemComplexV2.

        Optional: the SKU or code of the item you are sending  # noqa: E501

        :param sku: The sku of this CompanyItemComplexV2.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def quantity(self):
        """Gets the quantity of this CompanyItemComplexV2.  # noqa: E501

        Number of items  # noqa: E501

        :return: The quantity of this CompanyItemComplexV2.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CompanyItemComplexV2.

        Number of items  # noqa: E501

        :param quantity: The quantity of this CompanyItemComplexV2.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def standard_item(self):
        """Gets the standard_item of this CompanyItemComplexV2.  # noqa: E501


        :return: The standard_item of this CompanyItemComplexV2.  # noqa: E501
        :rtype: CreateConsignmentStandardItemV2
        """
        return self._standard_item

    @standard_item.setter
    def standard_item(self, standard_item):
        """Sets the standard_item of this CompanyItemComplexV2.


        :param standard_item: The standard_item of this CompanyItemComplexV2.  # noqa: E501
        :type: CreateConsignmentStandardItemV2
        """

        self._standard_item = standard_item

    @property
    def combined_item(self):
        """Gets the combined_item of this CompanyItemComplexV2.  # noqa: E501


        :return: The combined_item of this CompanyItemComplexV2.  # noqa: E501
        :rtype: CreateConsignmentCombinedItemV2
        """
        return self._combined_item

    @combined_item.setter
    def combined_item(self, combined_item):
        """Sets the combined_item of this CompanyItemComplexV2.


        :param combined_item: The combined_item of this CompanyItemComplexV2.  # noqa: E501
        :type: CreateConsignmentCombinedItemV2
        """

        self._combined_item = combined_item

    @property
    def combined_load_size(self):
        """Gets the combined_load_size of this CompanyItemComplexV2.  # noqa: E501


        :return: The combined_load_size of this CompanyItemComplexV2.  # noqa: E501
        :rtype: CreateConsignmentCombinedLoadSizeItemV2
        """
        return self._combined_load_size

    @combined_load_size.setter
    def combined_load_size(self, combined_load_size):
        """Sets the combined_load_size of this CompanyItemComplexV2.


        :param combined_load_size: The combined_load_size of this CompanyItemComplexV2.  # noqa: E501
        :type: CreateConsignmentCombinedLoadSizeItemV2
        """

        self._combined_load_size = combined_load_size

    @property
    def very_frequent_item(self):
        """Gets the very_frequent_item of this CompanyItemComplexV2.  # noqa: E501


        :return: The very_frequent_item of this CompanyItemComplexV2.  # noqa: E501
        :rtype: bool
        """
        return self._very_frequent_item

    @very_frequent_item.setter
    def very_frequent_item(self, very_frequent_item):
        """Sets the very_frequent_item of this CompanyItemComplexV2.


        :param very_frequent_item: The very_frequent_item of this CompanyItemComplexV2.  # noqa: E501
        :type: bool
        """

        self._very_frequent_item = very_frequent_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyItemComplexV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyItemComplexV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
