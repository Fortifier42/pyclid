# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsolidatedConsignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'unique_identifier': 'str',
        'consignment_number': 'str',
        'is_pending_consignment': 'bool',
        'despatch_date_local': 'datetime',
        'despatch_date_utc': 'datetime',
        'dgs_declared': 'bool',
        'original_unmanifested_consignments': 'list[ConsignmentToConsolidate]',
        'original_pending_consignments': 'list[ConsignmentToConsolidate]',
        'original_consignments': 'list[ConsignmentToConsolidate]',
        'from_company_location_id': 'int',
        'from_address': 'Address',
        'to_company_location_id': 'int',
        'to_address': 'Address',
        'carrier': 'CarrierLite',
        'account': 'CarrierAccountLite',
        'service': 'CarrierServiceLite',
        'company_carrier_account': 'CompanyCarrierAccountLite',
        'customer_reference_one': 'str',
        'customer_reference_two': 'str',
        'items': 'list[CreateConsignmentItemComplexV2]',
        'company_id': 'int',
        'special_instructions': 'str',
        'receiver_account_code': 'str',
        'receiver_account_id': 'int',
        'is_receiver_account': 'bool',
        'sending_tracking_email': 'bool',
        'is_test': 'bool',
        'printer_token': 'str',
        'question_ids': 'list[int]',
        'custom_values': 'list[CustomValue]',
        'is_international': 'bool',
        'international_from_city': 'str',
        'international_from_province': 'str',
        'international_from_postcode': 'str',
        'from_country': 'Country',
        'from_country_id': 'int',
        'international_to_city': 'str',
        'international_to_province': 'str',
        'international_to_postcode': 'str',
        'to_country': 'Country',
        'to_country_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'unique_identifier': 'uniqueIdentifier',
        'consignment_number': 'consignmentNumber',
        'is_pending_consignment': 'isPendingConsignment',
        'despatch_date_local': 'despatchDateLocal',
        'despatch_date_utc': 'despatchDateUtc',
        'dgs_declared': 'dgsDeclared',
        'original_unmanifested_consignments': 'originalUnmanifestedConsignments',
        'original_pending_consignments': 'originalPendingConsignments',
        'original_consignments': 'originalConsignments',
        'from_company_location_id': 'fromCompanyLocationId',
        'from_address': 'fromAddress',
        'to_company_location_id': 'toCompanyLocationId',
        'to_address': 'toAddress',
        'carrier': 'carrier',
        'account': 'account',
        'service': 'service',
        'company_carrier_account': 'companyCarrierAccount',
        'customer_reference_one': 'customerReferenceOne',
        'customer_reference_two': 'customerReferenceTwo',
        'items': 'items',
        'company_id': 'companyId',
        'special_instructions': 'specialInstructions',
        'receiver_account_code': 'receiverAccountCode',
        'receiver_account_id': 'receiverAccountId',
        'is_receiver_account': 'isReceiverAccount',
        'sending_tracking_email': 'sendingTrackingEmail',
        'is_test': 'isTest',
        'printer_token': 'printerToken',
        'question_ids': 'questionIds',
        'custom_values': 'customValues',
        'is_international': 'isInternational',
        'international_from_city': 'internationalFromCity',
        'international_from_province': 'internationalFromProvince',
        'international_from_postcode': 'internationalFromPostcode',
        'from_country': 'fromCountry',
        'from_country_id': 'fromCountryId',
        'international_to_city': 'internationalToCity',
        'international_to_province': 'internationalToProvince',
        'international_to_postcode': 'internationalToPostcode',
        'to_country': 'toCountry',
        'to_country_id': 'toCountryId'
    }

    def __init__(self, id=None, unique_identifier=None, consignment_number=None, is_pending_consignment=None, despatch_date_local=None, despatch_date_utc=None, dgs_declared=None, original_unmanifested_consignments=None, original_pending_consignments=None, original_consignments=None, from_company_location_id=None, from_address=None, to_company_location_id=None, to_address=None, carrier=None, account=None, service=None, company_carrier_account=None, customer_reference_one=None, customer_reference_two=None, items=None, company_id=None, special_instructions=None, receiver_account_code=None, receiver_account_id=None, is_receiver_account=None, sending_tracking_email=None, is_test=None, printer_token=None, question_ids=None, custom_values=None, is_international=None, international_from_city=None, international_from_province=None, international_from_postcode=None, from_country=None, from_country_id=None, international_to_city=None, international_to_province=None, international_to_postcode=None, to_country=None, to_country_id=None):  # noqa: E501
        """ConsolidatedConsignment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._unique_identifier = None
        self._consignment_number = None
        self._is_pending_consignment = None
        self._despatch_date_local = None
        self._despatch_date_utc = None
        self._dgs_declared = None
        self._original_unmanifested_consignments = None
        self._original_pending_consignments = None
        self._original_consignments = None
        self._from_company_location_id = None
        self._from_address = None
        self._to_company_location_id = None
        self._to_address = None
        self._carrier = None
        self._account = None
        self._service = None
        self._company_carrier_account = None
        self._customer_reference_one = None
        self._customer_reference_two = None
        self._items = None
        self._company_id = None
        self._special_instructions = None
        self._receiver_account_code = None
        self._receiver_account_id = None
        self._is_receiver_account = None
        self._sending_tracking_email = None
        self._is_test = None
        self._printer_token = None
        self._question_ids = None
        self._custom_values = None
        self._is_international = None
        self._international_from_city = None
        self._international_from_province = None
        self._international_from_postcode = None
        self._from_country = None
        self._from_country_id = None
        self._international_to_city = None
        self._international_to_province = None
        self._international_to_postcode = None
        self._to_country = None
        self._to_country_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if consignment_number is not None:
            self.consignment_number = consignment_number
        if is_pending_consignment is not None:
            self.is_pending_consignment = is_pending_consignment
        if despatch_date_local is not None:
            self.despatch_date_local = despatch_date_local
        if despatch_date_utc is not None:
            self.despatch_date_utc = despatch_date_utc
        if dgs_declared is not None:
            self.dgs_declared = dgs_declared
        if original_unmanifested_consignments is not None:
            self.original_unmanifested_consignments = original_unmanifested_consignments
        if original_pending_consignments is not None:
            self.original_pending_consignments = original_pending_consignments
        if original_consignments is not None:
            self.original_consignments = original_consignments
        if from_company_location_id is not None:
            self.from_company_location_id = from_company_location_id
        if from_address is not None:
            self.from_address = from_address
        if to_company_location_id is not None:
            self.to_company_location_id = to_company_location_id
        if to_address is not None:
            self.to_address = to_address
        if carrier is not None:
            self.carrier = carrier
        if account is not None:
            self.account = account
        if service is not None:
            self.service = service
        if company_carrier_account is not None:
            self.company_carrier_account = company_carrier_account
        if customer_reference_one is not None:
            self.customer_reference_one = customer_reference_one
        if customer_reference_two is not None:
            self.customer_reference_two = customer_reference_two
        if items is not None:
            self.items = items
        if company_id is not None:
            self.company_id = company_id
        if special_instructions is not None:
            self.special_instructions = special_instructions
        if receiver_account_code is not None:
            self.receiver_account_code = receiver_account_code
        if receiver_account_id is not None:
            self.receiver_account_id = receiver_account_id
        if is_receiver_account is not None:
            self.is_receiver_account = is_receiver_account
        if sending_tracking_email is not None:
            self.sending_tracking_email = sending_tracking_email
        if is_test is not None:
            self.is_test = is_test
        if printer_token is not None:
            self.printer_token = printer_token
        if question_ids is not None:
            self.question_ids = question_ids
        if custom_values is not None:
            self.custom_values = custom_values
        if is_international is not None:
            self.is_international = is_international
        if international_from_city is not None:
            self.international_from_city = international_from_city
        if international_from_province is not None:
            self.international_from_province = international_from_province
        if international_from_postcode is not None:
            self.international_from_postcode = international_from_postcode
        if from_country is not None:
            self.from_country = from_country
        if from_country_id is not None:
            self.from_country_id = from_country_id
        if international_to_city is not None:
            self.international_to_city = international_to_city
        if international_to_province is not None:
            self.international_to_province = international_to_province
        if international_to_postcode is not None:
            self.international_to_postcode = international_to_postcode
        if to_country is not None:
            self.to_country = to_country
        if to_country_id is not None:
            self.to_country_id = to_country_id

    @property
    def id(self):
        """Gets the id of this ConsolidatedConsignment.  # noqa: E501


        :return: The id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsolidatedConsignment.


        :param id: The id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this ConsolidatedConsignment.  # noqa: E501

        This is used when new consignments are being created and run through the consolidation engine - having a globally  unique ID means we can match the consolidation result back up with the request  # noqa: E501

        :return: The unique_identifier of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this ConsolidatedConsignment.

        This is used when new consignments are being created and run through the consolidation engine - having a globally  unique ID means we can match the consolidation result back up with the request  # noqa: E501

        :param unique_identifier: The unique_identifier of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def consignment_number(self):
        """Gets the consignment_number of this ConsolidatedConsignment.  # noqa: E501


        :return: The consignment_number of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._consignment_number

    @consignment_number.setter
    def consignment_number(self, consignment_number):
        """Sets the consignment_number of this ConsolidatedConsignment.


        :param consignment_number: The consignment_number of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._consignment_number = consignment_number

    @property
    def is_pending_consignment(self):
        """Gets the is_pending_consignment of this ConsolidatedConsignment.  # noqa: E501


        :return: The is_pending_consignment of this ConsolidatedConsignment.  # noqa: E501
        :rtype: bool
        """
        return self._is_pending_consignment

    @is_pending_consignment.setter
    def is_pending_consignment(self, is_pending_consignment):
        """Sets the is_pending_consignment of this ConsolidatedConsignment.


        :param is_pending_consignment: The is_pending_consignment of this ConsolidatedConsignment.  # noqa: E501
        :type: bool
        """

        self._is_pending_consignment = is_pending_consignment

    @property
    def despatch_date_local(self):
        """Gets the despatch_date_local of this ConsolidatedConsignment.  # noqa: E501


        :return: The despatch_date_local of this ConsolidatedConsignment.  # noqa: E501
        :rtype: datetime
        """
        return self._despatch_date_local

    @despatch_date_local.setter
    def despatch_date_local(self, despatch_date_local):
        """Sets the despatch_date_local of this ConsolidatedConsignment.


        :param despatch_date_local: The despatch_date_local of this ConsolidatedConsignment.  # noqa: E501
        :type: datetime
        """

        self._despatch_date_local = despatch_date_local

    @property
    def despatch_date_utc(self):
        """Gets the despatch_date_utc of this ConsolidatedConsignment.  # noqa: E501


        :return: The despatch_date_utc of this ConsolidatedConsignment.  # noqa: E501
        :rtype: datetime
        """
        return self._despatch_date_utc

    @despatch_date_utc.setter
    def despatch_date_utc(self, despatch_date_utc):
        """Sets the despatch_date_utc of this ConsolidatedConsignment.


        :param despatch_date_utc: The despatch_date_utc of this ConsolidatedConsignment.  # noqa: E501
        :type: datetime
        """

        self._despatch_date_utc = despatch_date_utc

    @property
    def dgs_declared(self):
        """Gets the dgs_declared of this ConsolidatedConsignment.  # noqa: E501


        :return: The dgs_declared of this ConsolidatedConsignment.  # noqa: E501
        :rtype: bool
        """
        return self._dgs_declared

    @dgs_declared.setter
    def dgs_declared(self, dgs_declared):
        """Sets the dgs_declared of this ConsolidatedConsignment.


        :param dgs_declared: The dgs_declared of this ConsolidatedConsignment.  # noqa: E501
        :type: bool
        """

        self._dgs_declared = dgs_declared

    @property
    def original_unmanifested_consignments(self):
        """Gets the original_unmanifested_consignments of this ConsolidatedConsignment.  # noqa: E501


        :return: The original_unmanifested_consignments of this ConsolidatedConsignment.  # noqa: E501
        :rtype: list[ConsignmentToConsolidate]
        """
        return self._original_unmanifested_consignments

    @original_unmanifested_consignments.setter
    def original_unmanifested_consignments(self, original_unmanifested_consignments):
        """Sets the original_unmanifested_consignments of this ConsolidatedConsignment.


        :param original_unmanifested_consignments: The original_unmanifested_consignments of this ConsolidatedConsignment.  # noqa: E501
        :type: list[ConsignmentToConsolidate]
        """

        self._original_unmanifested_consignments = original_unmanifested_consignments

    @property
    def original_pending_consignments(self):
        """Gets the original_pending_consignments of this ConsolidatedConsignment.  # noqa: E501


        :return: The original_pending_consignments of this ConsolidatedConsignment.  # noqa: E501
        :rtype: list[ConsignmentToConsolidate]
        """
        return self._original_pending_consignments

    @original_pending_consignments.setter
    def original_pending_consignments(self, original_pending_consignments):
        """Sets the original_pending_consignments of this ConsolidatedConsignment.


        :param original_pending_consignments: The original_pending_consignments of this ConsolidatedConsignment.  # noqa: E501
        :type: list[ConsignmentToConsolidate]
        """

        self._original_pending_consignments = original_pending_consignments

    @property
    def original_consignments(self):
        """Gets the original_consignments of this ConsolidatedConsignment.  # noqa: E501


        :return: The original_consignments of this ConsolidatedConsignment.  # noqa: E501
        :rtype: list[ConsignmentToConsolidate]
        """
        return self._original_consignments

    @original_consignments.setter
    def original_consignments(self, original_consignments):
        """Sets the original_consignments of this ConsolidatedConsignment.


        :param original_consignments: The original_consignments of this ConsolidatedConsignment.  # noqa: E501
        :type: list[ConsignmentToConsolidate]
        """

        self._original_consignments = original_consignments

    @property
    def from_company_location_id(self):
        """Gets the from_company_location_id of this ConsolidatedConsignment.  # noqa: E501


        :return: The from_company_location_id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._from_company_location_id

    @from_company_location_id.setter
    def from_company_location_id(self, from_company_location_id):
        """Sets the from_company_location_id of this ConsolidatedConsignment.


        :param from_company_location_id: The from_company_location_id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._from_company_location_id = from_company_location_id

    @property
    def from_address(self):
        """Gets the from_address of this ConsolidatedConsignment.  # noqa: E501


        :return: The from_address of this ConsolidatedConsignment.  # noqa: E501
        :rtype: Address
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this ConsolidatedConsignment.


        :param from_address: The from_address of this ConsolidatedConsignment.  # noqa: E501
        :type: Address
        """

        self._from_address = from_address

    @property
    def to_company_location_id(self):
        """Gets the to_company_location_id of this ConsolidatedConsignment.  # noqa: E501


        :return: The to_company_location_id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._to_company_location_id

    @to_company_location_id.setter
    def to_company_location_id(self, to_company_location_id):
        """Sets the to_company_location_id of this ConsolidatedConsignment.


        :param to_company_location_id: The to_company_location_id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._to_company_location_id = to_company_location_id

    @property
    def to_address(self):
        """Gets the to_address of this ConsolidatedConsignment.  # noqa: E501


        :return: The to_address of this ConsolidatedConsignment.  # noqa: E501
        :rtype: Address
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this ConsolidatedConsignment.


        :param to_address: The to_address of this ConsolidatedConsignment.  # noqa: E501
        :type: Address
        """

        self._to_address = to_address

    @property
    def carrier(self):
        """Gets the carrier of this ConsolidatedConsignment.  # noqa: E501


        :return: The carrier of this ConsolidatedConsignment.  # noqa: E501
        :rtype: CarrierLite
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this ConsolidatedConsignment.


        :param carrier: The carrier of this ConsolidatedConsignment.  # noqa: E501
        :type: CarrierLite
        """

        self._carrier = carrier

    @property
    def account(self):
        """Gets the account of this ConsolidatedConsignment.  # noqa: E501


        :return: The account of this ConsolidatedConsignment.  # noqa: E501
        :rtype: CarrierAccountLite
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ConsolidatedConsignment.


        :param account: The account of this ConsolidatedConsignment.  # noqa: E501
        :type: CarrierAccountLite
        """

        self._account = account

    @property
    def service(self):
        """Gets the service of this ConsolidatedConsignment.  # noqa: E501


        :return: The service of this ConsolidatedConsignment.  # noqa: E501
        :rtype: CarrierServiceLite
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ConsolidatedConsignment.


        :param service: The service of this ConsolidatedConsignment.  # noqa: E501
        :type: CarrierServiceLite
        """

        self._service = service

    @property
    def company_carrier_account(self):
        """Gets the company_carrier_account of this ConsolidatedConsignment.  # noqa: E501


        :return: The company_carrier_account of this ConsolidatedConsignment.  # noqa: E501
        :rtype: CompanyCarrierAccountLite
        """
        return self._company_carrier_account

    @company_carrier_account.setter
    def company_carrier_account(self, company_carrier_account):
        """Sets the company_carrier_account of this ConsolidatedConsignment.


        :param company_carrier_account: The company_carrier_account of this ConsolidatedConsignment.  # noqa: E501
        :type: CompanyCarrierAccountLite
        """

        self._company_carrier_account = company_carrier_account

    @property
    def customer_reference_one(self):
        """Gets the customer_reference_one of this ConsolidatedConsignment.  # noqa: E501


        :return: The customer_reference_one of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference_one

    @customer_reference_one.setter
    def customer_reference_one(self, customer_reference_one):
        """Sets the customer_reference_one of this ConsolidatedConsignment.


        :param customer_reference_one: The customer_reference_one of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._customer_reference_one = customer_reference_one

    @property
    def customer_reference_two(self):
        """Gets the customer_reference_two of this ConsolidatedConsignment.  # noqa: E501


        :return: The customer_reference_two of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference_two

    @customer_reference_two.setter
    def customer_reference_two(self, customer_reference_two):
        """Sets the customer_reference_two of this ConsolidatedConsignment.


        :param customer_reference_two: The customer_reference_two of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._customer_reference_two = customer_reference_two

    @property
    def items(self):
        """Gets the items of this ConsolidatedConsignment.  # noqa: E501


        :return: The items of this ConsolidatedConsignment.  # noqa: E501
        :rtype: list[CreateConsignmentItemComplexV2]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ConsolidatedConsignment.


        :param items: The items of this ConsolidatedConsignment.  # noqa: E501
        :type: list[CreateConsignmentItemComplexV2]
        """

        self._items = items

    @property
    def company_id(self):
        """Gets the company_id of this ConsolidatedConsignment.  # noqa: E501


        :return: The company_id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ConsolidatedConsignment.


        :param company_id: The company_id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def special_instructions(self):
        """Gets the special_instructions of this ConsolidatedConsignment.  # noqa: E501


        :return: The special_instructions of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._special_instructions

    @special_instructions.setter
    def special_instructions(self, special_instructions):
        """Sets the special_instructions of this ConsolidatedConsignment.


        :param special_instructions: The special_instructions of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._special_instructions = special_instructions

    @property
    def receiver_account_code(self):
        """Gets the receiver_account_code of this ConsolidatedConsignment.  # noqa: E501


        :return: The receiver_account_code of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._receiver_account_code

    @receiver_account_code.setter
    def receiver_account_code(self, receiver_account_code):
        """Sets the receiver_account_code of this ConsolidatedConsignment.


        :param receiver_account_code: The receiver_account_code of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._receiver_account_code = receiver_account_code

    @property
    def receiver_account_id(self):
        """Gets the receiver_account_id of this ConsolidatedConsignment.  # noqa: E501


        :return: The receiver_account_id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._receiver_account_id

    @receiver_account_id.setter
    def receiver_account_id(self, receiver_account_id):
        """Sets the receiver_account_id of this ConsolidatedConsignment.


        :param receiver_account_id: The receiver_account_id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._receiver_account_id = receiver_account_id

    @property
    def is_receiver_account(self):
        """Gets the is_receiver_account of this ConsolidatedConsignment.  # noqa: E501


        :return: The is_receiver_account of this ConsolidatedConsignment.  # noqa: E501
        :rtype: bool
        """
        return self._is_receiver_account

    @is_receiver_account.setter
    def is_receiver_account(self, is_receiver_account):
        """Sets the is_receiver_account of this ConsolidatedConsignment.


        :param is_receiver_account: The is_receiver_account of this ConsolidatedConsignment.  # noqa: E501
        :type: bool
        """

        self._is_receiver_account = is_receiver_account

    @property
    def sending_tracking_email(self):
        """Gets the sending_tracking_email of this ConsolidatedConsignment.  # noqa: E501

        Set this to true if you would like to send a tracking email to the receiver email address once this consignment is manifested  # noqa: E501

        :return: The sending_tracking_email of this ConsolidatedConsignment.  # noqa: E501
        :rtype: bool
        """
        return self._sending_tracking_email

    @sending_tracking_email.setter
    def sending_tracking_email(self, sending_tracking_email):
        """Sets the sending_tracking_email of this ConsolidatedConsignment.

        Set this to true if you would like to send a tracking email to the receiver email address once this consignment is manifested  # noqa: E501

        :param sending_tracking_email: The sending_tracking_email of this ConsolidatedConsignment.  # noqa: E501
        :type: bool
        """

        self._sending_tracking_email = sending_tracking_email

    @property
    def is_test(self):
        """Gets the is_test of this ConsolidatedConsignment.  # noqa: E501

        When true then the consignment is never going to be sent to the carrier and exists in MachShip purely  to test  # noqa: E501

        :return: The is_test of this ConsolidatedConsignment.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this ConsolidatedConsignment.

        When true then the consignment is never going to be sent to the carrier and exists in MachShip purely  to test  # noqa: E501

        :param is_test: The is_test of this ConsolidatedConsignment.  # noqa: E501
        :type: bool
        """

        self._is_test = is_test

    @property
    def printer_token(self):
        """Gets the printer_token of this ConsolidatedConsignment.  # noqa: E501


        :return: The printer_token of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._printer_token

    @printer_token.setter
    def printer_token(self, printer_token):
        """Sets the printer_token of this ConsolidatedConsignment.


        :param printer_token: The printer_token of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._printer_token = printer_token

    @property
    def question_ids(self):
        """Gets the question_ids of this ConsolidatedConsignment.  # noqa: E501


        :return: The question_ids of this ConsolidatedConsignment.  # noqa: E501
        :rtype: list[int]
        """
        return self._question_ids

    @question_ids.setter
    def question_ids(self, question_ids):
        """Sets the question_ids of this ConsolidatedConsignment.


        :param question_ids: The question_ids of this ConsolidatedConsignment.  # noqa: E501
        :type: list[int]
        """

        self._question_ids = question_ids

    @property
    def custom_values(self):
        """Gets the custom_values of this ConsolidatedConsignment.  # noqa: E501


        :return: The custom_values of this ConsolidatedConsignment.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this ConsolidatedConsignment.


        :param custom_values: The custom_values of this ConsolidatedConsignment.  # noqa: E501
        :type: list[CustomValue]
        """

        self._custom_values = custom_values

    @property
    def is_international(self):
        """Gets the is_international of this ConsolidatedConsignment.  # noqa: E501


        :return: The is_international of this ConsolidatedConsignment.  # noqa: E501
        :rtype: bool
        """
        return self._is_international

    @is_international.setter
    def is_international(self, is_international):
        """Sets the is_international of this ConsolidatedConsignment.


        :param is_international: The is_international of this ConsolidatedConsignment.  # noqa: E501
        :type: bool
        """

        self._is_international = is_international

    @property
    def international_from_city(self):
        """Gets the international_from_city of this ConsolidatedConsignment.  # noqa: E501


        :return: The international_from_city of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._international_from_city

    @international_from_city.setter
    def international_from_city(self, international_from_city):
        """Sets the international_from_city of this ConsolidatedConsignment.


        :param international_from_city: The international_from_city of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._international_from_city = international_from_city

    @property
    def international_from_province(self):
        """Gets the international_from_province of this ConsolidatedConsignment.  # noqa: E501


        :return: The international_from_province of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._international_from_province

    @international_from_province.setter
    def international_from_province(self, international_from_province):
        """Sets the international_from_province of this ConsolidatedConsignment.


        :param international_from_province: The international_from_province of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._international_from_province = international_from_province

    @property
    def international_from_postcode(self):
        """Gets the international_from_postcode of this ConsolidatedConsignment.  # noqa: E501


        :return: The international_from_postcode of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._international_from_postcode

    @international_from_postcode.setter
    def international_from_postcode(self, international_from_postcode):
        """Sets the international_from_postcode of this ConsolidatedConsignment.


        :param international_from_postcode: The international_from_postcode of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._international_from_postcode = international_from_postcode

    @property
    def from_country(self):
        """Gets the from_country of this ConsolidatedConsignment.  # noqa: E501


        :return: The from_country of this ConsolidatedConsignment.  # noqa: E501
        :rtype: Country
        """
        return self._from_country

    @from_country.setter
    def from_country(self, from_country):
        """Sets the from_country of this ConsolidatedConsignment.


        :param from_country: The from_country of this ConsolidatedConsignment.  # noqa: E501
        :type: Country
        """

        self._from_country = from_country

    @property
    def from_country_id(self):
        """Gets the from_country_id of this ConsolidatedConsignment.  # noqa: E501


        :return: The from_country_id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._from_country_id

    @from_country_id.setter
    def from_country_id(self, from_country_id):
        """Sets the from_country_id of this ConsolidatedConsignment.


        :param from_country_id: The from_country_id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._from_country_id = from_country_id

    @property
    def international_to_city(self):
        """Gets the international_to_city of this ConsolidatedConsignment.  # noqa: E501


        :return: The international_to_city of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._international_to_city

    @international_to_city.setter
    def international_to_city(self, international_to_city):
        """Sets the international_to_city of this ConsolidatedConsignment.


        :param international_to_city: The international_to_city of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._international_to_city = international_to_city

    @property
    def international_to_province(self):
        """Gets the international_to_province of this ConsolidatedConsignment.  # noqa: E501


        :return: The international_to_province of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._international_to_province

    @international_to_province.setter
    def international_to_province(self, international_to_province):
        """Sets the international_to_province of this ConsolidatedConsignment.


        :param international_to_province: The international_to_province of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._international_to_province = international_to_province

    @property
    def international_to_postcode(self):
        """Gets the international_to_postcode of this ConsolidatedConsignment.  # noqa: E501


        :return: The international_to_postcode of this ConsolidatedConsignment.  # noqa: E501
        :rtype: str
        """
        return self._international_to_postcode

    @international_to_postcode.setter
    def international_to_postcode(self, international_to_postcode):
        """Sets the international_to_postcode of this ConsolidatedConsignment.


        :param international_to_postcode: The international_to_postcode of this ConsolidatedConsignment.  # noqa: E501
        :type: str
        """

        self._international_to_postcode = international_to_postcode

    @property
    def to_country(self):
        """Gets the to_country of this ConsolidatedConsignment.  # noqa: E501


        :return: The to_country of this ConsolidatedConsignment.  # noqa: E501
        :rtype: Country
        """
        return self._to_country

    @to_country.setter
    def to_country(self, to_country):
        """Sets the to_country of this ConsolidatedConsignment.


        :param to_country: The to_country of this ConsolidatedConsignment.  # noqa: E501
        :type: Country
        """

        self._to_country = to_country

    @property
    def to_country_id(self):
        """Gets the to_country_id of this ConsolidatedConsignment.  # noqa: E501


        :return: The to_country_id of this ConsolidatedConsignment.  # noqa: E501
        :rtype: int
        """
        return self._to_country_id

    @to_country_id.setter
    def to_country_id(self, to_country_id):
        """Sets the to_country_id of this ConsolidatedConsignment.


        :param to_country_id: The to_country_id of this ConsolidatedConsignment.  # noqa: E501
        :type: int
        """

        self._to_country_id = to_country_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsolidatedConsignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsolidatedConsignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
