# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendToPrinterGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consignment_ids': 'list[int]',
        'carrier': 'CarrierLite',
        'company': 'CompanyLite',
        'is_dg': 'bool',
        'can_print_item_labels': 'bool',
        'can_print_consignments': 'bool',
        'can_print_manifests': 'bool',
        'can_print_commercial_invoice': 'bool',
        'has_commercial_invoice': 'bool',
        'printers': 'list[PrinterLite]'
    }

    attribute_map = {
        'consignment_ids': 'consignmentIds',
        'carrier': 'carrier',
        'company': 'company',
        'is_dg': 'isDg',
        'can_print_item_labels': 'canPrintItemLabels',
        'can_print_consignments': 'canPrintConsignments',
        'can_print_manifests': 'canPrintManifests',
        'can_print_commercial_invoice': 'canPrintCommercialInvoice',
        'has_commercial_invoice': 'hasCommercialInvoice',
        'printers': 'printers'
    }

    def __init__(self, consignment_ids=None, carrier=None, company=None, is_dg=None, can_print_item_labels=None, can_print_consignments=None, can_print_manifests=None, can_print_commercial_invoice=None, has_commercial_invoice=None, printers=None):  # noqa: E501
        """SendToPrinterGroup - a model defined in Swagger"""  # noqa: E501
        self._consignment_ids = None
        self._carrier = None
        self._company = None
        self._is_dg = None
        self._can_print_item_labels = None
        self._can_print_consignments = None
        self._can_print_manifests = None
        self._can_print_commercial_invoice = None
        self._has_commercial_invoice = None
        self._printers = None
        self.discriminator = None
        if consignment_ids is not None:
            self.consignment_ids = consignment_ids
        if carrier is not None:
            self.carrier = carrier
        if company is not None:
            self.company = company
        if is_dg is not None:
            self.is_dg = is_dg
        if can_print_item_labels is not None:
            self.can_print_item_labels = can_print_item_labels
        if can_print_consignments is not None:
            self.can_print_consignments = can_print_consignments
        if can_print_manifests is not None:
            self.can_print_manifests = can_print_manifests
        if can_print_commercial_invoice is not None:
            self.can_print_commercial_invoice = can_print_commercial_invoice
        if has_commercial_invoice is not None:
            self.has_commercial_invoice = has_commercial_invoice
        if printers is not None:
            self.printers = printers

    @property
    def consignment_ids(self):
        """Gets the consignment_ids of this SendToPrinterGroup.  # noqa: E501


        :return: The consignment_ids of this SendToPrinterGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._consignment_ids

    @consignment_ids.setter
    def consignment_ids(self, consignment_ids):
        """Sets the consignment_ids of this SendToPrinterGroup.


        :param consignment_ids: The consignment_ids of this SendToPrinterGroup.  # noqa: E501
        :type: list[int]
        """

        self._consignment_ids = consignment_ids

    @property
    def carrier(self):
        """Gets the carrier of this SendToPrinterGroup.  # noqa: E501


        :return: The carrier of this SendToPrinterGroup.  # noqa: E501
        :rtype: CarrierLite
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this SendToPrinterGroup.


        :param carrier: The carrier of this SendToPrinterGroup.  # noqa: E501
        :type: CarrierLite
        """

        self._carrier = carrier

    @property
    def company(self):
        """Gets the company of this SendToPrinterGroup.  # noqa: E501


        :return: The company of this SendToPrinterGroup.  # noqa: E501
        :rtype: CompanyLite
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SendToPrinterGroup.


        :param company: The company of this SendToPrinterGroup.  # noqa: E501
        :type: CompanyLite
        """

        self._company = company

    @property
    def is_dg(self):
        """Gets the is_dg of this SendToPrinterGroup.  # noqa: E501


        :return: The is_dg of this SendToPrinterGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_dg

    @is_dg.setter
    def is_dg(self, is_dg):
        """Sets the is_dg of this SendToPrinterGroup.


        :param is_dg: The is_dg of this SendToPrinterGroup.  # noqa: E501
        :type: bool
        """

        self._is_dg = is_dg

    @property
    def can_print_item_labels(self):
        """Gets the can_print_item_labels of this SendToPrinterGroup.  # noqa: E501


        :return: The can_print_item_labels of this SendToPrinterGroup.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_item_labels

    @can_print_item_labels.setter
    def can_print_item_labels(self, can_print_item_labels):
        """Sets the can_print_item_labels of this SendToPrinterGroup.


        :param can_print_item_labels: The can_print_item_labels of this SendToPrinterGroup.  # noqa: E501
        :type: bool
        """

        self._can_print_item_labels = can_print_item_labels

    @property
    def can_print_consignments(self):
        """Gets the can_print_consignments of this SendToPrinterGroup.  # noqa: E501


        :return: The can_print_consignments of this SendToPrinterGroup.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_consignments

    @can_print_consignments.setter
    def can_print_consignments(self, can_print_consignments):
        """Sets the can_print_consignments of this SendToPrinterGroup.


        :param can_print_consignments: The can_print_consignments of this SendToPrinterGroup.  # noqa: E501
        :type: bool
        """

        self._can_print_consignments = can_print_consignments

    @property
    def can_print_manifests(self):
        """Gets the can_print_manifests of this SendToPrinterGroup.  # noqa: E501


        :return: The can_print_manifests of this SendToPrinterGroup.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_manifests

    @can_print_manifests.setter
    def can_print_manifests(self, can_print_manifests):
        """Sets the can_print_manifests of this SendToPrinterGroup.


        :param can_print_manifests: The can_print_manifests of this SendToPrinterGroup.  # noqa: E501
        :type: bool
        """

        self._can_print_manifests = can_print_manifests

    @property
    def can_print_commercial_invoice(self):
        """Gets the can_print_commercial_invoice of this SendToPrinterGroup.  # noqa: E501


        :return: The can_print_commercial_invoice of this SendToPrinterGroup.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_commercial_invoice

    @can_print_commercial_invoice.setter
    def can_print_commercial_invoice(self, can_print_commercial_invoice):
        """Sets the can_print_commercial_invoice of this SendToPrinterGroup.


        :param can_print_commercial_invoice: The can_print_commercial_invoice of this SendToPrinterGroup.  # noqa: E501
        :type: bool
        """

        self._can_print_commercial_invoice = can_print_commercial_invoice

    @property
    def has_commercial_invoice(self):
        """Gets the has_commercial_invoice of this SendToPrinterGroup.  # noqa: E501


        :return: The has_commercial_invoice of this SendToPrinterGroup.  # noqa: E501
        :rtype: bool
        """
        return self._has_commercial_invoice

    @has_commercial_invoice.setter
    def has_commercial_invoice(self, has_commercial_invoice):
        """Sets the has_commercial_invoice of this SendToPrinterGroup.


        :param has_commercial_invoice: The has_commercial_invoice of this SendToPrinterGroup.  # noqa: E501
        :type: bool
        """

        self._has_commercial_invoice = has_commercial_invoice

    @property
    def printers(self):
        """Gets the printers of this SendToPrinterGroup.  # noqa: E501


        :return: The printers of this SendToPrinterGroup.  # noqa: E501
        :rtype: list[PrinterLite]
        """
        return self._printers

    @printers.setter
    def printers(self, printers):
        """Sets the printers of this SendToPrinterGroup.


        :param printers: The printers of this SendToPrinterGroup.  # noqa: E501
        :type: list[PrinterLite]
        """

        self._printers = printers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendToPrinterGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendToPrinterGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
