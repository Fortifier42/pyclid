# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierServiceContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_service': 'CarrierServiceLite',
        'carrier_service_id': 'int',
        'order': 'int',
        'max_item_length': 'int',
        'max_item_width': 'int',
        'max_item_height': 'int',
        'max_item_weight': 'int',
        'min_item_length': 'int',
        'min_item_width': 'int',
        'min_item_height': 'int',
        'min_item_weight': 'int',
        'max_total_footprint': 'float',
        'max_weight': 'int',
        'max_volume': 'float',
        'max_item_volume': 'float',
        'min_item_volume': 'float',
        'total_rows': 'int'
    }

    attribute_map = {
        'id': 'id',
        'carrier_service': 'carrierService',
        'carrier_service_id': 'carrierServiceId',
        'order': 'order',
        'max_item_length': 'maxItemLength',
        'max_item_width': 'maxItemWidth',
        'max_item_height': 'maxItemHeight',
        'max_item_weight': 'maxItemWeight',
        'min_item_length': 'minItemLength',
        'min_item_width': 'minItemWidth',
        'min_item_height': 'minItemHeight',
        'min_item_weight': 'minItemWeight',
        'max_total_footprint': 'maxTotalFootprint',
        'max_weight': 'maxWeight',
        'max_volume': 'maxVolume',
        'max_item_volume': 'maxItemVolume',
        'min_item_volume': 'minItemVolume',
        'total_rows': 'totalRows'
    }

    def __init__(self, id=None, carrier_service=None, carrier_service_id=None, order=None, max_item_length=None, max_item_width=None, max_item_height=None, max_item_weight=None, min_item_length=None, min_item_width=None, min_item_height=None, min_item_weight=None, max_total_footprint=None, max_weight=None, max_volume=None, max_item_volume=None, min_item_volume=None, total_rows=None):  # noqa: E501
        """CarrierServiceContainer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_service = None
        self._carrier_service_id = None
        self._order = None
        self._max_item_length = None
        self._max_item_width = None
        self._max_item_height = None
        self._max_item_weight = None
        self._min_item_length = None
        self._min_item_width = None
        self._min_item_height = None
        self._min_item_weight = None
        self._max_total_footprint = None
        self._max_weight = None
        self._max_volume = None
        self._max_item_volume = None
        self._min_item_volume = None
        self._total_rows = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_service is not None:
            self.carrier_service = carrier_service
        if carrier_service_id is not None:
            self.carrier_service_id = carrier_service_id
        if order is not None:
            self.order = order
        if max_item_length is not None:
            self.max_item_length = max_item_length
        if max_item_width is not None:
            self.max_item_width = max_item_width
        if max_item_height is not None:
            self.max_item_height = max_item_height
        if max_item_weight is not None:
            self.max_item_weight = max_item_weight
        if min_item_length is not None:
            self.min_item_length = min_item_length
        if min_item_width is not None:
            self.min_item_width = min_item_width
        if min_item_height is not None:
            self.min_item_height = min_item_height
        if min_item_weight is not None:
            self.min_item_weight = min_item_weight
        if max_total_footprint is not None:
            self.max_total_footprint = max_total_footprint
        if max_weight is not None:
            self.max_weight = max_weight
        if max_volume is not None:
            self.max_volume = max_volume
        if max_item_volume is not None:
            self.max_item_volume = max_item_volume
        if min_item_volume is not None:
            self.min_item_volume = min_item_volume
        if total_rows is not None:
            self.total_rows = total_rows

    @property
    def id(self):
        """Gets the id of this CarrierServiceContainer.  # noqa: E501


        :return: The id of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierServiceContainer.


        :param id: The id of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_service(self):
        """Gets the carrier_service of this CarrierServiceContainer.  # noqa: E501


        :return: The carrier_service of this CarrierServiceContainer.  # noqa: E501
        :rtype: CarrierServiceLite
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this CarrierServiceContainer.


        :param carrier_service: The carrier_service of this CarrierServiceContainer.  # noqa: E501
        :type: CarrierServiceLite
        """

        self._carrier_service = carrier_service

    @property
    def carrier_service_id(self):
        """Gets the carrier_service_id of this CarrierServiceContainer.  # noqa: E501


        :return: The carrier_service_id of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._carrier_service_id

    @carrier_service_id.setter
    def carrier_service_id(self, carrier_service_id):
        """Sets the carrier_service_id of this CarrierServiceContainer.


        :param carrier_service_id: The carrier_service_id of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._carrier_service_id = carrier_service_id

    @property
    def order(self):
        """Gets the order of this CarrierServiceContainer.  # noqa: E501


        :return: The order of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CarrierServiceContainer.


        :param order: The order of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def max_item_length(self):
        """Gets the max_item_length of this CarrierServiceContainer.  # noqa: E501


        :return: The max_item_length of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._max_item_length

    @max_item_length.setter
    def max_item_length(self, max_item_length):
        """Sets the max_item_length of this CarrierServiceContainer.


        :param max_item_length: The max_item_length of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._max_item_length = max_item_length

    @property
    def max_item_width(self):
        """Gets the max_item_width of this CarrierServiceContainer.  # noqa: E501


        :return: The max_item_width of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._max_item_width

    @max_item_width.setter
    def max_item_width(self, max_item_width):
        """Sets the max_item_width of this CarrierServiceContainer.


        :param max_item_width: The max_item_width of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._max_item_width = max_item_width

    @property
    def max_item_height(self):
        """Gets the max_item_height of this CarrierServiceContainer.  # noqa: E501


        :return: The max_item_height of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._max_item_height

    @max_item_height.setter
    def max_item_height(self, max_item_height):
        """Sets the max_item_height of this CarrierServiceContainer.


        :param max_item_height: The max_item_height of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._max_item_height = max_item_height

    @property
    def max_item_weight(self):
        """Gets the max_item_weight of this CarrierServiceContainer.  # noqa: E501


        :return: The max_item_weight of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._max_item_weight

    @max_item_weight.setter
    def max_item_weight(self, max_item_weight):
        """Sets the max_item_weight of this CarrierServiceContainer.


        :param max_item_weight: The max_item_weight of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._max_item_weight = max_item_weight

    @property
    def min_item_length(self):
        """Gets the min_item_length of this CarrierServiceContainer.  # noqa: E501


        :return: The min_item_length of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._min_item_length

    @min_item_length.setter
    def min_item_length(self, min_item_length):
        """Sets the min_item_length of this CarrierServiceContainer.


        :param min_item_length: The min_item_length of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._min_item_length = min_item_length

    @property
    def min_item_width(self):
        """Gets the min_item_width of this CarrierServiceContainer.  # noqa: E501


        :return: The min_item_width of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._min_item_width

    @min_item_width.setter
    def min_item_width(self, min_item_width):
        """Sets the min_item_width of this CarrierServiceContainer.


        :param min_item_width: The min_item_width of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._min_item_width = min_item_width

    @property
    def min_item_height(self):
        """Gets the min_item_height of this CarrierServiceContainer.  # noqa: E501


        :return: The min_item_height of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._min_item_height

    @min_item_height.setter
    def min_item_height(self, min_item_height):
        """Sets the min_item_height of this CarrierServiceContainer.


        :param min_item_height: The min_item_height of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._min_item_height = min_item_height

    @property
    def min_item_weight(self):
        """Gets the min_item_weight of this CarrierServiceContainer.  # noqa: E501


        :return: The min_item_weight of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._min_item_weight

    @min_item_weight.setter
    def min_item_weight(self, min_item_weight):
        """Sets the min_item_weight of this CarrierServiceContainer.


        :param min_item_weight: The min_item_weight of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._min_item_weight = min_item_weight

    @property
    def max_total_footprint(self):
        """Gets the max_total_footprint of this CarrierServiceContainer.  # noqa: E501


        :return: The max_total_footprint of this CarrierServiceContainer.  # noqa: E501
        :rtype: float
        """
        return self._max_total_footprint

    @max_total_footprint.setter
    def max_total_footprint(self, max_total_footprint):
        """Sets the max_total_footprint of this CarrierServiceContainer.


        :param max_total_footprint: The max_total_footprint of this CarrierServiceContainer.  # noqa: E501
        :type: float
        """

        self._max_total_footprint = max_total_footprint

    @property
    def max_weight(self):
        """Gets the max_weight of this CarrierServiceContainer.  # noqa: E501


        :return: The max_weight of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._max_weight

    @max_weight.setter
    def max_weight(self, max_weight):
        """Sets the max_weight of this CarrierServiceContainer.


        :param max_weight: The max_weight of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._max_weight = max_weight

    @property
    def max_volume(self):
        """Gets the max_volume of this CarrierServiceContainer.  # noqa: E501


        :return: The max_volume of this CarrierServiceContainer.  # noqa: E501
        :rtype: float
        """
        return self._max_volume

    @max_volume.setter
    def max_volume(self, max_volume):
        """Sets the max_volume of this CarrierServiceContainer.


        :param max_volume: The max_volume of this CarrierServiceContainer.  # noqa: E501
        :type: float
        """

        self._max_volume = max_volume

    @property
    def max_item_volume(self):
        """Gets the max_item_volume of this CarrierServiceContainer.  # noqa: E501


        :return: The max_item_volume of this CarrierServiceContainer.  # noqa: E501
        :rtype: float
        """
        return self._max_item_volume

    @max_item_volume.setter
    def max_item_volume(self, max_item_volume):
        """Sets the max_item_volume of this CarrierServiceContainer.


        :param max_item_volume: The max_item_volume of this CarrierServiceContainer.  # noqa: E501
        :type: float
        """

        self._max_item_volume = max_item_volume

    @property
    def min_item_volume(self):
        """Gets the min_item_volume of this CarrierServiceContainer.  # noqa: E501


        :return: The min_item_volume of this CarrierServiceContainer.  # noqa: E501
        :rtype: float
        """
        return self._min_item_volume

    @min_item_volume.setter
    def min_item_volume(self, min_item_volume):
        """Sets the min_item_volume of this CarrierServiceContainer.


        :param min_item_volume: The min_item_volume of this CarrierServiceContainer.  # noqa: E501
        :type: float
        """

        self._min_item_volume = min_item_volume

    @property
    def total_rows(self):
        """Gets the total_rows of this CarrierServiceContainer.  # noqa: E501


        :return: The total_rows of this CarrierServiceContainer.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this CarrierServiceContainer.


        :param total_rows: The total_rows of this CarrierServiceContainer.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierServiceContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierServiceContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
