# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Carrier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'display_name': 'str',
        'auto_manifest_on_consignment_creation': 'bool',
        'group_manifests_by_service': 'bool',
        'accepts_despatch_times': 'bool',
        'carrier_distance_label_type': 'CarrierDistanceLabelType',
        'print_manifest_labels': 'bool',
        'print_consignment_labels': 'bool',
        'print_item_labels': 'bool',
        'print_special_instructions_labels': 'bool',
        'manual_booking_required': 'bool',
        'show_pickup_fields_when_manifesting': 'bool',
        'can_print_item_labels_before_manifesting': 'bool',
        'can_print_consignment_labels_before_manifesting': 'bool',
        'logo_file_name': 'str',
        'serialized_settings': 'str',
        'consignment_list_import': 'bool',
        'automatically_tracks_statuses': 'bool',
        'automatically_tracks_attachments': 'bool',
        'can_manually_track_statuses': 'bool',
        'can_manually_track_attachments': 'bool',
        'block_duplicate_statuses': 'bool',
        'show_tracking_coords': 'bool',
        'manifest_consignments_individually': 'bool',
        'manifest_group_by_despatch_time': 'bool',
        'volume_rounding_decimal_places': 'int',
        'volume_rounding_type': 'WeightRoundingType',
        'pickup_type': 'CarrierPickupType',
        'manifest_time_past_despatch_time_type': 'ManifestTimePastDespatchTimeType',
        'carrier_accounts': 'list[CarrierAccount]',
        'carrier_services': 'list[CarrierServiceModel]',
        'carrier_custom_field_sets': 'list[CustomFieldSet]',
        'carrier_custom_values': 'list[CustomValue]',
        'carrier_service_surcharges': 'list[Surcharge]',
        'carrier_service_groups': 'list[CarrierServiceGroup]',
        'has_account_ref_pools': 'bool',
        'supports_receiver_accounts': 'bool',
        'split_manifest_by_receiver_account': 'bool',
        'can_track_status_for_receiver_accounts': 'bool',
        'can_track_attachments_for_receiver_accounts': 'bool',
        'dg_enabled': 'bool',
        'max_item_lines_per_consignment': 'int',
        'has_account_code': 'bool',
        'has_consignment_prefix': 'bool',
        'has_consignment_ref_pool': 'bool',
        'has_item_ref_pool': 'bool',
        'has_manifest_ref_pool': 'bool',
        'has_tracking_username': 'bool',
        'has_tracking_password': 'bool',
        'can_change_primary_reference_type': 'bool',
        'consignment_ref_pool_number_padding': 'int',
        'manifest_ref_pool_number_padding': 'int',
        'item_ref_pool_number_padding': 'int',
        'item_number_padding': 'int',
        'account_code_name': 'str',
        'trading_name': 'str',
        'allow_consignment_consolidation': 'bool',
        'round_volume_per_item': 'bool',
        'can_deliver_to_post_office_boxes': 'bool',
        'max_number_of_consignments_per_manifest': 'int',
        'allow_automatic_eta_recalculation': 'bool',
        'default_carrier_integration_id': 'int',
        'default_carrier_integration': 'MachshipCarrierIntegration',
        'can_remanifest': 'bool',
        'can_rebook_pickup': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'display_name': 'displayName',
        'auto_manifest_on_consignment_creation': 'autoManifestOnConsignmentCreation',
        'group_manifests_by_service': 'groupManifestsByService',
        'accepts_despatch_times': 'acceptsDespatchTimes',
        'carrier_distance_label_type': 'carrierDistanceLabelType',
        'print_manifest_labels': 'printManifestLabels',
        'print_consignment_labels': 'printConsignmentLabels',
        'print_item_labels': 'printItemLabels',
        'print_special_instructions_labels': 'printSpecialInstructionsLabels',
        'manual_booking_required': 'manualBookingRequired',
        'show_pickup_fields_when_manifesting': 'showPickupFieldsWhenManifesting',
        'can_print_item_labels_before_manifesting': 'canPrintItemLabelsBeforeManifesting',
        'can_print_consignment_labels_before_manifesting': 'canPrintConsignmentLabelsBeforeManifesting',
        'logo_file_name': 'logoFileName',
        'serialized_settings': 'serializedSettings',
        'consignment_list_import': 'consignmentListImport',
        'automatically_tracks_statuses': 'automaticallyTracksStatuses',
        'automatically_tracks_attachments': 'automaticallyTracksAttachments',
        'can_manually_track_statuses': 'canManuallyTrackStatuses',
        'can_manually_track_attachments': 'canManuallyTrackAttachments',
        'block_duplicate_statuses': 'blockDuplicateStatuses',
        'show_tracking_coords': 'showTrackingCoords',
        'manifest_consignments_individually': 'manifestConsignmentsIndividually',
        'manifest_group_by_despatch_time': 'manifestGroupByDespatchTime',
        'volume_rounding_decimal_places': 'volumeRoundingDecimalPlaces',
        'volume_rounding_type': 'volumeRoundingType',
        'pickup_type': 'pickupType',
        'manifest_time_past_despatch_time_type': 'manifestTimePastDespatchTimeType',
        'carrier_accounts': 'carrierAccounts',
        'carrier_services': 'carrierServices',
        'carrier_custom_field_sets': 'carrierCustomFieldSets',
        'carrier_custom_values': 'carrierCustomValues',
        'carrier_service_surcharges': 'carrierServiceSurcharges',
        'carrier_service_groups': 'carrierServiceGroups',
        'has_account_ref_pools': 'hasAccountRefPools',
        'supports_receiver_accounts': 'supportsReceiverAccounts',
        'split_manifest_by_receiver_account': 'splitManifestByReceiverAccount',
        'can_track_status_for_receiver_accounts': 'canTrackStatusForReceiverAccounts',
        'can_track_attachments_for_receiver_accounts': 'canTrackAttachmentsForReceiverAccounts',
        'dg_enabled': 'dgEnabled',
        'max_item_lines_per_consignment': 'maxItemLinesPerConsignment',
        'has_account_code': 'hasAccountCode',
        'has_consignment_prefix': 'hasConsignmentPrefix',
        'has_consignment_ref_pool': 'hasConsignmentRefPool',
        'has_item_ref_pool': 'hasItemRefPool',
        'has_manifest_ref_pool': 'hasManifestRefPool',
        'has_tracking_username': 'hasTrackingUsername',
        'has_tracking_password': 'hasTrackingPassword',
        'can_change_primary_reference_type': 'canChangePrimaryReferenceType',
        'consignment_ref_pool_number_padding': 'consignmentRefPoolNumberPadding',
        'manifest_ref_pool_number_padding': 'manifestRefPoolNumberPadding',
        'item_ref_pool_number_padding': 'itemRefPoolNumberPadding',
        'item_number_padding': 'itemNumberPadding',
        'account_code_name': 'accountCodeName',
        'trading_name': 'tradingName',
        'allow_consignment_consolidation': 'allowConsignmentConsolidation',
        'round_volume_per_item': 'roundVolumePerItem',
        'can_deliver_to_post_office_boxes': 'canDeliverToPostOfficeBoxes',
        'max_number_of_consignments_per_manifest': 'maxNumberOfConsignmentsPerManifest',
        'allow_automatic_eta_recalculation': 'allowAutomaticEtaRecalculation',
        'default_carrier_integration_id': 'defaultCarrierIntegrationId',
        'default_carrier_integration': 'defaultCarrierIntegration',
        'can_remanifest': 'canRemanifest',
        'can_rebook_pickup': 'canRebookPickup'
    }

    def __init__(self, id=None, name=None, abbreviation=None, display_name=None, auto_manifest_on_consignment_creation=None, group_manifests_by_service=None, accepts_despatch_times=None, carrier_distance_label_type=None, print_manifest_labels=None, print_consignment_labels=None, print_item_labels=None, print_special_instructions_labels=None, manual_booking_required=None, show_pickup_fields_when_manifesting=None, can_print_item_labels_before_manifesting=None, can_print_consignment_labels_before_manifesting=None, logo_file_name=None, serialized_settings=None, consignment_list_import=None, automatically_tracks_statuses=None, automatically_tracks_attachments=None, can_manually_track_statuses=None, can_manually_track_attachments=None, block_duplicate_statuses=None, show_tracking_coords=None, manifest_consignments_individually=None, manifest_group_by_despatch_time=None, volume_rounding_decimal_places=None, volume_rounding_type=None, pickup_type=None, manifest_time_past_despatch_time_type=None, carrier_accounts=None, carrier_services=None, carrier_custom_field_sets=None, carrier_custom_values=None, carrier_service_surcharges=None, carrier_service_groups=None, has_account_ref_pools=None, supports_receiver_accounts=None, split_manifest_by_receiver_account=None, can_track_status_for_receiver_accounts=None, can_track_attachments_for_receiver_accounts=None, dg_enabled=None, max_item_lines_per_consignment=None, has_account_code=None, has_consignment_prefix=None, has_consignment_ref_pool=None, has_item_ref_pool=None, has_manifest_ref_pool=None, has_tracking_username=None, has_tracking_password=None, can_change_primary_reference_type=None, consignment_ref_pool_number_padding=None, manifest_ref_pool_number_padding=None, item_ref_pool_number_padding=None, item_number_padding=None, account_code_name=None, trading_name=None, allow_consignment_consolidation=None, round_volume_per_item=None, can_deliver_to_post_office_boxes=None, max_number_of_consignments_per_manifest=None, allow_automatic_eta_recalculation=None, default_carrier_integration_id=None, default_carrier_integration=None, can_remanifest=None, can_rebook_pickup=None):  # noqa: E501
        """Carrier - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._abbreviation = None
        self._display_name = None
        self._auto_manifest_on_consignment_creation = None
        self._group_manifests_by_service = None
        self._accepts_despatch_times = None
        self._carrier_distance_label_type = None
        self._print_manifest_labels = None
        self._print_consignment_labels = None
        self._print_item_labels = None
        self._print_special_instructions_labels = None
        self._manual_booking_required = None
        self._show_pickup_fields_when_manifesting = None
        self._can_print_item_labels_before_manifesting = None
        self._can_print_consignment_labels_before_manifesting = None
        self._logo_file_name = None
        self._serialized_settings = None
        self._consignment_list_import = None
        self._automatically_tracks_statuses = None
        self._automatically_tracks_attachments = None
        self._can_manually_track_statuses = None
        self._can_manually_track_attachments = None
        self._block_duplicate_statuses = None
        self._show_tracking_coords = None
        self._manifest_consignments_individually = None
        self._manifest_group_by_despatch_time = None
        self._volume_rounding_decimal_places = None
        self._volume_rounding_type = None
        self._pickup_type = None
        self._manifest_time_past_despatch_time_type = None
        self._carrier_accounts = None
        self._carrier_services = None
        self._carrier_custom_field_sets = None
        self._carrier_custom_values = None
        self._carrier_service_surcharges = None
        self._carrier_service_groups = None
        self._has_account_ref_pools = None
        self._supports_receiver_accounts = None
        self._split_manifest_by_receiver_account = None
        self._can_track_status_for_receiver_accounts = None
        self._can_track_attachments_for_receiver_accounts = None
        self._dg_enabled = None
        self._max_item_lines_per_consignment = None
        self._has_account_code = None
        self._has_consignment_prefix = None
        self._has_consignment_ref_pool = None
        self._has_item_ref_pool = None
        self._has_manifest_ref_pool = None
        self._has_tracking_username = None
        self._has_tracking_password = None
        self._can_change_primary_reference_type = None
        self._consignment_ref_pool_number_padding = None
        self._manifest_ref_pool_number_padding = None
        self._item_ref_pool_number_padding = None
        self._item_number_padding = None
        self._account_code_name = None
        self._trading_name = None
        self._allow_consignment_consolidation = None
        self._round_volume_per_item = None
        self._can_deliver_to_post_office_boxes = None
        self._max_number_of_consignments_per_manifest = None
        self._allow_automatic_eta_recalculation = None
        self._default_carrier_integration_id = None
        self._default_carrier_integration = None
        self._can_remanifest = None
        self._can_rebook_pickup = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.abbreviation = abbreviation
        if display_name is not None:
            self.display_name = display_name
        if auto_manifest_on_consignment_creation is not None:
            self.auto_manifest_on_consignment_creation = auto_manifest_on_consignment_creation
        if group_manifests_by_service is not None:
            self.group_manifests_by_service = group_manifests_by_service
        if accepts_despatch_times is not None:
            self.accepts_despatch_times = accepts_despatch_times
        if carrier_distance_label_type is not None:
            self.carrier_distance_label_type = carrier_distance_label_type
        if print_manifest_labels is not None:
            self.print_manifest_labels = print_manifest_labels
        if print_consignment_labels is not None:
            self.print_consignment_labels = print_consignment_labels
        if print_item_labels is not None:
            self.print_item_labels = print_item_labels
        if print_special_instructions_labels is not None:
            self.print_special_instructions_labels = print_special_instructions_labels
        if manual_booking_required is not None:
            self.manual_booking_required = manual_booking_required
        if show_pickup_fields_when_manifesting is not None:
            self.show_pickup_fields_when_manifesting = show_pickup_fields_when_manifesting
        if can_print_item_labels_before_manifesting is not None:
            self.can_print_item_labels_before_manifesting = can_print_item_labels_before_manifesting
        if can_print_consignment_labels_before_manifesting is not None:
            self.can_print_consignment_labels_before_manifesting = can_print_consignment_labels_before_manifesting
        if logo_file_name is not None:
            self.logo_file_name = logo_file_name
        if serialized_settings is not None:
            self.serialized_settings = serialized_settings
        if consignment_list_import is not None:
            self.consignment_list_import = consignment_list_import
        if automatically_tracks_statuses is not None:
            self.automatically_tracks_statuses = automatically_tracks_statuses
        if automatically_tracks_attachments is not None:
            self.automatically_tracks_attachments = automatically_tracks_attachments
        if can_manually_track_statuses is not None:
            self.can_manually_track_statuses = can_manually_track_statuses
        if can_manually_track_attachments is not None:
            self.can_manually_track_attachments = can_manually_track_attachments
        if block_duplicate_statuses is not None:
            self.block_duplicate_statuses = block_duplicate_statuses
        if show_tracking_coords is not None:
            self.show_tracking_coords = show_tracking_coords
        if manifest_consignments_individually is not None:
            self.manifest_consignments_individually = manifest_consignments_individually
        if manifest_group_by_despatch_time is not None:
            self.manifest_group_by_despatch_time = manifest_group_by_despatch_time
        if volume_rounding_decimal_places is not None:
            self.volume_rounding_decimal_places = volume_rounding_decimal_places
        if volume_rounding_type is not None:
            self.volume_rounding_type = volume_rounding_type
        if pickup_type is not None:
            self.pickup_type = pickup_type
        if manifest_time_past_despatch_time_type is not None:
            self.manifest_time_past_despatch_time_type = manifest_time_past_despatch_time_type
        if carrier_accounts is not None:
            self.carrier_accounts = carrier_accounts
        if carrier_services is not None:
            self.carrier_services = carrier_services
        if carrier_custom_field_sets is not None:
            self.carrier_custom_field_sets = carrier_custom_field_sets
        if carrier_custom_values is not None:
            self.carrier_custom_values = carrier_custom_values
        if carrier_service_surcharges is not None:
            self.carrier_service_surcharges = carrier_service_surcharges
        if carrier_service_groups is not None:
            self.carrier_service_groups = carrier_service_groups
        if has_account_ref_pools is not None:
            self.has_account_ref_pools = has_account_ref_pools
        if supports_receiver_accounts is not None:
            self.supports_receiver_accounts = supports_receiver_accounts
        if split_manifest_by_receiver_account is not None:
            self.split_manifest_by_receiver_account = split_manifest_by_receiver_account
        if can_track_status_for_receiver_accounts is not None:
            self.can_track_status_for_receiver_accounts = can_track_status_for_receiver_accounts
        if can_track_attachments_for_receiver_accounts is not None:
            self.can_track_attachments_for_receiver_accounts = can_track_attachments_for_receiver_accounts
        if dg_enabled is not None:
            self.dg_enabled = dg_enabled
        if max_item_lines_per_consignment is not None:
            self.max_item_lines_per_consignment = max_item_lines_per_consignment
        if has_account_code is not None:
            self.has_account_code = has_account_code
        if has_consignment_prefix is not None:
            self.has_consignment_prefix = has_consignment_prefix
        if has_consignment_ref_pool is not None:
            self.has_consignment_ref_pool = has_consignment_ref_pool
        if has_item_ref_pool is not None:
            self.has_item_ref_pool = has_item_ref_pool
        if has_manifest_ref_pool is not None:
            self.has_manifest_ref_pool = has_manifest_ref_pool
        if has_tracking_username is not None:
            self.has_tracking_username = has_tracking_username
        if has_tracking_password is not None:
            self.has_tracking_password = has_tracking_password
        if can_change_primary_reference_type is not None:
            self.can_change_primary_reference_type = can_change_primary_reference_type
        if consignment_ref_pool_number_padding is not None:
            self.consignment_ref_pool_number_padding = consignment_ref_pool_number_padding
        if manifest_ref_pool_number_padding is not None:
            self.manifest_ref_pool_number_padding = manifest_ref_pool_number_padding
        if item_ref_pool_number_padding is not None:
            self.item_ref_pool_number_padding = item_ref_pool_number_padding
        if item_number_padding is not None:
            self.item_number_padding = item_number_padding
        if account_code_name is not None:
            self.account_code_name = account_code_name
        if trading_name is not None:
            self.trading_name = trading_name
        if allow_consignment_consolidation is not None:
            self.allow_consignment_consolidation = allow_consignment_consolidation
        if round_volume_per_item is not None:
            self.round_volume_per_item = round_volume_per_item
        if can_deliver_to_post_office_boxes is not None:
            self.can_deliver_to_post_office_boxes = can_deliver_to_post_office_boxes
        if max_number_of_consignments_per_manifest is not None:
            self.max_number_of_consignments_per_manifest = max_number_of_consignments_per_manifest
        if allow_automatic_eta_recalculation is not None:
            self.allow_automatic_eta_recalculation = allow_automatic_eta_recalculation
        if default_carrier_integration_id is not None:
            self.default_carrier_integration_id = default_carrier_integration_id
        if default_carrier_integration is not None:
            self.default_carrier_integration = default_carrier_integration
        if can_remanifest is not None:
            self.can_remanifest = can_remanifest
        if can_rebook_pickup is not None:
            self.can_rebook_pickup = can_rebook_pickup

    @property
    def id(self):
        """Gets the id of this Carrier.  # noqa: E501


        :return: The id of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Carrier.


        :param id: The id of this Carrier.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Carrier.  # noqa: E501


        :return: The name of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Carrier.


        :param name: The name of this Carrier.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Carrier.  # noqa: E501


        :return: The abbreviation of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Carrier.


        :param abbreviation: The abbreviation of this Carrier.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def display_name(self):
        """Gets the display_name of this Carrier.  # noqa: E501


        :return: The display_name of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Carrier.


        :param display_name: The display_name of this Carrier.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def auto_manifest_on_consignment_creation(self):
        """Gets the auto_manifest_on_consignment_creation of this Carrier.  # noqa: E501


        :return: The auto_manifest_on_consignment_creation of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._auto_manifest_on_consignment_creation

    @auto_manifest_on_consignment_creation.setter
    def auto_manifest_on_consignment_creation(self, auto_manifest_on_consignment_creation):
        """Sets the auto_manifest_on_consignment_creation of this Carrier.


        :param auto_manifest_on_consignment_creation: The auto_manifest_on_consignment_creation of this Carrier.  # noqa: E501
        :type: bool
        """

        self._auto_manifest_on_consignment_creation = auto_manifest_on_consignment_creation

    @property
    def group_manifests_by_service(self):
        """Gets the group_manifests_by_service of this Carrier.  # noqa: E501


        :return: The group_manifests_by_service of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._group_manifests_by_service

    @group_manifests_by_service.setter
    def group_manifests_by_service(self, group_manifests_by_service):
        """Sets the group_manifests_by_service of this Carrier.


        :param group_manifests_by_service: The group_manifests_by_service of this Carrier.  # noqa: E501
        :type: bool
        """

        self._group_manifests_by_service = group_manifests_by_service

    @property
    def accepts_despatch_times(self):
        """Gets the accepts_despatch_times of this Carrier.  # noqa: E501


        :return: The accepts_despatch_times of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_despatch_times

    @accepts_despatch_times.setter
    def accepts_despatch_times(self, accepts_despatch_times):
        """Sets the accepts_despatch_times of this Carrier.


        :param accepts_despatch_times: The accepts_despatch_times of this Carrier.  # noqa: E501
        :type: bool
        """

        self._accepts_despatch_times = accepts_despatch_times

    @property
    def carrier_distance_label_type(self):
        """Gets the carrier_distance_label_type of this Carrier.  # noqa: E501


        :return: The carrier_distance_label_type of this Carrier.  # noqa: E501
        :rtype: CarrierDistanceLabelType
        """
        return self._carrier_distance_label_type

    @carrier_distance_label_type.setter
    def carrier_distance_label_type(self, carrier_distance_label_type):
        """Sets the carrier_distance_label_type of this Carrier.


        :param carrier_distance_label_type: The carrier_distance_label_type of this Carrier.  # noqa: E501
        :type: CarrierDistanceLabelType
        """

        self._carrier_distance_label_type = carrier_distance_label_type

    @property
    def print_manifest_labels(self):
        """Gets the print_manifest_labels of this Carrier.  # noqa: E501


        :return: The print_manifest_labels of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._print_manifest_labels

    @print_manifest_labels.setter
    def print_manifest_labels(self, print_manifest_labels):
        """Sets the print_manifest_labels of this Carrier.


        :param print_manifest_labels: The print_manifest_labels of this Carrier.  # noqa: E501
        :type: bool
        """

        self._print_manifest_labels = print_manifest_labels

    @property
    def print_consignment_labels(self):
        """Gets the print_consignment_labels of this Carrier.  # noqa: E501


        :return: The print_consignment_labels of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._print_consignment_labels

    @print_consignment_labels.setter
    def print_consignment_labels(self, print_consignment_labels):
        """Sets the print_consignment_labels of this Carrier.


        :param print_consignment_labels: The print_consignment_labels of this Carrier.  # noqa: E501
        :type: bool
        """

        self._print_consignment_labels = print_consignment_labels

    @property
    def print_item_labels(self):
        """Gets the print_item_labels of this Carrier.  # noqa: E501


        :return: The print_item_labels of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._print_item_labels

    @print_item_labels.setter
    def print_item_labels(self, print_item_labels):
        """Sets the print_item_labels of this Carrier.


        :param print_item_labels: The print_item_labels of this Carrier.  # noqa: E501
        :type: bool
        """

        self._print_item_labels = print_item_labels

    @property
    def print_special_instructions_labels(self):
        """Gets the print_special_instructions_labels of this Carrier.  # noqa: E501


        :return: The print_special_instructions_labels of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._print_special_instructions_labels

    @print_special_instructions_labels.setter
    def print_special_instructions_labels(self, print_special_instructions_labels):
        """Sets the print_special_instructions_labels of this Carrier.


        :param print_special_instructions_labels: The print_special_instructions_labels of this Carrier.  # noqa: E501
        :type: bool
        """

        self._print_special_instructions_labels = print_special_instructions_labels

    @property
    def manual_booking_required(self):
        """Gets the manual_booking_required of this Carrier.  # noqa: E501


        :return: The manual_booking_required of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._manual_booking_required

    @manual_booking_required.setter
    def manual_booking_required(self, manual_booking_required):
        """Sets the manual_booking_required of this Carrier.


        :param manual_booking_required: The manual_booking_required of this Carrier.  # noqa: E501
        :type: bool
        """

        self._manual_booking_required = manual_booking_required

    @property
    def show_pickup_fields_when_manifesting(self):
        """Gets the show_pickup_fields_when_manifesting of this Carrier.  # noqa: E501


        :return: The show_pickup_fields_when_manifesting of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._show_pickup_fields_when_manifesting

    @show_pickup_fields_when_manifesting.setter
    def show_pickup_fields_when_manifesting(self, show_pickup_fields_when_manifesting):
        """Sets the show_pickup_fields_when_manifesting of this Carrier.


        :param show_pickup_fields_when_manifesting: The show_pickup_fields_when_manifesting of this Carrier.  # noqa: E501
        :type: bool
        """

        self._show_pickup_fields_when_manifesting = show_pickup_fields_when_manifesting

    @property
    def can_print_item_labels_before_manifesting(self):
        """Gets the can_print_item_labels_before_manifesting of this Carrier.  # noqa: E501


        :return: The can_print_item_labels_before_manifesting of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_item_labels_before_manifesting

    @can_print_item_labels_before_manifesting.setter
    def can_print_item_labels_before_manifesting(self, can_print_item_labels_before_manifesting):
        """Sets the can_print_item_labels_before_manifesting of this Carrier.


        :param can_print_item_labels_before_manifesting: The can_print_item_labels_before_manifesting of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_print_item_labels_before_manifesting = can_print_item_labels_before_manifesting

    @property
    def can_print_consignment_labels_before_manifesting(self):
        """Gets the can_print_consignment_labels_before_manifesting of this Carrier.  # noqa: E501


        :return: The can_print_consignment_labels_before_manifesting of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_consignment_labels_before_manifesting

    @can_print_consignment_labels_before_manifesting.setter
    def can_print_consignment_labels_before_manifesting(self, can_print_consignment_labels_before_manifesting):
        """Sets the can_print_consignment_labels_before_manifesting of this Carrier.


        :param can_print_consignment_labels_before_manifesting: The can_print_consignment_labels_before_manifesting of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_print_consignment_labels_before_manifesting = can_print_consignment_labels_before_manifesting

    @property
    def logo_file_name(self):
        """Gets the logo_file_name of this Carrier.  # noqa: E501


        :return: The logo_file_name of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._logo_file_name

    @logo_file_name.setter
    def logo_file_name(self, logo_file_name):
        """Sets the logo_file_name of this Carrier.


        :param logo_file_name: The logo_file_name of this Carrier.  # noqa: E501
        :type: str
        """

        self._logo_file_name = logo_file_name

    @property
    def serialized_settings(self):
        """Gets the serialized_settings of this Carrier.  # noqa: E501


        :return: The serialized_settings of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._serialized_settings

    @serialized_settings.setter
    def serialized_settings(self, serialized_settings):
        """Sets the serialized_settings of this Carrier.


        :param serialized_settings: The serialized_settings of this Carrier.  # noqa: E501
        :type: str
        """

        self._serialized_settings = serialized_settings

    @property
    def consignment_list_import(self):
        """Gets the consignment_list_import of this Carrier.  # noqa: E501


        :return: The consignment_list_import of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._consignment_list_import

    @consignment_list_import.setter
    def consignment_list_import(self, consignment_list_import):
        """Sets the consignment_list_import of this Carrier.


        :param consignment_list_import: The consignment_list_import of this Carrier.  # noqa: E501
        :type: bool
        """

        self._consignment_list_import = consignment_list_import

    @property
    def automatically_tracks_statuses(self):
        """Gets the automatically_tracks_statuses of this Carrier.  # noqa: E501


        :return: The automatically_tracks_statuses of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_tracks_statuses

    @automatically_tracks_statuses.setter
    def automatically_tracks_statuses(self, automatically_tracks_statuses):
        """Sets the automatically_tracks_statuses of this Carrier.


        :param automatically_tracks_statuses: The automatically_tracks_statuses of this Carrier.  # noqa: E501
        :type: bool
        """

        self._automatically_tracks_statuses = automatically_tracks_statuses

    @property
    def automatically_tracks_attachments(self):
        """Gets the automatically_tracks_attachments of this Carrier.  # noqa: E501


        :return: The automatically_tracks_attachments of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_tracks_attachments

    @automatically_tracks_attachments.setter
    def automatically_tracks_attachments(self, automatically_tracks_attachments):
        """Sets the automatically_tracks_attachments of this Carrier.


        :param automatically_tracks_attachments: The automatically_tracks_attachments of this Carrier.  # noqa: E501
        :type: bool
        """

        self._automatically_tracks_attachments = automatically_tracks_attachments

    @property
    def can_manually_track_statuses(self):
        """Gets the can_manually_track_statuses of this Carrier.  # noqa: E501


        :return: The can_manually_track_statuses of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_manually_track_statuses

    @can_manually_track_statuses.setter
    def can_manually_track_statuses(self, can_manually_track_statuses):
        """Sets the can_manually_track_statuses of this Carrier.


        :param can_manually_track_statuses: The can_manually_track_statuses of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_manually_track_statuses = can_manually_track_statuses

    @property
    def can_manually_track_attachments(self):
        """Gets the can_manually_track_attachments of this Carrier.  # noqa: E501


        :return: The can_manually_track_attachments of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_manually_track_attachments

    @can_manually_track_attachments.setter
    def can_manually_track_attachments(self, can_manually_track_attachments):
        """Sets the can_manually_track_attachments of this Carrier.


        :param can_manually_track_attachments: The can_manually_track_attachments of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_manually_track_attachments = can_manually_track_attachments

    @property
    def block_duplicate_statuses(self):
        """Gets the block_duplicate_statuses of this Carrier.  # noqa: E501


        :return: The block_duplicate_statuses of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._block_duplicate_statuses

    @block_duplicate_statuses.setter
    def block_duplicate_statuses(self, block_duplicate_statuses):
        """Sets the block_duplicate_statuses of this Carrier.


        :param block_duplicate_statuses: The block_duplicate_statuses of this Carrier.  # noqa: E501
        :type: bool
        """

        self._block_duplicate_statuses = block_duplicate_statuses

    @property
    def show_tracking_coords(self):
        """Gets the show_tracking_coords of this Carrier.  # noqa: E501


        :return: The show_tracking_coords of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._show_tracking_coords

    @show_tracking_coords.setter
    def show_tracking_coords(self, show_tracking_coords):
        """Sets the show_tracking_coords of this Carrier.


        :param show_tracking_coords: The show_tracking_coords of this Carrier.  # noqa: E501
        :type: bool
        """

        self._show_tracking_coords = show_tracking_coords

    @property
    def manifest_consignments_individually(self):
        """Gets the manifest_consignments_individually of this Carrier.  # noqa: E501

        If this is true, every consignment needs its own manifest for this carrier  # noqa: E501

        :return: The manifest_consignments_individually of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._manifest_consignments_individually

    @manifest_consignments_individually.setter
    def manifest_consignments_individually(self, manifest_consignments_individually):
        """Sets the manifest_consignments_individually of this Carrier.

        If this is true, every consignment needs its own manifest for this carrier  # noqa: E501

        :param manifest_consignments_individually: The manifest_consignments_individually of this Carrier.  # noqa: E501
        :type: bool
        """

        self._manifest_consignments_individually = manifest_consignments_individually

    @property
    def manifest_group_by_despatch_time(self):
        """Gets the manifest_group_by_despatch_time of this Carrier.  # noqa: E501


        :return: The manifest_group_by_despatch_time of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._manifest_group_by_despatch_time

    @manifest_group_by_despatch_time.setter
    def manifest_group_by_despatch_time(self, manifest_group_by_despatch_time):
        """Sets the manifest_group_by_despatch_time of this Carrier.


        :param manifest_group_by_despatch_time: The manifest_group_by_despatch_time of this Carrier.  # noqa: E501
        :type: bool
        """

        self._manifest_group_by_despatch_time = manifest_group_by_despatch_time

    @property
    def volume_rounding_decimal_places(self):
        """Gets the volume_rounding_decimal_places of this Carrier.  # noqa: E501


        :return: The volume_rounding_decimal_places of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._volume_rounding_decimal_places

    @volume_rounding_decimal_places.setter
    def volume_rounding_decimal_places(self, volume_rounding_decimal_places):
        """Sets the volume_rounding_decimal_places of this Carrier.


        :param volume_rounding_decimal_places: The volume_rounding_decimal_places of this Carrier.  # noqa: E501
        :type: int
        """

        self._volume_rounding_decimal_places = volume_rounding_decimal_places

    @property
    def volume_rounding_type(self):
        """Gets the volume_rounding_type of this Carrier.  # noqa: E501


        :return: The volume_rounding_type of this Carrier.  # noqa: E501
        :rtype: WeightRoundingType
        """
        return self._volume_rounding_type

    @volume_rounding_type.setter
    def volume_rounding_type(self, volume_rounding_type):
        """Sets the volume_rounding_type of this Carrier.


        :param volume_rounding_type: The volume_rounding_type of this Carrier.  # noqa: E501
        :type: WeightRoundingType
        """

        self._volume_rounding_type = volume_rounding_type

    @property
    def pickup_type(self):
        """Gets the pickup_type of this Carrier.  # noqa: E501


        :return: The pickup_type of this Carrier.  # noqa: E501
        :rtype: CarrierPickupType
        """
        return self._pickup_type

    @pickup_type.setter
    def pickup_type(self, pickup_type):
        """Sets the pickup_type of this Carrier.


        :param pickup_type: The pickup_type of this Carrier.  # noqa: E501
        :type: CarrierPickupType
        """

        self._pickup_type = pickup_type

    @property
    def manifest_time_past_despatch_time_type(self):
        """Gets the manifest_time_past_despatch_time_type of this Carrier.  # noqa: E501


        :return: The manifest_time_past_despatch_time_type of this Carrier.  # noqa: E501
        :rtype: ManifestTimePastDespatchTimeType
        """
        return self._manifest_time_past_despatch_time_type

    @manifest_time_past_despatch_time_type.setter
    def manifest_time_past_despatch_time_type(self, manifest_time_past_despatch_time_type):
        """Sets the manifest_time_past_despatch_time_type of this Carrier.


        :param manifest_time_past_despatch_time_type: The manifest_time_past_despatch_time_type of this Carrier.  # noqa: E501
        :type: ManifestTimePastDespatchTimeType
        """

        self._manifest_time_past_despatch_time_type = manifest_time_past_despatch_time_type

    @property
    def carrier_accounts(self):
        """Gets the carrier_accounts of this Carrier.  # noqa: E501


        :return: The carrier_accounts of this Carrier.  # noqa: E501
        :rtype: list[CarrierAccount]
        """
        return self._carrier_accounts

    @carrier_accounts.setter
    def carrier_accounts(self, carrier_accounts):
        """Sets the carrier_accounts of this Carrier.


        :param carrier_accounts: The carrier_accounts of this Carrier.  # noqa: E501
        :type: list[CarrierAccount]
        """

        self._carrier_accounts = carrier_accounts

    @property
    def carrier_services(self):
        """Gets the carrier_services of this Carrier.  # noqa: E501


        :return: The carrier_services of this Carrier.  # noqa: E501
        :rtype: list[CarrierServiceModel]
        """
        return self._carrier_services

    @carrier_services.setter
    def carrier_services(self, carrier_services):
        """Sets the carrier_services of this Carrier.


        :param carrier_services: The carrier_services of this Carrier.  # noqa: E501
        :type: list[CarrierServiceModel]
        """

        self._carrier_services = carrier_services

    @property
    def carrier_custom_field_sets(self):
        """Gets the carrier_custom_field_sets of this Carrier.  # noqa: E501


        :return: The carrier_custom_field_sets of this Carrier.  # noqa: E501
        :rtype: list[CustomFieldSet]
        """
        return self._carrier_custom_field_sets

    @carrier_custom_field_sets.setter
    def carrier_custom_field_sets(self, carrier_custom_field_sets):
        """Sets the carrier_custom_field_sets of this Carrier.


        :param carrier_custom_field_sets: The carrier_custom_field_sets of this Carrier.  # noqa: E501
        :type: list[CustomFieldSet]
        """

        self._carrier_custom_field_sets = carrier_custom_field_sets

    @property
    def carrier_custom_values(self):
        """Gets the carrier_custom_values of this Carrier.  # noqa: E501


        :return: The carrier_custom_values of this Carrier.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._carrier_custom_values

    @carrier_custom_values.setter
    def carrier_custom_values(self, carrier_custom_values):
        """Sets the carrier_custom_values of this Carrier.


        :param carrier_custom_values: The carrier_custom_values of this Carrier.  # noqa: E501
        :type: list[CustomValue]
        """

        self._carrier_custom_values = carrier_custom_values

    @property
    def carrier_service_surcharges(self):
        """Gets the carrier_service_surcharges of this Carrier.  # noqa: E501


        :return: The carrier_service_surcharges of this Carrier.  # noqa: E501
        :rtype: list[Surcharge]
        """
        return self._carrier_service_surcharges

    @carrier_service_surcharges.setter
    def carrier_service_surcharges(self, carrier_service_surcharges):
        """Sets the carrier_service_surcharges of this Carrier.


        :param carrier_service_surcharges: The carrier_service_surcharges of this Carrier.  # noqa: E501
        :type: list[Surcharge]
        """

        self._carrier_service_surcharges = carrier_service_surcharges

    @property
    def carrier_service_groups(self):
        """Gets the carrier_service_groups of this Carrier.  # noqa: E501


        :return: The carrier_service_groups of this Carrier.  # noqa: E501
        :rtype: list[CarrierServiceGroup]
        """
        return self._carrier_service_groups

    @carrier_service_groups.setter
    def carrier_service_groups(self, carrier_service_groups):
        """Sets the carrier_service_groups of this Carrier.


        :param carrier_service_groups: The carrier_service_groups of this Carrier.  # noqa: E501
        :type: list[CarrierServiceGroup]
        """

        self._carrier_service_groups = carrier_service_groups

    @property
    def has_account_ref_pools(self):
        """Gets the has_account_ref_pools of this Carrier.  # noqa: E501


        :return: The has_account_ref_pools of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_account_ref_pools

    @has_account_ref_pools.setter
    def has_account_ref_pools(self, has_account_ref_pools):
        """Sets the has_account_ref_pools of this Carrier.


        :param has_account_ref_pools: The has_account_ref_pools of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_account_ref_pools = has_account_ref_pools

    @property
    def supports_receiver_accounts(self):
        """Gets the supports_receiver_accounts of this Carrier.  # noqa: E501


        :return: The supports_receiver_accounts of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._supports_receiver_accounts

    @supports_receiver_accounts.setter
    def supports_receiver_accounts(self, supports_receiver_accounts):
        """Sets the supports_receiver_accounts of this Carrier.


        :param supports_receiver_accounts: The supports_receiver_accounts of this Carrier.  # noqa: E501
        :type: bool
        """

        self._supports_receiver_accounts = supports_receiver_accounts

    @property
    def split_manifest_by_receiver_account(self):
        """Gets the split_manifest_by_receiver_account of this Carrier.  # noqa: E501


        :return: The split_manifest_by_receiver_account of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._split_manifest_by_receiver_account

    @split_manifest_by_receiver_account.setter
    def split_manifest_by_receiver_account(self, split_manifest_by_receiver_account):
        """Sets the split_manifest_by_receiver_account of this Carrier.


        :param split_manifest_by_receiver_account: The split_manifest_by_receiver_account of this Carrier.  # noqa: E501
        :type: bool
        """

        self._split_manifest_by_receiver_account = split_manifest_by_receiver_account

    @property
    def can_track_status_for_receiver_accounts(self):
        """Gets the can_track_status_for_receiver_accounts of this Carrier.  # noqa: E501


        :return: The can_track_status_for_receiver_accounts of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_track_status_for_receiver_accounts

    @can_track_status_for_receiver_accounts.setter
    def can_track_status_for_receiver_accounts(self, can_track_status_for_receiver_accounts):
        """Sets the can_track_status_for_receiver_accounts of this Carrier.


        :param can_track_status_for_receiver_accounts: The can_track_status_for_receiver_accounts of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_track_status_for_receiver_accounts = can_track_status_for_receiver_accounts

    @property
    def can_track_attachments_for_receiver_accounts(self):
        """Gets the can_track_attachments_for_receiver_accounts of this Carrier.  # noqa: E501


        :return: The can_track_attachments_for_receiver_accounts of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_track_attachments_for_receiver_accounts

    @can_track_attachments_for_receiver_accounts.setter
    def can_track_attachments_for_receiver_accounts(self, can_track_attachments_for_receiver_accounts):
        """Sets the can_track_attachments_for_receiver_accounts of this Carrier.


        :param can_track_attachments_for_receiver_accounts: The can_track_attachments_for_receiver_accounts of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_track_attachments_for_receiver_accounts = can_track_attachments_for_receiver_accounts

    @property
    def dg_enabled(self):
        """Gets the dg_enabled of this Carrier.  # noqa: E501


        :return: The dg_enabled of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._dg_enabled

    @dg_enabled.setter
    def dg_enabled(self, dg_enabled):
        """Sets the dg_enabled of this Carrier.


        :param dg_enabled: The dg_enabled of this Carrier.  # noqa: E501
        :type: bool
        """

        self._dg_enabled = dg_enabled

    @property
    def max_item_lines_per_consignment(self):
        """Gets the max_item_lines_per_consignment of this Carrier.  # noqa: E501


        :return: The max_item_lines_per_consignment of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._max_item_lines_per_consignment

    @max_item_lines_per_consignment.setter
    def max_item_lines_per_consignment(self, max_item_lines_per_consignment):
        """Sets the max_item_lines_per_consignment of this Carrier.


        :param max_item_lines_per_consignment: The max_item_lines_per_consignment of this Carrier.  # noqa: E501
        :type: int
        """

        self._max_item_lines_per_consignment = max_item_lines_per_consignment

    @property
    def has_account_code(self):
        """Gets the has_account_code of this Carrier.  # noqa: E501


        :return: The has_account_code of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_account_code

    @has_account_code.setter
    def has_account_code(self, has_account_code):
        """Sets the has_account_code of this Carrier.


        :param has_account_code: The has_account_code of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_account_code = has_account_code

    @property
    def has_consignment_prefix(self):
        """Gets the has_consignment_prefix of this Carrier.  # noqa: E501


        :return: The has_consignment_prefix of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_consignment_prefix

    @has_consignment_prefix.setter
    def has_consignment_prefix(self, has_consignment_prefix):
        """Sets the has_consignment_prefix of this Carrier.


        :param has_consignment_prefix: The has_consignment_prefix of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_consignment_prefix = has_consignment_prefix

    @property
    def has_consignment_ref_pool(self):
        """Gets the has_consignment_ref_pool of this Carrier.  # noqa: E501


        :return: The has_consignment_ref_pool of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_consignment_ref_pool

    @has_consignment_ref_pool.setter
    def has_consignment_ref_pool(self, has_consignment_ref_pool):
        """Sets the has_consignment_ref_pool of this Carrier.


        :param has_consignment_ref_pool: The has_consignment_ref_pool of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_consignment_ref_pool = has_consignment_ref_pool

    @property
    def has_item_ref_pool(self):
        """Gets the has_item_ref_pool of this Carrier.  # noqa: E501


        :return: The has_item_ref_pool of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_item_ref_pool

    @has_item_ref_pool.setter
    def has_item_ref_pool(self, has_item_ref_pool):
        """Sets the has_item_ref_pool of this Carrier.


        :param has_item_ref_pool: The has_item_ref_pool of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_item_ref_pool = has_item_ref_pool

    @property
    def has_manifest_ref_pool(self):
        """Gets the has_manifest_ref_pool of this Carrier.  # noqa: E501


        :return: The has_manifest_ref_pool of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_manifest_ref_pool

    @has_manifest_ref_pool.setter
    def has_manifest_ref_pool(self, has_manifest_ref_pool):
        """Sets the has_manifest_ref_pool of this Carrier.


        :param has_manifest_ref_pool: The has_manifest_ref_pool of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_manifest_ref_pool = has_manifest_ref_pool

    @property
    def has_tracking_username(self):
        """Gets the has_tracking_username of this Carrier.  # noqa: E501


        :return: The has_tracking_username of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_tracking_username

    @has_tracking_username.setter
    def has_tracking_username(self, has_tracking_username):
        """Sets the has_tracking_username of this Carrier.


        :param has_tracking_username: The has_tracking_username of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_tracking_username = has_tracking_username

    @property
    def has_tracking_password(self):
        """Gets the has_tracking_password of this Carrier.  # noqa: E501


        :return: The has_tracking_password of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._has_tracking_password

    @has_tracking_password.setter
    def has_tracking_password(self, has_tracking_password):
        """Sets the has_tracking_password of this Carrier.


        :param has_tracking_password: The has_tracking_password of this Carrier.  # noqa: E501
        :type: bool
        """

        self._has_tracking_password = has_tracking_password

    @property
    def can_change_primary_reference_type(self):
        """Gets the can_change_primary_reference_type of this Carrier.  # noqa: E501


        :return: The can_change_primary_reference_type of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_primary_reference_type

    @can_change_primary_reference_type.setter
    def can_change_primary_reference_type(self, can_change_primary_reference_type):
        """Sets the can_change_primary_reference_type of this Carrier.


        :param can_change_primary_reference_type: The can_change_primary_reference_type of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_change_primary_reference_type = can_change_primary_reference_type

    @property
    def consignment_ref_pool_number_padding(self):
        """Gets the consignment_ref_pool_number_padding of this Carrier.  # noqa: E501


        :return: The consignment_ref_pool_number_padding of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._consignment_ref_pool_number_padding

    @consignment_ref_pool_number_padding.setter
    def consignment_ref_pool_number_padding(self, consignment_ref_pool_number_padding):
        """Sets the consignment_ref_pool_number_padding of this Carrier.


        :param consignment_ref_pool_number_padding: The consignment_ref_pool_number_padding of this Carrier.  # noqa: E501
        :type: int
        """

        self._consignment_ref_pool_number_padding = consignment_ref_pool_number_padding

    @property
    def manifest_ref_pool_number_padding(self):
        """Gets the manifest_ref_pool_number_padding of this Carrier.  # noqa: E501


        :return: The manifest_ref_pool_number_padding of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._manifest_ref_pool_number_padding

    @manifest_ref_pool_number_padding.setter
    def manifest_ref_pool_number_padding(self, manifest_ref_pool_number_padding):
        """Sets the manifest_ref_pool_number_padding of this Carrier.


        :param manifest_ref_pool_number_padding: The manifest_ref_pool_number_padding of this Carrier.  # noqa: E501
        :type: int
        """

        self._manifest_ref_pool_number_padding = manifest_ref_pool_number_padding

    @property
    def item_ref_pool_number_padding(self):
        """Gets the item_ref_pool_number_padding of this Carrier.  # noqa: E501


        :return: The item_ref_pool_number_padding of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._item_ref_pool_number_padding

    @item_ref_pool_number_padding.setter
    def item_ref_pool_number_padding(self, item_ref_pool_number_padding):
        """Sets the item_ref_pool_number_padding of this Carrier.


        :param item_ref_pool_number_padding: The item_ref_pool_number_padding of this Carrier.  # noqa: E501
        :type: int
        """

        self._item_ref_pool_number_padding = item_ref_pool_number_padding

    @property
    def item_number_padding(self):
        """Gets the item_number_padding of this Carrier.  # noqa: E501


        :return: The item_number_padding of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._item_number_padding

    @item_number_padding.setter
    def item_number_padding(self, item_number_padding):
        """Sets the item_number_padding of this Carrier.


        :param item_number_padding: The item_number_padding of this Carrier.  # noqa: E501
        :type: int
        """

        self._item_number_padding = item_number_padding

    @property
    def account_code_name(self):
        """Gets the account_code_name of this Carrier.  # noqa: E501


        :return: The account_code_name of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._account_code_name

    @account_code_name.setter
    def account_code_name(self, account_code_name):
        """Sets the account_code_name of this Carrier.


        :param account_code_name: The account_code_name of this Carrier.  # noqa: E501
        :type: str
        """

        self._account_code_name = account_code_name

    @property
    def trading_name(self):
        """Gets the trading_name of this Carrier.  # noqa: E501


        :return: The trading_name of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._trading_name

    @trading_name.setter
    def trading_name(self, trading_name):
        """Sets the trading_name of this Carrier.


        :param trading_name: The trading_name of this Carrier.  # noqa: E501
        :type: str
        """

        self._trading_name = trading_name

    @property
    def allow_consignment_consolidation(self):
        """Gets the allow_consignment_consolidation of this Carrier.  # noqa: E501


        :return: The allow_consignment_consolidation of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._allow_consignment_consolidation

    @allow_consignment_consolidation.setter
    def allow_consignment_consolidation(self, allow_consignment_consolidation):
        """Sets the allow_consignment_consolidation of this Carrier.


        :param allow_consignment_consolidation: The allow_consignment_consolidation of this Carrier.  # noqa: E501
        :type: bool
        """

        self._allow_consignment_consolidation = allow_consignment_consolidation

    @property
    def round_volume_per_item(self):
        """Gets the round_volume_per_item of this Carrier.  # noqa: E501


        :return: The round_volume_per_item of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._round_volume_per_item

    @round_volume_per_item.setter
    def round_volume_per_item(self, round_volume_per_item):
        """Sets the round_volume_per_item of this Carrier.


        :param round_volume_per_item: The round_volume_per_item of this Carrier.  # noqa: E501
        :type: bool
        """

        self._round_volume_per_item = round_volume_per_item

    @property
    def can_deliver_to_post_office_boxes(self):
        """Gets the can_deliver_to_post_office_boxes of this Carrier.  # noqa: E501


        :return: The can_deliver_to_post_office_boxes of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_deliver_to_post_office_boxes

    @can_deliver_to_post_office_boxes.setter
    def can_deliver_to_post_office_boxes(self, can_deliver_to_post_office_boxes):
        """Sets the can_deliver_to_post_office_boxes of this Carrier.


        :param can_deliver_to_post_office_boxes: The can_deliver_to_post_office_boxes of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_deliver_to_post_office_boxes = can_deliver_to_post_office_boxes

    @property
    def max_number_of_consignments_per_manifest(self):
        """Gets the max_number_of_consignments_per_manifest of this Carrier.  # noqa: E501


        :return: The max_number_of_consignments_per_manifest of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_consignments_per_manifest

    @max_number_of_consignments_per_manifest.setter
    def max_number_of_consignments_per_manifest(self, max_number_of_consignments_per_manifest):
        """Sets the max_number_of_consignments_per_manifest of this Carrier.


        :param max_number_of_consignments_per_manifest: The max_number_of_consignments_per_manifest of this Carrier.  # noqa: E501
        :type: int
        """

        self._max_number_of_consignments_per_manifest = max_number_of_consignments_per_manifest

    @property
    def allow_automatic_eta_recalculation(self):
        """Gets the allow_automatic_eta_recalculation of this Carrier.  # noqa: E501


        :return: The allow_automatic_eta_recalculation of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._allow_automatic_eta_recalculation

    @allow_automatic_eta_recalculation.setter
    def allow_automatic_eta_recalculation(self, allow_automatic_eta_recalculation):
        """Sets the allow_automatic_eta_recalculation of this Carrier.


        :param allow_automatic_eta_recalculation: The allow_automatic_eta_recalculation of this Carrier.  # noqa: E501
        :type: bool
        """

        self._allow_automatic_eta_recalculation = allow_automatic_eta_recalculation

    @property
    def default_carrier_integration_id(self):
        """Gets the default_carrier_integration_id of this Carrier.  # noqa: E501


        :return: The default_carrier_integration_id of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._default_carrier_integration_id

    @default_carrier_integration_id.setter
    def default_carrier_integration_id(self, default_carrier_integration_id):
        """Sets the default_carrier_integration_id of this Carrier.


        :param default_carrier_integration_id: The default_carrier_integration_id of this Carrier.  # noqa: E501
        :type: int
        """

        self._default_carrier_integration_id = default_carrier_integration_id

    @property
    def default_carrier_integration(self):
        """Gets the default_carrier_integration of this Carrier.  # noqa: E501


        :return: The default_carrier_integration of this Carrier.  # noqa: E501
        :rtype: MachshipCarrierIntegration
        """
        return self._default_carrier_integration

    @default_carrier_integration.setter
    def default_carrier_integration(self, default_carrier_integration):
        """Sets the default_carrier_integration of this Carrier.


        :param default_carrier_integration: The default_carrier_integration of this Carrier.  # noqa: E501
        :type: MachshipCarrierIntegration
        """

        self._default_carrier_integration = default_carrier_integration

    @property
    def can_remanifest(self):
        """Gets the can_remanifest of this Carrier.  # noqa: E501


        :return: The can_remanifest of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_remanifest

    @can_remanifest.setter
    def can_remanifest(self, can_remanifest):
        """Sets the can_remanifest of this Carrier.


        :param can_remanifest: The can_remanifest of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_remanifest = can_remanifest

    @property
    def can_rebook_pickup(self):
        """Gets the can_rebook_pickup of this Carrier.  # noqa: E501


        :return: The can_rebook_pickup of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._can_rebook_pickup

    @can_rebook_pickup.setter
    def can_rebook_pickup(self, can_rebook_pickup):
        """Sets the can_rebook_pickup of this Carrier.


        :param can_rebook_pickup: The can_rebook_pickup of this Carrier.  # noqa: E501
        :type: bool
        """

        self._can_rebook_pickup = can_rebook_pickup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Carrier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Carrier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
