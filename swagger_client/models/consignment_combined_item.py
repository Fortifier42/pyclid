# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentCombinedItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_height': 'float',
        'total_length': 'float',
        'total_width': 'float',
        'total_weight': 'float',
        'heaviest_individual_item': 'float',
        'total_volume': 'float',
        'number_of_pieces': 'int',
        'get_dim_identifier_string': 'str'
    }

    attribute_map = {
        'total_height': 'totalHeight',
        'total_length': 'totalLength',
        'total_width': 'totalWidth',
        'total_weight': 'totalWeight',
        'heaviest_individual_item': 'heaviestIndividualItem',
        'total_volume': 'totalVolume',
        'number_of_pieces': 'numberOfPieces',
        'get_dim_identifier_string': 'getDimIdentifierString'
    }

    def __init__(self, total_height=None, total_length=None, total_width=None, total_weight=None, heaviest_individual_item=None, total_volume=None, number_of_pieces=None, get_dim_identifier_string=None):  # noqa: E501
        """ConsignmentCombinedItem - a model defined in Swagger"""  # noqa: E501
        self._total_height = None
        self._total_length = None
        self._total_width = None
        self._total_weight = None
        self._heaviest_individual_item = None
        self._total_volume = None
        self._number_of_pieces = None
        self._get_dim_identifier_string = None
        self.discriminator = None
        if total_height is not None:
            self.total_height = total_height
        if total_length is not None:
            self.total_length = total_length
        if total_width is not None:
            self.total_width = total_width
        if total_weight is not None:
            self.total_weight = total_weight
        if heaviest_individual_item is not None:
            self.heaviest_individual_item = heaviest_individual_item
        if total_volume is not None:
            self.total_volume = total_volume
        if number_of_pieces is not None:
            self.number_of_pieces = number_of_pieces
        if get_dim_identifier_string is not None:
            self.get_dim_identifier_string = get_dim_identifier_string

    @property
    def total_height(self):
        """Gets the total_height of this ConsignmentCombinedItem.  # noqa: E501


        :return: The total_height of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: float
        """
        return self._total_height

    @total_height.setter
    def total_height(self, total_height):
        """Sets the total_height of this ConsignmentCombinedItem.


        :param total_height: The total_height of this ConsignmentCombinedItem.  # noqa: E501
        :type: float
        """

        self._total_height = total_height

    @property
    def total_length(self):
        """Gets the total_length of this ConsignmentCombinedItem.  # noqa: E501


        :return: The total_length of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: float
        """
        return self._total_length

    @total_length.setter
    def total_length(self, total_length):
        """Sets the total_length of this ConsignmentCombinedItem.


        :param total_length: The total_length of this ConsignmentCombinedItem.  # noqa: E501
        :type: float
        """

        self._total_length = total_length

    @property
    def total_width(self):
        """Gets the total_width of this ConsignmentCombinedItem.  # noqa: E501


        :return: The total_width of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: float
        """
        return self._total_width

    @total_width.setter
    def total_width(self, total_width):
        """Sets the total_width of this ConsignmentCombinedItem.


        :param total_width: The total_width of this ConsignmentCombinedItem.  # noqa: E501
        :type: float
        """

        self._total_width = total_width

    @property
    def total_weight(self):
        """Gets the total_weight of this ConsignmentCombinedItem.  # noqa: E501


        :return: The total_weight of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: float
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this ConsignmentCombinedItem.


        :param total_weight: The total_weight of this ConsignmentCombinedItem.  # noqa: E501
        :type: float
        """

        self._total_weight = total_weight

    @property
    def heaviest_individual_item(self):
        """Gets the heaviest_individual_item of this ConsignmentCombinedItem.  # noqa: E501


        :return: The heaviest_individual_item of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: float
        """
        return self._heaviest_individual_item

    @heaviest_individual_item.setter
    def heaviest_individual_item(self, heaviest_individual_item):
        """Sets the heaviest_individual_item of this ConsignmentCombinedItem.


        :param heaviest_individual_item: The heaviest_individual_item of this ConsignmentCombinedItem.  # noqa: E501
        :type: float
        """

        self._heaviest_individual_item = heaviest_individual_item

    @property
    def total_volume(self):
        """Gets the total_volume of this ConsignmentCombinedItem.  # noqa: E501


        :return: The total_volume of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: float
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this ConsignmentCombinedItem.


        :param total_volume: The total_volume of this ConsignmentCombinedItem.  # noqa: E501
        :type: float
        """

        self._total_volume = total_volume

    @property
    def number_of_pieces(self):
        """Gets the number_of_pieces of this ConsignmentCombinedItem.  # noqa: E501


        :return: The number_of_pieces of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pieces

    @number_of_pieces.setter
    def number_of_pieces(self, number_of_pieces):
        """Sets the number_of_pieces of this ConsignmentCombinedItem.


        :param number_of_pieces: The number_of_pieces of this ConsignmentCombinedItem.  # noqa: E501
        :type: int
        """

        self._number_of_pieces = number_of_pieces

    @property
    def get_dim_identifier_string(self):
        """Gets the get_dim_identifier_string of this ConsignmentCombinedItem.  # noqa: E501


        :return: The get_dim_identifier_string of this ConsignmentCombinedItem.  # noqa: E501
        :rtype: str
        """
        return self._get_dim_identifier_string

    @get_dim_identifier_string.setter
    def get_dim_identifier_string(self, get_dim_identifier_string):
        """Sets the get_dim_identifier_string of this ConsignmentCombinedItem.


        :param get_dim_identifier_string: The get_dim_identifier_string of this ConsignmentCombinedItem.  # noqa: E501
        :type: str
        """

        self._get_dim_identifier_string = get_dim_identifier_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentCombinedItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentCombinedItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
