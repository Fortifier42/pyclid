# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DgClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'class_type': 'DgClassType',
        'division': 'str',
        'label': 'str',
        'sub_risk': 'bool'
    }

    attribute_map = {
        '_class': 'class',
        'class_type': 'classType',
        'division': 'division',
        'label': 'label',
        'sub_risk': 'subRisk'
    }

    def __init__(self, _class=None, class_type=None, division=None, label=None, sub_risk=None):  # noqa: E501
        """DgClass - a model defined in Swagger"""  # noqa: E501
        self.__class = None
        self._class_type = None
        self._division = None
        self._label = None
        self._sub_risk = None
        self.discriminator = None
        if _class is not None:
            self._class = _class
        if class_type is not None:
            self.class_type = class_type
        if division is not None:
            self.division = division
        if label is not None:
            self.label = label
        if sub_risk is not None:
            self.sub_risk = sub_risk

    @property
    def _class(self):
        """Gets the _class of this DgClass.  # noqa: E501


        :return: The _class of this DgClass.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this DgClass.


        :param _class: The _class of this DgClass.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def class_type(self):
        """Gets the class_type of this DgClass.  # noqa: E501


        :return: The class_type of this DgClass.  # noqa: E501
        :rtype: DgClassType
        """
        return self._class_type

    @class_type.setter
    def class_type(self, class_type):
        """Sets the class_type of this DgClass.


        :param class_type: The class_type of this DgClass.  # noqa: E501
        :type: DgClassType
        """

        self._class_type = class_type

    @property
    def division(self):
        """Gets the division of this DgClass.  # noqa: E501


        :return: The division of this DgClass.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this DgClass.


        :param division: The division of this DgClass.  # noqa: E501
        :type: str
        """

        self._division = division

    @property
    def label(self):
        """Gets the label of this DgClass.  # noqa: E501


        :return: The label of this DgClass.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DgClass.


        :param label: The label of this DgClass.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def sub_risk(self):
        """Gets the sub_risk of this DgClass.  # noqa: E501


        :return: The sub_risk of this DgClass.  # noqa: E501
        :rtype: bool
        """
        return self._sub_risk

    @sub_risk.setter
    def sub_risk(self, sub_risk):
        """Sets the sub_risk of this DgClass.


        :param sub_risk: The sub_risk of this DgClass.  # noqa: E501
        :type: bool
        """

        self._sub_risk = sub_risk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DgClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DgClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
