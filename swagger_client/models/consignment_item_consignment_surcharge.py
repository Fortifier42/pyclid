# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentItemConsignmentSurcharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consignment_item_id': 'int',
        'consignment_item_guid': 'str',
        'consignment_item': 'ConsignmentItem',
        'consignment_surcharge_id': 'int',
        'consignment_surcharge_guid': 'str',
        'consignment_surcharge': 'ConsignmentSurcharge'
    }

    attribute_map = {
        'consignment_item_id': 'consignmentItemId',
        'consignment_item_guid': 'consignmentItemGuid',
        'consignment_item': 'consignmentItem',
        'consignment_surcharge_id': 'consignmentSurchargeId',
        'consignment_surcharge_guid': 'consignmentSurchargeGuid',
        'consignment_surcharge': 'consignmentSurcharge'
    }

    def __init__(self, consignment_item_id=None, consignment_item_guid=None, consignment_item=None, consignment_surcharge_id=None, consignment_surcharge_guid=None, consignment_surcharge=None):  # noqa: E501
        """ConsignmentItemConsignmentSurcharge - a model defined in Swagger"""  # noqa: E501
        self._consignment_item_id = None
        self._consignment_item_guid = None
        self._consignment_item = None
        self._consignment_surcharge_id = None
        self._consignment_surcharge_guid = None
        self._consignment_surcharge = None
        self.discriminator = None
        if consignment_item_id is not None:
            self.consignment_item_id = consignment_item_id
        if consignment_item_guid is not None:
            self.consignment_item_guid = consignment_item_guid
        if consignment_item is not None:
            self.consignment_item = consignment_item
        if consignment_surcharge_id is not None:
            self.consignment_surcharge_id = consignment_surcharge_id
        if consignment_surcharge_guid is not None:
            self.consignment_surcharge_guid = consignment_surcharge_guid
        if consignment_surcharge is not None:
            self.consignment_surcharge = consignment_surcharge

    @property
    def consignment_item_id(self):
        """Gets the consignment_item_id of this ConsignmentItemConsignmentSurcharge.  # noqa: E501


        :return: The consignment_item_id of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._consignment_item_id

    @consignment_item_id.setter
    def consignment_item_id(self, consignment_item_id):
        """Sets the consignment_item_id of this ConsignmentItemConsignmentSurcharge.


        :param consignment_item_id: The consignment_item_id of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :type: int
        """

        self._consignment_item_id = consignment_item_id

    @property
    def consignment_item_guid(self):
        """Gets the consignment_item_guid of this ConsignmentItemConsignmentSurcharge.  # noqa: E501


        :return: The consignment_item_guid of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :rtype: str
        """
        return self._consignment_item_guid

    @consignment_item_guid.setter
    def consignment_item_guid(self, consignment_item_guid):
        """Sets the consignment_item_guid of this ConsignmentItemConsignmentSurcharge.


        :param consignment_item_guid: The consignment_item_guid of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :type: str
        """

        self._consignment_item_guid = consignment_item_guid

    @property
    def consignment_item(self):
        """Gets the consignment_item of this ConsignmentItemConsignmentSurcharge.  # noqa: E501


        :return: The consignment_item of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :rtype: ConsignmentItem
        """
        return self._consignment_item

    @consignment_item.setter
    def consignment_item(self, consignment_item):
        """Sets the consignment_item of this ConsignmentItemConsignmentSurcharge.


        :param consignment_item: The consignment_item of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :type: ConsignmentItem
        """

        self._consignment_item = consignment_item

    @property
    def consignment_surcharge_id(self):
        """Gets the consignment_surcharge_id of this ConsignmentItemConsignmentSurcharge.  # noqa: E501


        :return: The consignment_surcharge_id of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :rtype: int
        """
        return self._consignment_surcharge_id

    @consignment_surcharge_id.setter
    def consignment_surcharge_id(self, consignment_surcharge_id):
        """Sets the consignment_surcharge_id of this ConsignmentItemConsignmentSurcharge.


        :param consignment_surcharge_id: The consignment_surcharge_id of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :type: int
        """

        self._consignment_surcharge_id = consignment_surcharge_id

    @property
    def consignment_surcharge_guid(self):
        """Gets the consignment_surcharge_guid of this ConsignmentItemConsignmentSurcharge.  # noqa: E501


        :return: The consignment_surcharge_guid of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :rtype: str
        """
        return self._consignment_surcharge_guid

    @consignment_surcharge_guid.setter
    def consignment_surcharge_guid(self, consignment_surcharge_guid):
        """Sets the consignment_surcharge_guid of this ConsignmentItemConsignmentSurcharge.


        :param consignment_surcharge_guid: The consignment_surcharge_guid of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :type: str
        """

        self._consignment_surcharge_guid = consignment_surcharge_guid

    @property
    def consignment_surcharge(self):
        """Gets the consignment_surcharge of this ConsignmentItemConsignmentSurcharge.  # noqa: E501


        :return: The consignment_surcharge of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :rtype: ConsignmentSurcharge
        """
        return self._consignment_surcharge

    @consignment_surcharge.setter
    def consignment_surcharge(self, consignment_surcharge):
        """Sets the consignment_surcharge of this ConsignmentItemConsignmentSurcharge.


        :param consignment_surcharge: The consignment_surcharge of this ConsignmentItemConsignmentSurcharge.  # noqa: E501
        :type: ConsignmentSurcharge
        """

        self._consignment_surcharge = consignment_surcharge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentItemConsignmentSurcharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentItemConsignmentSurcharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
