# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'account_code': 'str',
        'carrier_id': 'int',
        'carrier_integration_id': 'int',
        'carrier_integration': 'MachshipCarrierIntegration',
        'display_name': 'str',
        'carrier_account_services': 'list[CarrierAccountServiceModel]',
        'carrier': 'Carrier',
        'company': 'Company',
        'company_id': 'int',
        'parent_carrier_account': 'CarrierAccount',
        'parent_carrier_account_id': 'int',
        'minimum_pickup_cost_total': 'float',
        'minimum_pickup_fee': 'float',
        'absorb_cost_before_tax_above_tolerance': 'float',
        'absorb_cost_before_tax_above_tolerance_type': 'ToleranceType',
        'absorb_cost_before_tax_below_tolerance': 'float',
        'absorb_cost_before_tax_below_tolerance_type': 'ToleranceType',
        'absorb_fuel_before_tax_above_tolerance': 'float',
        'absorb_fuel_before_tax_above_tolerance_type': 'ToleranceType',
        'absorb_fuel_before_tax_below_tolerance': 'float',
        'absorb_fuel_before_tax_below_tolerance_type': 'ToleranceType',
        'pass_on_cost_before_tax_above_tolerance': 'float',
        'pass_on_cost_before_tax_above_tolerance_type': 'ToleranceType',
        'cost_consignment_manually': 'bool',
        'is_universal': 'bool',
        'auto_manifest_on_consignment_creation': 'bool',
        'custom_field_sets': 'list[CustomFieldSet]',
        'custom_values': 'list[CustomValue]',
        'integration_custom_field_sets': 'list[CustomFieldSet]',
        'integration_custom_values': 'list[CustomValue]',
        'children': 'list[CarrierAccount]',
        'default_company_carrier_account_id': 'int',
        'default_company_carrier_account': 'CompanyCarrierAccount',
        'fuel_surcharge_id': 'int',
        'serialised_custom_fields': 'str',
        'carrier_account_code': 'str',
        'serialised_integration_settings': 'str',
        'ignore_sizing_restrictions': 'bool',
        'dg_enabled': 'bool',
        'breakup_combined_for_paperwork': 'bool',
        'pricing_apply_most_expensive_rate_set': 'bool',
        'auto_close_consignments': 'bool',
        'hold_consignments_for_invoicing': 'bool',
        'hold_consignments_for_reconciliation': 'bool',
        'pre_invoice_authorise_consignments': 'bool',
        'external_finance_package_tracking_name': 'str',
        'disabled': 'bool',
        'is_in_test_mode': 'bool',
        'use_ratecard_pricing_when_present': 'bool',
        'primary_reference_type': 'PrimaryReferenceType',
        'country_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'account_code': 'accountCode',
        'carrier_id': 'carrierId',
        'carrier_integration_id': 'carrierIntegrationId',
        'carrier_integration': 'carrierIntegration',
        'display_name': 'displayName',
        'carrier_account_services': 'carrierAccountServices',
        'carrier': 'carrier',
        'company': 'company',
        'company_id': 'companyId',
        'parent_carrier_account': 'parentCarrierAccount',
        'parent_carrier_account_id': 'parentCarrierAccountId',
        'minimum_pickup_cost_total': 'minimumPickupCostTotal',
        'minimum_pickup_fee': 'minimumPickupFee',
        'absorb_cost_before_tax_above_tolerance': 'absorbCostBeforeTaxAboveTolerance',
        'absorb_cost_before_tax_above_tolerance_type': 'absorbCostBeforeTaxAboveToleranceType',
        'absorb_cost_before_tax_below_tolerance': 'absorbCostBeforeTaxBelowTolerance',
        'absorb_cost_before_tax_below_tolerance_type': 'absorbCostBeforeTaxBelowToleranceType',
        'absorb_fuel_before_tax_above_tolerance': 'absorbFuelBeforeTaxAboveTolerance',
        'absorb_fuel_before_tax_above_tolerance_type': 'absorbFuelBeforeTaxAboveToleranceType',
        'absorb_fuel_before_tax_below_tolerance': 'absorbFuelBeforeTaxBelowTolerance',
        'absorb_fuel_before_tax_below_tolerance_type': 'absorbFuelBeforeTaxBelowToleranceType',
        'pass_on_cost_before_tax_above_tolerance': 'passOnCostBeforeTaxAboveTolerance',
        'pass_on_cost_before_tax_above_tolerance_type': 'passOnCostBeforeTaxAboveToleranceType',
        'cost_consignment_manually': 'costConsignmentManually',
        'is_universal': 'isUniversal',
        'auto_manifest_on_consignment_creation': 'autoManifestOnConsignmentCreation',
        'custom_field_sets': 'customFieldSets',
        'custom_values': 'customValues',
        'integration_custom_field_sets': 'integrationCustomFieldSets',
        'integration_custom_values': 'integrationCustomValues',
        'children': 'children',
        'default_company_carrier_account_id': 'defaultCompanyCarrierAccountId',
        'default_company_carrier_account': 'defaultCompanyCarrierAccount',
        'fuel_surcharge_id': 'fuelSurchargeId',
        'serialised_custom_fields': 'serialisedCustomFields',
        'carrier_account_code': 'carrierAccountCode',
        'serialised_integration_settings': 'serialisedIntegrationSettings',
        'ignore_sizing_restrictions': 'ignoreSizingRestrictions',
        'dg_enabled': 'dgEnabled',
        'breakup_combined_for_paperwork': 'breakupCombinedForPaperwork',
        'pricing_apply_most_expensive_rate_set': 'pricingApplyMostExpensiveRateSet',
        'auto_close_consignments': 'autoCloseConsignments',
        'hold_consignments_for_invoicing': 'holdConsignmentsForInvoicing',
        'hold_consignments_for_reconciliation': 'holdConsignmentsForReconciliation',
        'pre_invoice_authorise_consignments': 'preInvoiceAuthoriseConsignments',
        'external_finance_package_tracking_name': 'externalFinancePackageTrackingName',
        'disabled': 'disabled',
        'is_in_test_mode': 'isInTestMode',
        'use_ratecard_pricing_when_present': 'useRatecardPricingWhenPresent',
        'primary_reference_type': 'primaryReferenceType',
        'country_id': 'countryId'
    }

    def __init__(self, id=None, name=None, account_code=None, carrier_id=None, carrier_integration_id=None, carrier_integration=None, display_name=None, carrier_account_services=None, carrier=None, company=None, company_id=None, parent_carrier_account=None, parent_carrier_account_id=None, minimum_pickup_cost_total=None, minimum_pickup_fee=None, absorb_cost_before_tax_above_tolerance=None, absorb_cost_before_tax_above_tolerance_type=None, absorb_cost_before_tax_below_tolerance=None, absorb_cost_before_tax_below_tolerance_type=None, absorb_fuel_before_tax_above_tolerance=None, absorb_fuel_before_tax_above_tolerance_type=None, absorb_fuel_before_tax_below_tolerance=None, absorb_fuel_before_tax_below_tolerance_type=None, pass_on_cost_before_tax_above_tolerance=None, pass_on_cost_before_tax_above_tolerance_type=None, cost_consignment_manually=None, is_universal=None, auto_manifest_on_consignment_creation=None, custom_field_sets=None, custom_values=None, integration_custom_field_sets=None, integration_custom_values=None, children=None, default_company_carrier_account_id=None, default_company_carrier_account=None, fuel_surcharge_id=None, serialised_custom_fields=None, carrier_account_code=None, serialised_integration_settings=None, ignore_sizing_restrictions=None, dg_enabled=None, breakup_combined_for_paperwork=None, pricing_apply_most_expensive_rate_set=None, auto_close_consignments=None, hold_consignments_for_invoicing=None, hold_consignments_for_reconciliation=None, pre_invoice_authorise_consignments=None, external_finance_package_tracking_name=None, disabled=None, is_in_test_mode=None, use_ratecard_pricing_when_present=None, primary_reference_type=None, country_id=None):  # noqa: E501
        """CarrierAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._account_code = None
        self._carrier_id = None
        self._carrier_integration_id = None
        self._carrier_integration = None
        self._display_name = None
        self._carrier_account_services = None
        self._carrier = None
        self._company = None
        self._company_id = None
        self._parent_carrier_account = None
        self._parent_carrier_account_id = None
        self._minimum_pickup_cost_total = None
        self._minimum_pickup_fee = None
        self._absorb_cost_before_tax_above_tolerance = None
        self._absorb_cost_before_tax_above_tolerance_type = None
        self._absorb_cost_before_tax_below_tolerance = None
        self._absorb_cost_before_tax_below_tolerance_type = None
        self._absorb_fuel_before_tax_above_tolerance = None
        self._absorb_fuel_before_tax_above_tolerance_type = None
        self._absorb_fuel_before_tax_below_tolerance = None
        self._absorb_fuel_before_tax_below_tolerance_type = None
        self._pass_on_cost_before_tax_above_tolerance = None
        self._pass_on_cost_before_tax_above_tolerance_type = None
        self._cost_consignment_manually = None
        self._is_universal = None
        self._auto_manifest_on_consignment_creation = None
        self._custom_field_sets = None
        self._custom_values = None
        self._integration_custom_field_sets = None
        self._integration_custom_values = None
        self._children = None
        self._default_company_carrier_account_id = None
        self._default_company_carrier_account = None
        self._fuel_surcharge_id = None
        self._serialised_custom_fields = None
        self._carrier_account_code = None
        self._serialised_integration_settings = None
        self._ignore_sizing_restrictions = None
        self._dg_enabled = None
        self._breakup_combined_for_paperwork = None
        self._pricing_apply_most_expensive_rate_set = None
        self._auto_close_consignments = None
        self._hold_consignments_for_invoicing = None
        self._hold_consignments_for_reconciliation = None
        self._pre_invoice_authorise_consignments = None
        self._external_finance_package_tracking_name = None
        self._disabled = None
        self._is_in_test_mode = None
        self._use_ratecard_pricing_when_present = None
        self._primary_reference_type = None
        self._country_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.account_code = account_code
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier_integration_id is not None:
            self.carrier_integration_id = carrier_integration_id
        if carrier_integration is not None:
            self.carrier_integration = carrier_integration
        if display_name is not None:
            self.display_name = display_name
        if carrier_account_services is not None:
            self.carrier_account_services = carrier_account_services
        if carrier is not None:
            self.carrier = carrier
        if company is not None:
            self.company = company
        if company_id is not None:
            self.company_id = company_id
        if parent_carrier_account is not None:
            self.parent_carrier_account = parent_carrier_account
        if parent_carrier_account_id is not None:
            self.parent_carrier_account_id = parent_carrier_account_id
        if minimum_pickup_cost_total is not None:
            self.minimum_pickup_cost_total = minimum_pickup_cost_total
        if minimum_pickup_fee is not None:
            self.minimum_pickup_fee = minimum_pickup_fee
        if absorb_cost_before_tax_above_tolerance is not None:
            self.absorb_cost_before_tax_above_tolerance = absorb_cost_before_tax_above_tolerance
        if absorb_cost_before_tax_above_tolerance_type is not None:
            self.absorb_cost_before_tax_above_tolerance_type = absorb_cost_before_tax_above_tolerance_type
        if absorb_cost_before_tax_below_tolerance is not None:
            self.absorb_cost_before_tax_below_tolerance = absorb_cost_before_tax_below_tolerance
        if absorb_cost_before_tax_below_tolerance_type is not None:
            self.absorb_cost_before_tax_below_tolerance_type = absorb_cost_before_tax_below_tolerance_type
        if absorb_fuel_before_tax_above_tolerance is not None:
            self.absorb_fuel_before_tax_above_tolerance = absorb_fuel_before_tax_above_tolerance
        if absorb_fuel_before_tax_above_tolerance_type is not None:
            self.absorb_fuel_before_tax_above_tolerance_type = absorb_fuel_before_tax_above_tolerance_type
        if absorb_fuel_before_tax_below_tolerance is not None:
            self.absorb_fuel_before_tax_below_tolerance = absorb_fuel_before_tax_below_tolerance
        if absorb_fuel_before_tax_below_tolerance_type is not None:
            self.absorb_fuel_before_tax_below_tolerance_type = absorb_fuel_before_tax_below_tolerance_type
        if pass_on_cost_before_tax_above_tolerance is not None:
            self.pass_on_cost_before_tax_above_tolerance = pass_on_cost_before_tax_above_tolerance
        if pass_on_cost_before_tax_above_tolerance_type is not None:
            self.pass_on_cost_before_tax_above_tolerance_type = pass_on_cost_before_tax_above_tolerance_type
        if cost_consignment_manually is not None:
            self.cost_consignment_manually = cost_consignment_manually
        if is_universal is not None:
            self.is_universal = is_universal
        if auto_manifest_on_consignment_creation is not None:
            self.auto_manifest_on_consignment_creation = auto_manifest_on_consignment_creation
        if custom_field_sets is not None:
            self.custom_field_sets = custom_field_sets
        if custom_values is not None:
            self.custom_values = custom_values
        if integration_custom_field_sets is not None:
            self.integration_custom_field_sets = integration_custom_field_sets
        if integration_custom_values is not None:
            self.integration_custom_values = integration_custom_values
        if children is not None:
            self.children = children
        if default_company_carrier_account_id is not None:
            self.default_company_carrier_account_id = default_company_carrier_account_id
        if default_company_carrier_account is not None:
            self.default_company_carrier_account = default_company_carrier_account
        if fuel_surcharge_id is not None:
            self.fuel_surcharge_id = fuel_surcharge_id
        if serialised_custom_fields is not None:
            self.serialised_custom_fields = serialised_custom_fields
        if carrier_account_code is not None:
            self.carrier_account_code = carrier_account_code
        if serialised_integration_settings is not None:
            self.serialised_integration_settings = serialised_integration_settings
        if ignore_sizing_restrictions is not None:
            self.ignore_sizing_restrictions = ignore_sizing_restrictions
        if dg_enabled is not None:
            self.dg_enabled = dg_enabled
        if breakup_combined_for_paperwork is not None:
            self.breakup_combined_for_paperwork = breakup_combined_for_paperwork
        if pricing_apply_most_expensive_rate_set is not None:
            self.pricing_apply_most_expensive_rate_set = pricing_apply_most_expensive_rate_set
        if auto_close_consignments is not None:
            self.auto_close_consignments = auto_close_consignments
        if hold_consignments_for_invoicing is not None:
            self.hold_consignments_for_invoicing = hold_consignments_for_invoicing
        if hold_consignments_for_reconciliation is not None:
            self.hold_consignments_for_reconciliation = hold_consignments_for_reconciliation
        if pre_invoice_authorise_consignments is not None:
            self.pre_invoice_authorise_consignments = pre_invoice_authorise_consignments
        if external_finance_package_tracking_name is not None:
            self.external_finance_package_tracking_name = external_finance_package_tracking_name
        if disabled is not None:
            self.disabled = disabled
        if is_in_test_mode is not None:
            self.is_in_test_mode = is_in_test_mode
        if use_ratecard_pricing_when_present is not None:
            self.use_ratecard_pricing_when_present = use_ratecard_pricing_when_present
        if primary_reference_type is not None:
            self.primary_reference_type = primary_reference_type
        if country_id is not None:
            self.country_id = country_id

    @property
    def id(self):
        """Gets the id of this CarrierAccount.  # noqa: E501


        :return: The id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierAccount.


        :param id: The id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CarrierAccount.  # noqa: E501


        :return: The name of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierAccount.


        :param name: The name of this CarrierAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def account_code(self):
        """Gets the account_code of this CarrierAccount.  # noqa: E501


        :return: The account_code of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this CarrierAccount.


        :param account_code: The account_code of this CarrierAccount.  # noqa: E501
        :type: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")  # noqa: E501

        self._account_code = account_code

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CarrierAccount.  # noqa: E501


        :return: The carrier_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CarrierAccount.


        :param carrier_id: The carrier_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier_integration_id(self):
        """Gets the carrier_integration_id of this CarrierAccount.  # noqa: E501


        :return: The carrier_integration_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._carrier_integration_id

    @carrier_integration_id.setter
    def carrier_integration_id(self, carrier_integration_id):
        """Sets the carrier_integration_id of this CarrierAccount.


        :param carrier_integration_id: The carrier_integration_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._carrier_integration_id = carrier_integration_id

    @property
    def carrier_integration(self):
        """Gets the carrier_integration of this CarrierAccount.  # noqa: E501


        :return: The carrier_integration of this CarrierAccount.  # noqa: E501
        :rtype: MachshipCarrierIntegration
        """
        return self._carrier_integration

    @carrier_integration.setter
    def carrier_integration(self, carrier_integration):
        """Sets the carrier_integration of this CarrierAccount.


        :param carrier_integration: The carrier_integration of this CarrierAccount.  # noqa: E501
        :type: MachshipCarrierIntegration
        """

        self._carrier_integration = carrier_integration

    @property
    def display_name(self):
        """Gets the display_name of this CarrierAccount.  # noqa: E501


        :return: The display_name of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CarrierAccount.


        :param display_name: The display_name of this CarrierAccount.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def carrier_account_services(self):
        """Gets the carrier_account_services of this CarrierAccount.  # noqa: E501


        :return: The carrier_account_services of this CarrierAccount.  # noqa: E501
        :rtype: list[CarrierAccountServiceModel]
        """
        return self._carrier_account_services

    @carrier_account_services.setter
    def carrier_account_services(self, carrier_account_services):
        """Sets the carrier_account_services of this CarrierAccount.


        :param carrier_account_services: The carrier_account_services of this CarrierAccount.  # noqa: E501
        :type: list[CarrierAccountServiceModel]
        """

        self._carrier_account_services = carrier_account_services

    @property
    def carrier(self):
        """Gets the carrier of this CarrierAccount.  # noqa: E501


        :return: The carrier of this CarrierAccount.  # noqa: E501
        :rtype: Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CarrierAccount.


        :param carrier: The carrier of this CarrierAccount.  # noqa: E501
        :type: Carrier
        """

        self._carrier = carrier

    @property
    def company(self):
        """Gets the company of this CarrierAccount.  # noqa: E501


        :return: The company of this CarrierAccount.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CarrierAccount.


        :param company: The company of this CarrierAccount.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def company_id(self):
        """Gets the company_id of this CarrierAccount.  # noqa: E501


        :return: The company_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CarrierAccount.


        :param company_id: The company_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def parent_carrier_account(self):
        """Gets the parent_carrier_account of this CarrierAccount.  # noqa: E501


        :return: The parent_carrier_account of this CarrierAccount.  # noqa: E501
        :rtype: CarrierAccount
        """
        return self._parent_carrier_account

    @parent_carrier_account.setter
    def parent_carrier_account(self, parent_carrier_account):
        """Sets the parent_carrier_account of this CarrierAccount.


        :param parent_carrier_account: The parent_carrier_account of this CarrierAccount.  # noqa: E501
        :type: CarrierAccount
        """

        self._parent_carrier_account = parent_carrier_account

    @property
    def parent_carrier_account_id(self):
        """Gets the parent_carrier_account_id of this CarrierAccount.  # noqa: E501


        :return: The parent_carrier_account_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._parent_carrier_account_id

    @parent_carrier_account_id.setter
    def parent_carrier_account_id(self, parent_carrier_account_id):
        """Sets the parent_carrier_account_id of this CarrierAccount.


        :param parent_carrier_account_id: The parent_carrier_account_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._parent_carrier_account_id = parent_carrier_account_id

    @property
    def minimum_pickup_cost_total(self):
        """Gets the minimum_pickup_cost_total of this CarrierAccount.  # noqa: E501


        :return: The minimum_pickup_cost_total of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._minimum_pickup_cost_total

    @minimum_pickup_cost_total.setter
    def minimum_pickup_cost_total(self, minimum_pickup_cost_total):
        """Sets the minimum_pickup_cost_total of this CarrierAccount.


        :param minimum_pickup_cost_total: The minimum_pickup_cost_total of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._minimum_pickup_cost_total = minimum_pickup_cost_total

    @property
    def minimum_pickup_fee(self):
        """Gets the minimum_pickup_fee of this CarrierAccount.  # noqa: E501


        :return: The minimum_pickup_fee of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._minimum_pickup_fee

    @minimum_pickup_fee.setter
    def minimum_pickup_fee(self, minimum_pickup_fee):
        """Sets the minimum_pickup_fee of this CarrierAccount.


        :param minimum_pickup_fee: The minimum_pickup_fee of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._minimum_pickup_fee = minimum_pickup_fee

    @property
    def absorb_cost_before_tax_above_tolerance(self):
        """Gets the absorb_cost_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501


        :return: The absorb_cost_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._absorb_cost_before_tax_above_tolerance

    @absorb_cost_before_tax_above_tolerance.setter
    def absorb_cost_before_tax_above_tolerance(self, absorb_cost_before_tax_above_tolerance):
        """Sets the absorb_cost_before_tax_above_tolerance of this CarrierAccount.


        :param absorb_cost_before_tax_above_tolerance: The absorb_cost_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._absorb_cost_before_tax_above_tolerance = absorb_cost_before_tax_above_tolerance

    @property
    def absorb_cost_before_tax_above_tolerance_type(self):
        """Gets the absorb_cost_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501


        :return: The absorb_cost_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501
        :rtype: ToleranceType
        """
        return self._absorb_cost_before_tax_above_tolerance_type

    @absorb_cost_before_tax_above_tolerance_type.setter
    def absorb_cost_before_tax_above_tolerance_type(self, absorb_cost_before_tax_above_tolerance_type):
        """Sets the absorb_cost_before_tax_above_tolerance_type of this CarrierAccount.


        :param absorb_cost_before_tax_above_tolerance_type: The absorb_cost_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501
        :type: ToleranceType
        """

        self._absorb_cost_before_tax_above_tolerance_type = absorb_cost_before_tax_above_tolerance_type

    @property
    def absorb_cost_before_tax_below_tolerance(self):
        """Gets the absorb_cost_before_tax_below_tolerance of this CarrierAccount.  # noqa: E501


        :return: The absorb_cost_before_tax_below_tolerance of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._absorb_cost_before_tax_below_tolerance

    @absorb_cost_before_tax_below_tolerance.setter
    def absorb_cost_before_tax_below_tolerance(self, absorb_cost_before_tax_below_tolerance):
        """Sets the absorb_cost_before_tax_below_tolerance of this CarrierAccount.


        :param absorb_cost_before_tax_below_tolerance: The absorb_cost_before_tax_below_tolerance of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._absorb_cost_before_tax_below_tolerance = absorb_cost_before_tax_below_tolerance

    @property
    def absorb_cost_before_tax_below_tolerance_type(self):
        """Gets the absorb_cost_before_tax_below_tolerance_type of this CarrierAccount.  # noqa: E501


        :return: The absorb_cost_before_tax_below_tolerance_type of this CarrierAccount.  # noqa: E501
        :rtype: ToleranceType
        """
        return self._absorb_cost_before_tax_below_tolerance_type

    @absorb_cost_before_tax_below_tolerance_type.setter
    def absorb_cost_before_tax_below_tolerance_type(self, absorb_cost_before_tax_below_tolerance_type):
        """Sets the absorb_cost_before_tax_below_tolerance_type of this CarrierAccount.


        :param absorb_cost_before_tax_below_tolerance_type: The absorb_cost_before_tax_below_tolerance_type of this CarrierAccount.  # noqa: E501
        :type: ToleranceType
        """

        self._absorb_cost_before_tax_below_tolerance_type = absorb_cost_before_tax_below_tolerance_type

    @property
    def absorb_fuel_before_tax_above_tolerance(self):
        """Gets the absorb_fuel_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501


        :return: The absorb_fuel_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._absorb_fuel_before_tax_above_tolerance

    @absorb_fuel_before_tax_above_tolerance.setter
    def absorb_fuel_before_tax_above_tolerance(self, absorb_fuel_before_tax_above_tolerance):
        """Sets the absorb_fuel_before_tax_above_tolerance of this CarrierAccount.


        :param absorb_fuel_before_tax_above_tolerance: The absorb_fuel_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._absorb_fuel_before_tax_above_tolerance = absorb_fuel_before_tax_above_tolerance

    @property
    def absorb_fuel_before_tax_above_tolerance_type(self):
        """Gets the absorb_fuel_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501


        :return: The absorb_fuel_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501
        :rtype: ToleranceType
        """
        return self._absorb_fuel_before_tax_above_tolerance_type

    @absorb_fuel_before_tax_above_tolerance_type.setter
    def absorb_fuel_before_tax_above_tolerance_type(self, absorb_fuel_before_tax_above_tolerance_type):
        """Sets the absorb_fuel_before_tax_above_tolerance_type of this CarrierAccount.


        :param absorb_fuel_before_tax_above_tolerance_type: The absorb_fuel_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501
        :type: ToleranceType
        """

        self._absorb_fuel_before_tax_above_tolerance_type = absorb_fuel_before_tax_above_tolerance_type

    @property
    def absorb_fuel_before_tax_below_tolerance(self):
        """Gets the absorb_fuel_before_tax_below_tolerance of this CarrierAccount.  # noqa: E501


        :return: The absorb_fuel_before_tax_below_tolerance of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._absorb_fuel_before_tax_below_tolerance

    @absorb_fuel_before_tax_below_tolerance.setter
    def absorb_fuel_before_tax_below_tolerance(self, absorb_fuel_before_tax_below_tolerance):
        """Sets the absorb_fuel_before_tax_below_tolerance of this CarrierAccount.


        :param absorb_fuel_before_tax_below_tolerance: The absorb_fuel_before_tax_below_tolerance of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._absorb_fuel_before_tax_below_tolerance = absorb_fuel_before_tax_below_tolerance

    @property
    def absorb_fuel_before_tax_below_tolerance_type(self):
        """Gets the absorb_fuel_before_tax_below_tolerance_type of this CarrierAccount.  # noqa: E501


        :return: The absorb_fuel_before_tax_below_tolerance_type of this CarrierAccount.  # noqa: E501
        :rtype: ToleranceType
        """
        return self._absorb_fuel_before_tax_below_tolerance_type

    @absorb_fuel_before_tax_below_tolerance_type.setter
    def absorb_fuel_before_tax_below_tolerance_type(self, absorb_fuel_before_tax_below_tolerance_type):
        """Sets the absorb_fuel_before_tax_below_tolerance_type of this CarrierAccount.


        :param absorb_fuel_before_tax_below_tolerance_type: The absorb_fuel_before_tax_below_tolerance_type of this CarrierAccount.  # noqa: E501
        :type: ToleranceType
        """

        self._absorb_fuel_before_tax_below_tolerance_type = absorb_fuel_before_tax_below_tolerance_type

    @property
    def pass_on_cost_before_tax_above_tolerance(self):
        """Gets the pass_on_cost_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501


        :return: The pass_on_cost_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._pass_on_cost_before_tax_above_tolerance

    @pass_on_cost_before_tax_above_tolerance.setter
    def pass_on_cost_before_tax_above_tolerance(self, pass_on_cost_before_tax_above_tolerance):
        """Sets the pass_on_cost_before_tax_above_tolerance of this CarrierAccount.


        :param pass_on_cost_before_tax_above_tolerance: The pass_on_cost_before_tax_above_tolerance of this CarrierAccount.  # noqa: E501
        :type: float
        """

        self._pass_on_cost_before_tax_above_tolerance = pass_on_cost_before_tax_above_tolerance

    @property
    def pass_on_cost_before_tax_above_tolerance_type(self):
        """Gets the pass_on_cost_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501


        :return: The pass_on_cost_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501
        :rtype: ToleranceType
        """
        return self._pass_on_cost_before_tax_above_tolerance_type

    @pass_on_cost_before_tax_above_tolerance_type.setter
    def pass_on_cost_before_tax_above_tolerance_type(self, pass_on_cost_before_tax_above_tolerance_type):
        """Sets the pass_on_cost_before_tax_above_tolerance_type of this CarrierAccount.


        :param pass_on_cost_before_tax_above_tolerance_type: The pass_on_cost_before_tax_above_tolerance_type of this CarrierAccount.  # noqa: E501
        :type: ToleranceType
        """

        self._pass_on_cost_before_tax_above_tolerance_type = pass_on_cost_before_tax_above_tolerance_type

    @property
    def cost_consignment_manually(self):
        """Gets the cost_consignment_manually of this CarrierAccount.  # noqa: E501


        :return: The cost_consignment_manually of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._cost_consignment_manually

    @cost_consignment_manually.setter
    def cost_consignment_manually(self, cost_consignment_manually):
        """Sets the cost_consignment_manually of this CarrierAccount.


        :param cost_consignment_manually: The cost_consignment_manually of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._cost_consignment_manually = cost_consignment_manually

    @property
    def is_universal(self):
        """Gets the is_universal of this CarrierAccount.  # noqa: E501

        Flag that states that this carrier account can be used for ANY broker in machship. This flag also  needs to be validated against whether this carrierAccount is owned by the Machship company  # noqa: E501

        :return: The is_universal of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_universal

    @is_universal.setter
    def is_universal(self, is_universal):
        """Sets the is_universal of this CarrierAccount.

        Flag that states that this carrier account can be used for ANY broker in machship. This flag also  needs to be validated against whether this carrierAccount is owned by the Machship company  # noqa: E501

        :param is_universal: The is_universal of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._is_universal = is_universal

    @property
    def auto_manifest_on_consignment_creation(self):
        """Gets the auto_manifest_on_consignment_creation of this CarrierAccount.  # noqa: E501


        :return: The auto_manifest_on_consignment_creation of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._auto_manifest_on_consignment_creation

    @auto_manifest_on_consignment_creation.setter
    def auto_manifest_on_consignment_creation(self, auto_manifest_on_consignment_creation):
        """Sets the auto_manifest_on_consignment_creation of this CarrierAccount.


        :param auto_manifest_on_consignment_creation: The auto_manifest_on_consignment_creation of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._auto_manifest_on_consignment_creation = auto_manifest_on_consignment_creation

    @property
    def custom_field_sets(self):
        """Gets the custom_field_sets of this CarrierAccount.  # noqa: E501


        :return: The custom_field_sets of this CarrierAccount.  # noqa: E501
        :rtype: list[CustomFieldSet]
        """
        return self._custom_field_sets

    @custom_field_sets.setter
    def custom_field_sets(self, custom_field_sets):
        """Sets the custom_field_sets of this CarrierAccount.


        :param custom_field_sets: The custom_field_sets of this CarrierAccount.  # noqa: E501
        :type: list[CustomFieldSet]
        """

        self._custom_field_sets = custom_field_sets

    @property
    def custom_values(self):
        """Gets the custom_values of this CarrierAccount.  # noqa: E501


        :return: The custom_values of this CarrierAccount.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CarrierAccount.


        :param custom_values: The custom_values of this CarrierAccount.  # noqa: E501
        :type: list[CustomValue]
        """

        self._custom_values = custom_values

    @property
    def integration_custom_field_sets(self):
        """Gets the integration_custom_field_sets of this CarrierAccount.  # noqa: E501


        :return: The integration_custom_field_sets of this CarrierAccount.  # noqa: E501
        :rtype: list[CustomFieldSet]
        """
        return self._integration_custom_field_sets

    @integration_custom_field_sets.setter
    def integration_custom_field_sets(self, integration_custom_field_sets):
        """Sets the integration_custom_field_sets of this CarrierAccount.


        :param integration_custom_field_sets: The integration_custom_field_sets of this CarrierAccount.  # noqa: E501
        :type: list[CustomFieldSet]
        """

        self._integration_custom_field_sets = integration_custom_field_sets

    @property
    def integration_custom_values(self):
        """Gets the integration_custom_values of this CarrierAccount.  # noqa: E501


        :return: The integration_custom_values of this CarrierAccount.  # noqa: E501
        :rtype: list[CustomValue]
        """
        return self._integration_custom_values

    @integration_custom_values.setter
    def integration_custom_values(self, integration_custom_values):
        """Sets the integration_custom_values of this CarrierAccount.


        :param integration_custom_values: The integration_custom_values of this CarrierAccount.  # noqa: E501
        :type: list[CustomValue]
        """

        self._integration_custom_values = integration_custom_values

    @property
    def children(self):
        """Gets the children of this CarrierAccount.  # noqa: E501


        :return: The children of this CarrierAccount.  # noqa: E501
        :rtype: list[CarrierAccount]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this CarrierAccount.


        :param children: The children of this CarrierAccount.  # noqa: E501
        :type: list[CarrierAccount]
        """

        self._children = children

    @property
    def default_company_carrier_account_id(self):
        """Gets the default_company_carrier_account_id of this CarrierAccount.  # noqa: E501


        :return: The default_company_carrier_account_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._default_company_carrier_account_id

    @default_company_carrier_account_id.setter
    def default_company_carrier_account_id(self, default_company_carrier_account_id):
        """Sets the default_company_carrier_account_id of this CarrierAccount.


        :param default_company_carrier_account_id: The default_company_carrier_account_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._default_company_carrier_account_id = default_company_carrier_account_id

    @property
    def default_company_carrier_account(self):
        """Gets the default_company_carrier_account of this CarrierAccount.  # noqa: E501


        :return: The default_company_carrier_account of this CarrierAccount.  # noqa: E501
        :rtype: CompanyCarrierAccount
        """
        return self._default_company_carrier_account

    @default_company_carrier_account.setter
    def default_company_carrier_account(self, default_company_carrier_account):
        """Sets the default_company_carrier_account of this CarrierAccount.


        :param default_company_carrier_account: The default_company_carrier_account of this CarrierAccount.  # noqa: E501
        :type: CompanyCarrierAccount
        """

        self._default_company_carrier_account = default_company_carrier_account

    @property
    def fuel_surcharge_id(self):
        """Gets the fuel_surcharge_id of this CarrierAccount.  # noqa: E501


        :return: The fuel_surcharge_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._fuel_surcharge_id

    @fuel_surcharge_id.setter
    def fuel_surcharge_id(self, fuel_surcharge_id):
        """Sets the fuel_surcharge_id of this CarrierAccount.


        :param fuel_surcharge_id: The fuel_surcharge_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._fuel_surcharge_id = fuel_surcharge_id

    @property
    def serialised_custom_fields(self):
        """Gets the serialised_custom_fields of this CarrierAccount.  # noqa: E501


        :return: The serialised_custom_fields of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._serialised_custom_fields

    @serialised_custom_fields.setter
    def serialised_custom_fields(self, serialised_custom_fields):
        """Sets the serialised_custom_fields of this CarrierAccount.


        :param serialised_custom_fields: The serialised_custom_fields of this CarrierAccount.  # noqa: E501
        :type: str
        """

        self._serialised_custom_fields = serialised_custom_fields

    @property
    def carrier_account_code(self):
        """Gets the carrier_account_code of this CarrierAccount.  # noqa: E501


        :return: The carrier_account_code of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._carrier_account_code

    @carrier_account_code.setter
    def carrier_account_code(self, carrier_account_code):
        """Sets the carrier_account_code of this CarrierAccount.


        :param carrier_account_code: The carrier_account_code of this CarrierAccount.  # noqa: E501
        :type: str
        """

        self._carrier_account_code = carrier_account_code

    @property
    def serialised_integration_settings(self):
        """Gets the serialised_integration_settings of this CarrierAccount.  # noqa: E501


        :return: The serialised_integration_settings of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._serialised_integration_settings

    @serialised_integration_settings.setter
    def serialised_integration_settings(self, serialised_integration_settings):
        """Sets the serialised_integration_settings of this CarrierAccount.


        :param serialised_integration_settings: The serialised_integration_settings of this CarrierAccount.  # noqa: E501
        :type: str
        """

        self._serialised_integration_settings = serialised_integration_settings

    @property
    def ignore_sizing_restrictions(self):
        """Gets the ignore_sizing_restrictions of this CarrierAccount.  # noqa: E501


        :return: The ignore_sizing_restrictions of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_sizing_restrictions

    @ignore_sizing_restrictions.setter
    def ignore_sizing_restrictions(self, ignore_sizing_restrictions):
        """Sets the ignore_sizing_restrictions of this CarrierAccount.


        :param ignore_sizing_restrictions: The ignore_sizing_restrictions of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._ignore_sizing_restrictions = ignore_sizing_restrictions

    @property
    def dg_enabled(self):
        """Gets the dg_enabled of this CarrierAccount.  # noqa: E501


        :return: The dg_enabled of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._dg_enabled

    @dg_enabled.setter
    def dg_enabled(self, dg_enabled):
        """Sets the dg_enabled of this CarrierAccount.


        :param dg_enabled: The dg_enabled of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._dg_enabled = dg_enabled

    @property
    def breakup_combined_for_paperwork(self):
        """Gets the breakup_combined_for_paperwork of this CarrierAccount.  # noqa: E501


        :return: The breakup_combined_for_paperwork of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._breakup_combined_for_paperwork

    @breakup_combined_for_paperwork.setter
    def breakup_combined_for_paperwork(self, breakup_combined_for_paperwork):
        """Sets the breakup_combined_for_paperwork of this CarrierAccount.


        :param breakup_combined_for_paperwork: The breakup_combined_for_paperwork of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._breakup_combined_for_paperwork = breakup_combined_for_paperwork

    @property
    def pricing_apply_most_expensive_rate_set(self):
        """Gets the pricing_apply_most_expensive_rate_set of this CarrierAccount.  # noqa: E501


        :return: The pricing_apply_most_expensive_rate_set of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._pricing_apply_most_expensive_rate_set

    @pricing_apply_most_expensive_rate_set.setter
    def pricing_apply_most_expensive_rate_set(self, pricing_apply_most_expensive_rate_set):
        """Sets the pricing_apply_most_expensive_rate_set of this CarrierAccount.


        :param pricing_apply_most_expensive_rate_set: The pricing_apply_most_expensive_rate_set of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._pricing_apply_most_expensive_rate_set = pricing_apply_most_expensive_rate_set

    @property
    def auto_close_consignments(self):
        """Gets the auto_close_consignments of this CarrierAccount.  # noqa: E501


        :return: The auto_close_consignments of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._auto_close_consignments

    @auto_close_consignments.setter
    def auto_close_consignments(self, auto_close_consignments):
        """Sets the auto_close_consignments of this CarrierAccount.


        :param auto_close_consignments: The auto_close_consignments of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._auto_close_consignments = auto_close_consignments

    @property
    def hold_consignments_for_invoicing(self):
        """Gets the hold_consignments_for_invoicing of this CarrierAccount.  # noqa: E501


        :return: The hold_consignments_for_invoicing of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._hold_consignments_for_invoicing

    @hold_consignments_for_invoicing.setter
    def hold_consignments_for_invoicing(self, hold_consignments_for_invoicing):
        """Sets the hold_consignments_for_invoicing of this CarrierAccount.


        :param hold_consignments_for_invoicing: The hold_consignments_for_invoicing of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._hold_consignments_for_invoicing = hold_consignments_for_invoicing

    @property
    def hold_consignments_for_reconciliation(self):
        """Gets the hold_consignments_for_reconciliation of this CarrierAccount.  # noqa: E501


        :return: The hold_consignments_for_reconciliation of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._hold_consignments_for_reconciliation

    @hold_consignments_for_reconciliation.setter
    def hold_consignments_for_reconciliation(self, hold_consignments_for_reconciliation):
        """Sets the hold_consignments_for_reconciliation of this CarrierAccount.


        :param hold_consignments_for_reconciliation: The hold_consignments_for_reconciliation of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._hold_consignments_for_reconciliation = hold_consignments_for_reconciliation

    @property
    def pre_invoice_authorise_consignments(self):
        """Gets the pre_invoice_authorise_consignments of this CarrierAccount.  # noqa: E501


        :return: The pre_invoice_authorise_consignments of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._pre_invoice_authorise_consignments

    @pre_invoice_authorise_consignments.setter
    def pre_invoice_authorise_consignments(self, pre_invoice_authorise_consignments):
        """Sets the pre_invoice_authorise_consignments of this CarrierAccount.


        :param pre_invoice_authorise_consignments: The pre_invoice_authorise_consignments of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._pre_invoice_authorise_consignments = pre_invoice_authorise_consignments

    @property
    def external_finance_package_tracking_name(self):
        """Gets the external_finance_package_tracking_name of this CarrierAccount.  # noqa: E501


        :return: The external_finance_package_tracking_name of this CarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._external_finance_package_tracking_name

    @external_finance_package_tracking_name.setter
    def external_finance_package_tracking_name(self, external_finance_package_tracking_name):
        """Sets the external_finance_package_tracking_name of this CarrierAccount.


        :param external_finance_package_tracking_name: The external_finance_package_tracking_name of this CarrierAccount.  # noqa: E501
        :type: str
        """

        self._external_finance_package_tracking_name = external_finance_package_tracking_name

    @property
    def disabled(self):
        """Gets the disabled of this CarrierAccount.  # noqa: E501


        :return: The disabled of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CarrierAccount.


        :param disabled: The disabled of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def is_in_test_mode(self):
        """Gets the is_in_test_mode of this CarrierAccount.  # noqa: E501


        :return: The is_in_test_mode of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_test_mode

    @is_in_test_mode.setter
    def is_in_test_mode(self, is_in_test_mode):
        """Sets the is_in_test_mode of this CarrierAccount.


        :param is_in_test_mode: The is_in_test_mode of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._is_in_test_mode = is_in_test_mode

    @property
    def use_ratecard_pricing_when_present(self):
        """Gets the use_ratecard_pricing_when_present of this CarrierAccount.  # noqa: E501


        :return: The use_ratecard_pricing_when_present of this CarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._use_ratecard_pricing_when_present

    @use_ratecard_pricing_when_present.setter
    def use_ratecard_pricing_when_present(self, use_ratecard_pricing_when_present):
        """Sets the use_ratecard_pricing_when_present of this CarrierAccount.


        :param use_ratecard_pricing_when_present: The use_ratecard_pricing_when_present of this CarrierAccount.  # noqa: E501
        :type: bool
        """

        self._use_ratecard_pricing_when_present = use_ratecard_pricing_when_present

    @property
    def primary_reference_type(self):
        """Gets the primary_reference_type of this CarrierAccount.  # noqa: E501


        :return: The primary_reference_type of this CarrierAccount.  # noqa: E501
        :rtype: PrimaryReferenceType
        """
        return self._primary_reference_type

    @primary_reference_type.setter
    def primary_reference_type(self, primary_reference_type):
        """Sets the primary_reference_type of this CarrierAccount.


        :param primary_reference_type: The primary_reference_type of this CarrierAccount.  # noqa: E501
        :type: PrimaryReferenceType
        """

        self._primary_reference_type = primary_reference_type

    @property
    def country_id(self):
        """Gets the country_id of this CarrierAccount.  # noqa: E501


        :return: The country_id of this CarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CarrierAccount.


        :param country_id: The country_id of this CarrierAccount.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
