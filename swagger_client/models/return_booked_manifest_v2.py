# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReturnBookedManifestV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'consignment_ids': 'list[int]',
        'company_id': 'int',
        'carrier_reference': 'str',
        'booking_successful': 'bool',
        'error_message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'consignment_ids': 'consignmentIds',
        'company_id': 'companyId',
        'carrier_reference': 'carrierReference',
        'booking_successful': 'bookingSuccessful',
        'error_message': 'errorMessage'
    }

    def __init__(self, id=None, consignment_ids=None, company_id=None, carrier_reference=None, booking_successful=None, error_message=None):  # noqa: E501
        """ReturnBookedManifestV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._consignment_ids = None
        self._company_id = None
        self._carrier_reference = None
        self._booking_successful = None
        self._error_message = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if consignment_ids is not None:
            self.consignment_ids = consignment_ids
        if company_id is not None:
            self.company_id = company_id
        if carrier_reference is not None:
            self.carrier_reference = carrier_reference
        if booking_successful is not None:
            self.booking_successful = booking_successful
        if error_message is not None:
            self.error_message = error_message

    @property
    def id(self):
        """Gets the id of this ReturnBookedManifestV2.  # noqa: E501

        Machship's Manifest Id  # noqa: E501

        :return: The id of this ReturnBookedManifestV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReturnBookedManifestV2.

        Machship's Manifest Id  # noqa: E501

        :param id: The id of this ReturnBookedManifestV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def consignment_ids(self):
        """Gets the consignment_ids of this ReturnBookedManifestV2.  # noqa: E501

        All the consignment Ids that should be manifested together  # noqa: E501

        :return: The consignment_ids of this ReturnBookedManifestV2.  # noqa: E501
        :rtype: list[int]
        """
        return self._consignment_ids

    @consignment_ids.setter
    def consignment_ids(self, consignment_ids):
        """Sets the consignment_ids of this ReturnBookedManifestV2.

        All the consignment Ids that should be manifested together  # noqa: E501

        :param consignment_ids: The consignment_ids of this ReturnBookedManifestV2.  # noqa: E501
        :type: list[int]
        """

        self._consignment_ids = consignment_ids

    @property
    def company_id(self):
        """Gets the company_id of this ReturnBookedManifestV2.  # noqa: E501

        The company's id in Machship which is manifesting these consignments  # noqa: E501

        :return: The company_id of this ReturnBookedManifestV2.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ReturnBookedManifestV2.

        The company's id in Machship which is manifesting these consignments  # noqa: E501

        :param company_id: The company_id of this ReturnBookedManifestV2.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def carrier_reference(self):
        """Gets the carrier_reference of this ReturnBookedManifestV2.  # noqa: E501

        Any reference information from the Carrier pertaining to the manifest  # noqa: E501

        :return: The carrier_reference of this ReturnBookedManifestV2.  # noqa: E501
        :rtype: str
        """
        return self._carrier_reference

    @carrier_reference.setter
    def carrier_reference(self, carrier_reference):
        """Sets the carrier_reference of this ReturnBookedManifestV2.

        Any reference information from the Carrier pertaining to the manifest  # noqa: E501

        :param carrier_reference: The carrier_reference of this ReturnBookedManifestV2.  # noqa: E501
        :type: str
        """

        self._carrier_reference = carrier_reference

    @property
    def booking_successful(self):
        """Gets the booking_successful of this ReturnBookedManifestV2.  # noqa: E501

        Whether or not the manifest was booked successfully  # noqa: E501

        :return: The booking_successful of this ReturnBookedManifestV2.  # noqa: E501
        :rtype: bool
        """
        return self._booking_successful

    @booking_successful.setter
    def booking_successful(self, booking_successful):
        """Sets the booking_successful of this ReturnBookedManifestV2.

        Whether or not the manifest was booked successfully  # noqa: E501

        :param booking_successful: The booking_successful of this ReturnBookedManifestV2.  # noqa: E501
        :type: bool
        """

        self._booking_successful = booking_successful

    @property
    def error_message(self):
        """Gets the error_message of this ReturnBookedManifestV2.  # noqa: E501

        The error message if the booking was not successful  # noqa: E501

        :return: The error_message of this ReturnBookedManifestV2.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ReturnBookedManifestV2.

        The error message if the booking was not successful  # noqa: E501

        :param error_message: The error_message of this ReturnBookedManifestV2.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReturnBookedManifestV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReturnBookedManifestV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
