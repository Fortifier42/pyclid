# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DgUnNumberFlat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'un_number': 'int',
        'name': 'str',
        'packing_group_name': 'str',
        'packing_group': 'PackingGroup',
        'classes': 'list[DgClass]',
        'requires_technical_name': 'bool',
        '_class': 'DgClass',
        'sub_classes': 'list[DgClass]',
        'classes_for_display': 'str',
        'sub_classes_for_display': 'str'
    }

    attribute_map = {
        'un_number': 'unNumber',
        'name': 'name',
        'packing_group_name': 'packingGroupName',
        'packing_group': 'packingGroup',
        'classes': 'classes',
        'requires_technical_name': 'requiresTechnicalName',
        '_class': 'class',
        'sub_classes': 'subClasses',
        'classes_for_display': 'classesForDisplay',
        'sub_classes_for_display': 'subClassesForDisplay'
    }

    def __init__(self, un_number=None, name=None, packing_group_name=None, packing_group=None, classes=None, requires_technical_name=None, _class=None, sub_classes=None, classes_for_display=None, sub_classes_for_display=None):  # noqa: E501
        """DgUnNumberFlat - a model defined in Swagger"""  # noqa: E501
        self._un_number = None
        self._name = None
        self._packing_group_name = None
        self._packing_group = None
        self._classes = None
        self._requires_technical_name = None
        self.__class = None
        self._sub_classes = None
        self._classes_for_display = None
        self._sub_classes_for_display = None
        self.discriminator = None
        if un_number is not None:
            self.un_number = un_number
        if name is not None:
            self.name = name
        if packing_group_name is not None:
            self.packing_group_name = packing_group_name
        if packing_group is not None:
            self.packing_group = packing_group
        if classes is not None:
            self.classes = classes
        if requires_technical_name is not None:
            self.requires_technical_name = requires_technical_name
        if _class is not None:
            self._class = _class
        if sub_classes is not None:
            self.sub_classes = sub_classes
        if classes_for_display is not None:
            self.classes_for_display = classes_for_display
        if sub_classes_for_display is not None:
            self.sub_classes_for_display = sub_classes_for_display

    @property
    def un_number(self):
        """Gets the un_number of this DgUnNumberFlat.  # noqa: E501


        :return: The un_number of this DgUnNumberFlat.  # noqa: E501
        :rtype: int
        """
        return self._un_number

    @un_number.setter
    def un_number(self, un_number):
        """Sets the un_number of this DgUnNumberFlat.


        :param un_number: The un_number of this DgUnNumberFlat.  # noqa: E501
        :type: int
        """

        self._un_number = un_number

    @property
    def name(self):
        """Gets the name of this DgUnNumberFlat.  # noqa: E501


        :return: The name of this DgUnNumberFlat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DgUnNumberFlat.


        :param name: The name of this DgUnNumberFlat.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def packing_group_name(self):
        """Gets the packing_group_name of this DgUnNumberFlat.  # noqa: E501


        :return: The packing_group_name of this DgUnNumberFlat.  # noqa: E501
        :rtype: str
        """
        return self._packing_group_name

    @packing_group_name.setter
    def packing_group_name(self, packing_group_name):
        """Sets the packing_group_name of this DgUnNumberFlat.


        :param packing_group_name: The packing_group_name of this DgUnNumberFlat.  # noqa: E501
        :type: str
        """

        self._packing_group_name = packing_group_name

    @property
    def packing_group(self):
        """Gets the packing_group of this DgUnNumberFlat.  # noqa: E501


        :return: The packing_group of this DgUnNumberFlat.  # noqa: E501
        :rtype: PackingGroup
        """
        return self._packing_group

    @packing_group.setter
    def packing_group(self, packing_group):
        """Sets the packing_group of this DgUnNumberFlat.


        :param packing_group: The packing_group of this DgUnNumberFlat.  # noqa: E501
        :type: PackingGroup
        """

        self._packing_group = packing_group

    @property
    def classes(self):
        """Gets the classes of this DgUnNumberFlat.  # noqa: E501


        :return: The classes of this DgUnNumberFlat.  # noqa: E501
        :rtype: list[DgClass]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this DgUnNumberFlat.


        :param classes: The classes of this DgUnNumberFlat.  # noqa: E501
        :type: list[DgClass]
        """

        self._classes = classes

    @property
    def requires_technical_name(self):
        """Gets the requires_technical_name of this DgUnNumberFlat.  # noqa: E501


        :return: The requires_technical_name of this DgUnNumberFlat.  # noqa: E501
        :rtype: bool
        """
        return self._requires_technical_name

    @requires_technical_name.setter
    def requires_technical_name(self, requires_technical_name):
        """Sets the requires_technical_name of this DgUnNumberFlat.


        :param requires_technical_name: The requires_technical_name of this DgUnNumberFlat.  # noqa: E501
        :type: bool
        """

        self._requires_technical_name = requires_technical_name

    @property
    def _class(self):
        """Gets the _class of this DgUnNumberFlat.  # noqa: E501


        :return: The _class of this DgUnNumberFlat.  # noqa: E501
        :rtype: DgClass
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this DgUnNumberFlat.


        :param _class: The _class of this DgUnNumberFlat.  # noqa: E501
        :type: DgClass
        """

        self.__class = _class

    @property
    def sub_classes(self):
        """Gets the sub_classes of this DgUnNumberFlat.  # noqa: E501


        :return: The sub_classes of this DgUnNumberFlat.  # noqa: E501
        :rtype: list[DgClass]
        """
        return self._sub_classes

    @sub_classes.setter
    def sub_classes(self, sub_classes):
        """Sets the sub_classes of this DgUnNumberFlat.


        :param sub_classes: The sub_classes of this DgUnNumberFlat.  # noqa: E501
        :type: list[DgClass]
        """

        self._sub_classes = sub_classes

    @property
    def classes_for_display(self):
        """Gets the classes_for_display of this DgUnNumberFlat.  # noqa: E501


        :return: The classes_for_display of this DgUnNumberFlat.  # noqa: E501
        :rtype: str
        """
        return self._classes_for_display

    @classes_for_display.setter
    def classes_for_display(self, classes_for_display):
        """Sets the classes_for_display of this DgUnNumberFlat.


        :param classes_for_display: The classes_for_display of this DgUnNumberFlat.  # noqa: E501
        :type: str
        """

        self._classes_for_display = classes_for_display

    @property
    def sub_classes_for_display(self):
        """Gets the sub_classes_for_display of this DgUnNumberFlat.  # noqa: E501


        :return: The sub_classes_for_display of this DgUnNumberFlat.  # noqa: E501
        :rtype: str
        """
        return self._sub_classes_for_display

    @sub_classes_for_display.setter
    def sub_classes_for_display(self, sub_classes_for_display):
        """Sets the sub_classes_for_display of this DgUnNumberFlat.


        :param sub_classes_for_display: The sub_classes_for_display of this DgUnNumberFlat.  # noqa: E501
        :type: str
        """

        self._sub_classes_for_display = sub_classes_for_display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DgUnNumberFlat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DgUnNumberFlat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
