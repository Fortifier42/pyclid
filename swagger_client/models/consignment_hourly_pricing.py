# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentHourlyPricing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consignment_id': 'int',
        'minimum_price_cost': 'float',
        'minimum_price_sell': 'float',
        'minimum_minutes': 'float',
        'hourly_base_rate_cost': 'float',
        'hourly_base_rate_sell': 'float',
        'hourly_fuel_amount_cost': 'float',
        'hourly_fuel_amount_sell': 'float',
        'hourly_tax_amount_cost': 'float',
        'hourly_tax_amount_sell': 'float',
        'hourly_total_cost': 'float',
        'hourly_total_sell': 'float',
        'sell_prices_cleared': 'bool'
    }

    attribute_map = {
        'consignment_id': 'consignmentId',
        'minimum_price_cost': 'minimumPriceCost',
        'minimum_price_sell': 'minimumPriceSell',
        'minimum_minutes': 'minimumMinutes',
        'hourly_base_rate_cost': 'hourlyBaseRateCost',
        'hourly_base_rate_sell': 'hourlyBaseRateSell',
        'hourly_fuel_amount_cost': 'hourlyFuelAmountCost',
        'hourly_fuel_amount_sell': 'hourlyFuelAmountSell',
        'hourly_tax_amount_cost': 'hourlyTaxAmountCost',
        'hourly_tax_amount_sell': 'hourlyTaxAmountSell',
        'hourly_total_cost': 'hourlyTotalCost',
        'hourly_total_sell': 'hourlyTotalSell',
        'sell_prices_cleared': 'sellPricesCleared'
    }

    def __init__(self, consignment_id=None, minimum_price_cost=None, minimum_price_sell=None, minimum_minutes=None, hourly_base_rate_cost=None, hourly_base_rate_sell=None, hourly_fuel_amount_cost=None, hourly_fuel_amount_sell=None, hourly_tax_amount_cost=None, hourly_tax_amount_sell=None, hourly_total_cost=None, hourly_total_sell=None, sell_prices_cleared=None):  # noqa: E501
        """ConsignmentHourlyPricing - a model defined in Swagger"""  # noqa: E501
        self._consignment_id = None
        self._minimum_price_cost = None
        self._minimum_price_sell = None
        self._minimum_minutes = None
        self._hourly_base_rate_cost = None
        self._hourly_base_rate_sell = None
        self._hourly_fuel_amount_cost = None
        self._hourly_fuel_amount_sell = None
        self._hourly_tax_amount_cost = None
        self._hourly_tax_amount_sell = None
        self._hourly_total_cost = None
        self._hourly_total_sell = None
        self._sell_prices_cleared = None
        self.discriminator = None
        if consignment_id is not None:
            self.consignment_id = consignment_id
        if minimum_price_cost is not None:
            self.minimum_price_cost = minimum_price_cost
        if minimum_price_sell is not None:
            self.minimum_price_sell = minimum_price_sell
        if minimum_minutes is not None:
            self.minimum_minutes = minimum_minutes
        if hourly_base_rate_cost is not None:
            self.hourly_base_rate_cost = hourly_base_rate_cost
        if hourly_base_rate_sell is not None:
            self.hourly_base_rate_sell = hourly_base_rate_sell
        if hourly_fuel_amount_cost is not None:
            self.hourly_fuel_amount_cost = hourly_fuel_amount_cost
        if hourly_fuel_amount_sell is not None:
            self.hourly_fuel_amount_sell = hourly_fuel_amount_sell
        if hourly_tax_amount_cost is not None:
            self.hourly_tax_amount_cost = hourly_tax_amount_cost
        if hourly_tax_amount_sell is not None:
            self.hourly_tax_amount_sell = hourly_tax_amount_sell
        if hourly_total_cost is not None:
            self.hourly_total_cost = hourly_total_cost
        if hourly_total_sell is not None:
            self.hourly_total_sell = hourly_total_sell
        if sell_prices_cleared is not None:
            self.sell_prices_cleared = sell_prices_cleared

    @property
    def consignment_id(self):
        """Gets the consignment_id of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The consignment_id of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: int
        """
        return self._consignment_id

    @consignment_id.setter
    def consignment_id(self, consignment_id):
        """Sets the consignment_id of this ConsignmentHourlyPricing.


        :param consignment_id: The consignment_id of this ConsignmentHourlyPricing.  # noqa: E501
        :type: int
        """

        self._consignment_id = consignment_id

    @property
    def minimum_price_cost(self):
        """Gets the minimum_price_cost of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The minimum_price_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._minimum_price_cost

    @minimum_price_cost.setter
    def minimum_price_cost(self, minimum_price_cost):
        """Sets the minimum_price_cost of this ConsignmentHourlyPricing.


        :param minimum_price_cost: The minimum_price_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._minimum_price_cost = minimum_price_cost

    @property
    def minimum_price_sell(self):
        """Gets the minimum_price_sell of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The minimum_price_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._minimum_price_sell

    @minimum_price_sell.setter
    def minimum_price_sell(self, minimum_price_sell):
        """Sets the minimum_price_sell of this ConsignmentHourlyPricing.


        :param minimum_price_sell: The minimum_price_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._minimum_price_sell = minimum_price_sell

    @property
    def minimum_minutes(self):
        """Gets the minimum_minutes of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The minimum_minutes of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._minimum_minutes

    @minimum_minutes.setter
    def minimum_minutes(self, minimum_minutes):
        """Sets the minimum_minutes of this ConsignmentHourlyPricing.


        :param minimum_minutes: The minimum_minutes of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._minimum_minutes = minimum_minutes

    @property
    def hourly_base_rate_cost(self):
        """Gets the hourly_base_rate_cost of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_base_rate_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_base_rate_cost

    @hourly_base_rate_cost.setter
    def hourly_base_rate_cost(self, hourly_base_rate_cost):
        """Sets the hourly_base_rate_cost of this ConsignmentHourlyPricing.


        :param hourly_base_rate_cost: The hourly_base_rate_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_base_rate_cost = hourly_base_rate_cost

    @property
    def hourly_base_rate_sell(self):
        """Gets the hourly_base_rate_sell of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_base_rate_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_base_rate_sell

    @hourly_base_rate_sell.setter
    def hourly_base_rate_sell(self, hourly_base_rate_sell):
        """Sets the hourly_base_rate_sell of this ConsignmentHourlyPricing.


        :param hourly_base_rate_sell: The hourly_base_rate_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_base_rate_sell = hourly_base_rate_sell

    @property
    def hourly_fuel_amount_cost(self):
        """Gets the hourly_fuel_amount_cost of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_fuel_amount_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_fuel_amount_cost

    @hourly_fuel_amount_cost.setter
    def hourly_fuel_amount_cost(self, hourly_fuel_amount_cost):
        """Sets the hourly_fuel_amount_cost of this ConsignmentHourlyPricing.


        :param hourly_fuel_amount_cost: The hourly_fuel_amount_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_fuel_amount_cost = hourly_fuel_amount_cost

    @property
    def hourly_fuel_amount_sell(self):
        """Gets the hourly_fuel_amount_sell of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_fuel_amount_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_fuel_amount_sell

    @hourly_fuel_amount_sell.setter
    def hourly_fuel_amount_sell(self, hourly_fuel_amount_sell):
        """Sets the hourly_fuel_amount_sell of this ConsignmentHourlyPricing.


        :param hourly_fuel_amount_sell: The hourly_fuel_amount_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_fuel_amount_sell = hourly_fuel_amount_sell

    @property
    def hourly_tax_amount_cost(self):
        """Gets the hourly_tax_amount_cost of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_tax_amount_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_tax_amount_cost

    @hourly_tax_amount_cost.setter
    def hourly_tax_amount_cost(self, hourly_tax_amount_cost):
        """Sets the hourly_tax_amount_cost of this ConsignmentHourlyPricing.


        :param hourly_tax_amount_cost: The hourly_tax_amount_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_tax_amount_cost = hourly_tax_amount_cost

    @property
    def hourly_tax_amount_sell(self):
        """Gets the hourly_tax_amount_sell of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_tax_amount_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_tax_amount_sell

    @hourly_tax_amount_sell.setter
    def hourly_tax_amount_sell(self, hourly_tax_amount_sell):
        """Sets the hourly_tax_amount_sell of this ConsignmentHourlyPricing.


        :param hourly_tax_amount_sell: The hourly_tax_amount_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_tax_amount_sell = hourly_tax_amount_sell

    @property
    def hourly_total_cost(self):
        """Gets the hourly_total_cost of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_total_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_total_cost

    @hourly_total_cost.setter
    def hourly_total_cost(self, hourly_total_cost):
        """Sets the hourly_total_cost of this ConsignmentHourlyPricing.


        :param hourly_total_cost: The hourly_total_cost of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_total_cost = hourly_total_cost

    @property
    def hourly_total_sell(self):
        """Gets the hourly_total_sell of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The hourly_total_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: float
        """
        return self._hourly_total_sell

    @hourly_total_sell.setter
    def hourly_total_sell(self, hourly_total_sell):
        """Sets the hourly_total_sell of this ConsignmentHourlyPricing.


        :param hourly_total_sell: The hourly_total_sell of this ConsignmentHourlyPricing.  # noqa: E501
        :type: float
        """

        self._hourly_total_sell = hourly_total_sell

    @property
    def sell_prices_cleared(self):
        """Gets the sell_prices_cleared of this ConsignmentHourlyPricing.  # noqa: E501


        :return: The sell_prices_cleared of this ConsignmentHourlyPricing.  # noqa: E501
        :rtype: bool
        """
        return self._sell_prices_cleared

    @sell_prices_cleared.setter
    def sell_prices_cleared(self, sell_prices_cleared):
        """Sets the sell_prices_cleared of this ConsignmentHourlyPricing.


        :param sell_prices_cleared: The sell_prices_cleared of this ConsignmentHourlyPricing.  # noqa: E501
        :type: bool
        """

        self._sell_prices_cleared = sell_prices_cleared

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentHourlyPricing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentHourlyPricing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
