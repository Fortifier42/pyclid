# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organisation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company_id': 'int',
        'company': 'CompanyLite',
        'time_zone_id': 'int',
        'time_zone': 'TimeZoneModel',
        'name': 'str',
        'abbreviation': 'str',
        'display_name': 'str',
        'trading_name': 'str',
        'primary_colour': 'str',
        'secondary_colour': 'str',
        'logo_file_information_id': 'int',
        'total_rows': 'int',
        'admin_users': 'list[OrganisationAdminUser]',
        'organisation_information': 'OrganisationInformation'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'company': 'company',
        'time_zone_id': 'timeZoneId',
        'time_zone': 'timeZone',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'display_name': 'displayName',
        'trading_name': 'tradingName',
        'primary_colour': 'primaryColour',
        'secondary_colour': 'secondaryColour',
        'logo_file_information_id': 'logoFileInformationId',
        'total_rows': 'totalRows',
        'admin_users': 'adminUsers',
        'organisation_information': 'organisationInformation'
    }

    def __init__(self, id=None, company_id=None, company=None, time_zone_id=None, time_zone=None, name=None, abbreviation=None, display_name=None, trading_name=None, primary_colour=None, secondary_colour=None, logo_file_information_id=None, total_rows=None, admin_users=None, organisation_information=None):  # noqa: E501
        """Organisation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._company = None
        self._time_zone_id = None
        self._time_zone = None
        self._name = None
        self._abbreviation = None
        self._display_name = None
        self._trading_name = None
        self._primary_colour = None
        self._secondary_colour = None
        self._logo_file_information_id = None
        self._total_rows = None
        self._admin_users = None
        self._organisation_information = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if company is not None:
            self.company = company
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if time_zone is not None:
            self.time_zone = time_zone
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if display_name is not None:
            self.display_name = display_name
        if trading_name is not None:
            self.trading_name = trading_name
        if primary_colour is not None:
            self.primary_colour = primary_colour
        if secondary_colour is not None:
            self.secondary_colour = secondary_colour
        if logo_file_information_id is not None:
            self.logo_file_information_id = logo_file_information_id
        if total_rows is not None:
            self.total_rows = total_rows
        if admin_users is not None:
            self.admin_users = admin_users
        if organisation_information is not None:
            self.organisation_information = organisation_information

    @property
    def id(self):
        """Gets the id of this Organisation.  # noqa: E501


        :return: The id of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organisation.


        :param id: The id of this Organisation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this Organisation.  # noqa: E501


        :return: The company_id of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Organisation.


        :param company_id: The company_id of this Organisation.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def company(self):
        """Gets the company of this Organisation.  # noqa: E501


        :return: The company of this Organisation.  # noqa: E501
        :rtype: CompanyLite
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Organisation.


        :param company: The company of this Organisation.  # noqa: E501
        :type: CompanyLite
        """

        self._company = company

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this Organisation.  # noqa: E501


        :return: The time_zone_id of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this Organisation.


        :param time_zone_id: The time_zone_id of this Organisation.  # noqa: E501
        :type: int
        """

        self._time_zone_id = time_zone_id

    @property
    def time_zone(self):
        """Gets the time_zone of this Organisation.  # noqa: E501


        :return: The time_zone of this Organisation.  # noqa: E501
        :rtype: TimeZoneModel
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Organisation.


        :param time_zone: The time_zone of this Organisation.  # noqa: E501
        :type: TimeZoneModel
        """

        self._time_zone = time_zone

    @property
    def name(self):
        """Gets the name of this Organisation.  # noqa: E501


        :return: The name of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organisation.


        :param name: The name of this Organisation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Organisation.  # noqa: E501


        :return: The abbreviation of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Organisation.


        :param abbreviation: The abbreviation of this Organisation.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def display_name(self):
        """Gets the display_name of this Organisation.  # noqa: E501


        :return: The display_name of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Organisation.


        :param display_name: The display_name of this Organisation.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def trading_name(self):
        """Gets the trading_name of this Organisation.  # noqa: E501


        :return: The trading_name of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._trading_name

    @trading_name.setter
    def trading_name(self, trading_name):
        """Sets the trading_name of this Organisation.


        :param trading_name: The trading_name of this Organisation.  # noqa: E501
        :type: str
        """

        self._trading_name = trading_name

    @property
    def primary_colour(self):
        """Gets the primary_colour of this Organisation.  # noqa: E501


        :return: The primary_colour of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._primary_colour

    @primary_colour.setter
    def primary_colour(self, primary_colour):
        """Sets the primary_colour of this Organisation.


        :param primary_colour: The primary_colour of this Organisation.  # noqa: E501
        :type: str
        """

        self._primary_colour = primary_colour

    @property
    def secondary_colour(self):
        """Gets the secondary_colour of this Organisation.  # noqa: E501


        :return: The secondary_colour of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._secondary_colour

    @secondary_colour.setter
    def secondary_colour(self, secondary_colour):
        """Sets the secondary_colour of this Organisation.


        :param secondary_colour: The secondary_colour of this Organisation.  # noqa: E501
        :type: str
        """

        self._secondary_colour = secondary_colour

    @property
    def logo_file_information_id(self):
        """Gets the logo_file_information_id of this Organisation.  # noqa: E501


        :return: The logo_file_information_id of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._logo_file_information_id

    @logo_file_information_id.setter
    def logo_file_information_id(self, logo_file_information_id):
        """Sets the logo_file_information_id of this Organisation.


        :param logo_file_information_id: The logo_file_information_id of this Organisation.  # noqa: E501
        :type: int
        """

        self._logo_file_information_id = logo_file_information_id

    @property
    def total_rows(self):
        """Gets the total_rows of this Organisation.  # noqa: E501


        :return: The total_rows of this Organisation.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this Organisation.


        :param total_rows: The total_rows of this Organisation.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def admin_users(self):
        """Gets the admin_users of this Organisation.  # noqa: E501


        :return: The admin_users of this Organisation.  # noqa: E501
        :rtype: list[OrganisationAdminUser]
        """
        return self._admin_users

    @admin_users.setter
    def admin_users(self, admin_users):
        """Sets the admin_users of this Organisation.


        :param admin_users: The admin_users of this Organisation.  # noqa: E501
        :type: list[OrganisationAdminUser]
        """

        self._admin_users = admin_users

    @property
    def organisation_information(self):
        """Gets the organisation_information of this Organisation.  # noqa: E501


        :return: The organisation_information of this Organisation.  # noqa: E501
        :rtype: OrganisationInformation
        """
        return self._organisation_information

    @organisation_information.setter
    def organisation_information(self, organisation_information):
        """Sets the organisation_information of this Organisation.


        :param organisation_information: The organisation_information of this Organisation.  # noqa: E501
        :type: OrganisationInformation
        """

        self._organisation_information = organisation_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organisation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
