# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentTrackingStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        '_class': 'str',
        'should_track': 'bool',
        'consignment_tracking_group': 'int',
        'status_is_partial': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        '_class': 'class',
        'should_track': 'shouldTrack',
        'consignment_tracking_group': 'consignmentTrackingGroup',
        'status_is_partial': 'statusIsPartial'
    }

    def __init__(self, id=None, name=None, description=None, _class=None, should_track=None, consignment_tracking_group=None, status_is_partial=None):  # noqa: E501
        """ConsignmentTrackingStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self.__class = None
        self._should_track = None
        self._consignment_tracking_group = None
        self._status_is_partial = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if _class is not None:
            self._class = _class
        if should_track is not None:
            self.should_track = should_track
        if consignment_tracking_group is not None:
            self.consignment_tracking_group = consignment_tracking_group
        if status_is_partial is not None:
            self.status_is_partial = status_is_partial

    @property
    def id(self):
        """Gets the id of this ConsignmentTrackingStatus.  # noqa: E501


        :return: The id of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsignmentTrackingStatus.


        :param id: The id of this ConsignmentTrackingStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConsignmentTrackingStatus.  # noqa: E501


        :return: The name of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsignmentTrackingStatus.


        :param name: The name of this ConsignmentTrackingStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConsignmentTrackingStatus.  # noqa: E501


        :return: The description of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConsignmentTrackingStatus.


        :param description: The description of this ConsignmentTrackingStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _class(self):
        """Gets the _class of this ConsignmentTrackingStatus.  # noqa: E501


        :return: The _class of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ConsignmentTrackingStatus.


        :param _class: The _class of this ConsignmentTrackingStatus.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def should_track(self):
        """Gets the should_track of this ConsignmentTrackingStatus.  # noqa: E501


        :return: The should_track of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._should_track

    @should_track.setter
    def should_track(self, should_track):
        """Sets the should_track of this ConsignmentTrackingStatus.


        :param should_track: The should_track of this ConsignmentTrackingStatus.  # noqa: E501
        :type: bool
        """

        self._should_track = should_track

    @property
    def consignment_tracking_group(self):
        """Gets the consignment_tracking_group of this ConsignmentTrackingStatus.  # noqa: E501


        :return: The consignment_tracking_group of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: int
        """
        return self._consignment_tracking_group

    @consignment_tracking_group.setter
    def consignment_tracking_group(self, consignment_tracking_group):
        """Sets the consignment_tracking_group of this ConsignmentTrackingStatus.


        :param consignment_tracking_group: The consignment_tracking_group of this ConsignmentTrackingStatus.  # noqa: E501
        :type: int
        """

        self._consignment_tracking_group = consignment_tracking_group

    @property
    def status_is_partial(self):
        """Gets the status_is_partial of this ConsignmentTrackingStatus.  # noqa: E501

        Indicative of whether items on this consignment are in differing statuses, leading to a \"partial\" overall  status on the consignment  # noqa: E501

        :return: The status_is_partial of this ConsignmentTrackingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._status_is_partial

    @status_is_partial.setter
    def status_is_partial(self, status_is_partial):
        """Sets the status_is_partial of this ConsignmentTrackingStatus.

        Indicative of whether items on this consignment are in differing statuses, leading to a \"partial\" overall  status on the consignment  # noqa: E501

        :param status_is_partial: The status_is_partial of this ConsignmentTrackingStatus.  # noqa: E501
        :type: bool
        """

        self._status_is_partial = status_is_partial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentTrackingStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentTrackingStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
