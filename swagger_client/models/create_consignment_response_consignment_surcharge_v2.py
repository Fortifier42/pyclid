# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateConsignmentResponseConsignmentSurchargeV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cost_price': 'float',
        'sell_price': 'float',
        'quantity': 'int',
        'name': 'str',
        'abbreviation': 'str',
        'surcharge_id': 'int',
        'surcharge': 'SurchargeV2',
        'guid': 'str',
        'selected': 'bool',
        'invoice_item_id': 'int',
        'markup_percentage': 'float',
        'original_price': 'float',
        'price_type': 'int',
        'percentage_of_sell_price': 'float'
    }

    attribute_map = {
        'id': 'id',
        'cost_price': 'costPrice',
        'sell_price': 'sellPrice',
        'quantity': 'quantity',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'surcharge_id': 'surchargeId',
        'surcharge': 'surcharge',
        'guid': 'guid',
        'selected': 'selected',
        'invoice_item_id': 'invoiceItemId',
        'markup_percentage': 'markupPercentage',
        'original_price': 'originalPrice',
        'price_type': 'priceType',
        'percentage_of_sell_price': 'percentageOfSellPrice'
    }

    def __init__(self, id=None, cost_price=None, sell_price=None, quantity=None, name=None, abbreviation=None, surcharge_id=None, surcharge=None, guid=None, selected=None, invoice_item_id=None, markup_percentage=None, original_price=None, price_type=None, percentage_of_sell_price=None):  # noqa: E501
        """CreateConsignmentResponseConsignmentSurchargeV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cost_price = None
        self._sell_price = None
        self._quantity = None
        self._name = None
        self._abbreviation = None
        self._surcharge_id = None
        self._surcharge = None
        self._guid = None
        self._selected = None
        self._invoice_item_id = None
        self._markup_percentage = None
        self._original_price = None
        self._price_type = None
        self._percentage_of_sell_price = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cost_price is not None:
            self.cost_price = cost_price
        if sell_price is not None:
            self.sell_price = sell_price
        if quantity is not None:
            self.quantity = quantity
        if name is not None:
            self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if surcharge_id is not None:
            self.surcharge_id = surcharge_id
        if surcharge is not None:
            self.surcharge = surcharge
        if guid is not None:
            self.guid = guid
        if selected is not None:
            self.selected = selected
        if invoice_item_id is not None:
            self.invoice_item_id = invoice_item_id
        if markup_percentage is not None:
            self.markup_percentage = markup_percentage
        if original_price is not None:
            self.original_price = original_price
        if price_type is not None:
            self.price_type = price_type
        if percentage_of_sell_price is not None:
            self.percentage_of_sell_price = percentage_of_sell_price

    @property
    def id(self):
        """Gets the id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param id: The id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cost_price(self):
        """Gets the cost_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501

        Cost Price of the surcharge  # noqa: E501

        :return: The cost_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this CreateConsignmentResponseConsignmentSurchargeV2.

        Cost Price of the surcharge  # noqa: E501

        :param cost_price: The cost_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def sell_price(self):
        """Gets the sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501

        Sell Price of the surcharge  # noqa: E501

        :return: The sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._sell_price

    @sell_price.setter
    def sell_price(self, sell_price):
        """Sets the sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.

        Sell Price of the surcharge  # noqa: E501

        :param sell_price: The sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._sell_price = sell_price

    @property
    def quantity(self):
        """Gets the quantity of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501

        How many times this surcharge is being applied. Quantity has already been applied to the CostPrice and SellPrice  # noqa: E501

        :return: The quantity of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CreateConsignmentResponseConsignmentSurchargeV2.

        How many times this surcharge is being applied. Quantity has already been applied to the CostPrice and SellPrice  # noqa: E501

        :param quantity: The quantity of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def name(self):
        """Gets the name of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501

        Surcharge Name  # noqa: E501

        :return: The name of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConsignmentResponseConsignmentSurchargeV2.

        Surcharge Name  # noqa: E501

        :param name: The name of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501

        Surcharge Abbreviation  # noqa: E501

        :return: The abbreviation of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CreateConsignmentResponseConsignmentSurchargeV2.

        Surcharge Abbreviation  # noqa: E501

        :param abbreviation: The abbreviation of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def surcharge_id(self):
        """Gets the surcharge_id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The surcharge_id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: int
        """
        return self._surcharge_id

    @surcharge_id.setter
    def surcharge_id(self, surcharge_id):
        """Sets the surcharge_id of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param surcharge_id: The surcharge_id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: int
        """

        self._surcharge_id = surcharge_id

    @property
    def surcharge(self):
        """Gets the surcharge of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The surcharge of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: SurchargeV2
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """Sets the surcharge of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param surcharge: The surcharge of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: SurchargeV2
        """

        self._surcharge = surcharge

    @property
    def guid(self):
        """Gets the guid of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The guid of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param guid: The guid of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def selected(self):
        """Gets the selected of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The selected of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param selected: The selected of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: bool
        """

        self._selected = selected

    @property
    def invoice_item_id(self):
        """Gets the invoice_item_id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The invoice_item_id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: int
        """
        return self._invoice_item_id

    @invoice_item_id.setter
    def invoice_item_id(self, invoice_item_id):
        """Sets the invoice_item_id of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param invoice_item_id: The invoice_item_id of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: int
        """

        self._invoice_item_id = invoice_item_id

    @property
    def markup_percentage(self):
        """Gets the markup_percentage of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The markup_percentage of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._markup_percentage

    @markup_percentage.setter
    def markup_percentage(self, markup_percentage):
        """Sets the markup_percentage of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param markup_percentage: The markup_percentage of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._markup_percentage = markup_percentage

    @property
    def original_price(self):
        """Gets the original_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The original_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param original_price: The original_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._original_price = original_price

    @property
    def price_type(self):
        """Gets the price_type of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The price_type of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: int
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param price_type: The price_type of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: int
        """

        self._price_type = price_type

    @property
    def percentage_of_sell_price(self):
        """Gets the percentage_of_sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501


        :return: The percentage_of_sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :rtype: float
        """
        return self._percentage_of_sell_price

    @percentage_of_sell_price.setter
    def percentage_of_sell_price(self, percentage_of_sell_price):
        """Sets the percentage_of_sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.


        :param percentage_of_sell_price: The percentage_of_sell_price of this CreateConsignmentResponseConsignmentSurchargeV2.  # noqa: E501
        :type: float
        """

        self._percentage_of_sell_price = percentage_of_sell_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateConsignmentResponseConsignmentSurchargeV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateConsignmentResponseConsignmentSurchargeV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
