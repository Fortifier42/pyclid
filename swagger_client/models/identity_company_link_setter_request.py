# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdentityCompanyLinkSetterRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_id': 'int',
        'identity_public_key': 'str',
        'company_id': 'int',
        'roles': 'list[int]',
        'test_mode_setting': 'UserTestModeSetting'
    }

    attribute_map = {
        'identity_id': 'identityId',
        'identity_public_key': 'identityPublicKey',
        'company_id': 'companyId',
        'roles': 'roles',
        'test_mode_setting': 'testModeSetting'
    }

    def __init__(self, identity_id=None, identity_public_key=None, company_id=None, roles=None, test_mode_setting=None):  # noqa: E501
        """IdentityCompanyLinkSetterRequest - a model defined in Swagger"""  # noqa: E501
        self._identity_id = None
        self._identity_public_key = None
        self._company_id = None
        self._roles = None
        self._test_mode_setting = None
        self.discriminator = None
        if identity_id is not None:
            self.identity_id = identity_id
        if identity_public_key is not None:
            self.identity_public_key = identity_public_key
        self.company_id = company_id
        self.roles = roles
        if test_mode_setting is not None:
            self.test_mode_setting = test_mode_setting

    @property
    def identity_id(self):
        """Gets the identity_id of this IdentityCompanyLinkSetterRequest.  # noqa: E501

        The ID in MachShip of an identity owned by your Organisation. Either the IdentityId OR IdentityPublicKey must be provided  # noqa: E501

        :return: The identity_id of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :rtype: int
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this IdentityCompanyLinkSetterRequest.

        The ID in MachShip of an identity owned by your Organisation. Either the IdentityId OR IdentityPublicKey must be provided  # noqa: E501

        :param identity_id: The identity_id of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :type: int
        """

        self._identity_id = identity_id

    @property
    def identity_public_key(self):
        """Gets the identity_public_key of this IdentityCompanyLinkSetterRequest.  # noqa: E501

        The \"public key\" of an identity from another organisation (who has been linked to your organisation). Either the IdentityId OR IdentityPublicKey must be provided  # noqa: E501

        :return: The identity_public_key of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :rtype: str
        """
        return self._identity_public_key

    @identity_public_key.setter
    def identity_public_key(self, identity_public_key):
        """Sets the identity_public_key of this IdentityCompanyLinkSetterRequest.

        The \"public key\" of an identity from another organisation (who has been linked to your organisation). Either the IdentityId OR IdentityPublicKey must be provided  # noqa: E501

        :param identity_public_key: The identity_public_key of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :type: str
        """

        self._identity_public_key = identity_public_key

    @property
    def company_id(self):
        """Gets the company_id of this IdentityCompanyLinkSetterRequest.  # noqa: E501

        The ID in MachShip of a company within your organisation  # noqa: E501

        :return: The company_id of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this IdentityCompanyLinkSetterRequest.

        The ID in MachShip of a company within your organisation  # noqa: E501

        :param company_id: The company_id of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :type: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def roles(self):
        """Gets the roles of this IdentityCompanyLinkSetterRequest.  # noqa: E501

        One ore more role IDs to assign the identity  # noqa: E501

        :return: The roles of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this IdentityCompanyLinkSetterRequest.

        One ore more role IDs to assign the identity  # noqa: E501

        :param roles: The roles of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :type: list[int]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def test_mode_setting(self):
        """Gets the test_mode_setting of this IdentityCompanyLinkSetterRequest.  # noqa: E501


        :return: The test_mode_setting of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :rtype: UserTestModeSetting
        """
        return self._test_mode_setting

    @test_mode_setting.setter
    def test_mode_setting(self, test_mode_setting):
        """Sets the test_mode_setting of this IdentityCompanyLinkSetterRequest.


        :param test_mode_setting: The test_mode_setting of this IdentityCompanyLinkSetterRequest.  # noqa: E501
        :type: UserTestModeSetting
        """

        self._test_mode_setting = test_mode_setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityCompanyLinkSetterRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityCompanyLinkSetterRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
