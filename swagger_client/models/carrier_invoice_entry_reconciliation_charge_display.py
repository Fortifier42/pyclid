# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierInvoiceEntryReconciliationChargeDisplay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_invoice_entry_id': 'int',
        'consignment_reconciliation_charge_id': 'int',
        'carrier_invoice_id': 'int',
        'carrier_invoice_number': 'str',
        'date_time_reconciled_utc': 'datetime',
        'base_cost': 'float',
        'tax_cost': 'float',
        'fuel_cost': 'float',
        'total_cost': 'float',
        'before_tax_cost': 'float',
        'automatic': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'carrier_invoice_entry_id': 'carrierInvoiceEntryId',
        'consignment_reconciliation_charge_id': 'consignmentReconciliationChargeId',
        'carrier_invoice_id': 'carrierInvoiceId',
        'carrier_invoice_number': 'carrierInvoiceNumber',
        'date_time_reconciled_utc': 'dateTimeReconciledUtc',
        'base_cost': 'baseCost',
        'tax_cost': 'taxCost',
        'fuel_cost': 'fuelCost',
        'total_cost': 'totalCost',
        'before_tax_cost': 'beforeTaxCost',
        'automatic': 'automatic'
    }

    def __init__(self, id=None, carrier_invoice_entry_id=None, consignment_reconciliation_charge_id=None, carrier_invoice_id=None, carrier_invoice_number=None, date_time_reconciled_utc=None, base_cost=None, tax_cost=None, fuel_cost=None, total_cost=None, before_tax_cost=None, automatic=None):  # noqa: E501
        """CarrierInvoiceEntryReconciliationChargeDisplay - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_invoice_entry_id = None
        self._consignment_reconciliation_charge_id = None
        self._carrier_invoice_id = None
        self._carrier_invoice_number = None
        self._date_time_reconciled_utc = None
        self._base_cost = None
        self._tax_cost = None
        self._fuel_cost = None
        self._total_cost = None
        self._before_tax_cost = None
        self._automatic = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_invoice_entry_id is not None:
            self.carrier_invoice_entry_id = carrier_invoice_entry_id
        if consignment_reconciliation_charge_id is not None:
            self.consignment_reconciliation_charge_id = consignment_reconciliation_charge_id
        if carrier_invoice_id is not None:
            self.carrier_invoice_id = carrier_invoice_id
        if carrier_invoice_number is not None:
            self.carrier_invoice_number = carrier_invoice_number
        if date_time_reconciled_utc is not None:
            self.date_time_reconciled_utc = date_time_reconciled_utc
        if base_cost is not None:
            self.base_cost = base_cost
        if tax_cost is not None:
            self.tax_cost = tax_cost
        if fuel_cost is not None:
            self.fuel_cost = fuel_cost
        if total_cost is not None:
            self.total_cost = total_cost
        if before_tax_cost is not None:
            self.before_tax_cost = before_tax_cost
        if automatic is not None:
            self.automatic = automatic

    @property
    def id(self):
        """Gets the id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param id: The id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_invoice_entry_id(self):
        """Gets the carrier_invoice_entry_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The carrier_invoice_entry_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: int
        """
        return self._carrier_invoice_entry_id

    @carrier_invoice_entry_id.setter
    def carrier_invoice_entry_id(self, carrier_invoice_entry_id):
        """Sets the carrier_invoice_entry_id of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param carrier_invoice_entry_id: The carrier_invoice_entry_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: int
        """

        self._carrier_invoice_entry_id = carrier_invoice_entry_id

    @property
    def consignment_reconciliation_charge_id(self):
        """Gets the consignment_reconciliation_charge_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The consignment_reconciliation_charge_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: int
        """
        return self._consignment_reconciliation_charge_id

    @consignment_reconciliation_charge_id.setter
    def consignment_reconciliation_charge_id(self, consignment_reconciliation_charge_id):
        """Sets the consignment_reconciliation_charge_id of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param consignment_reconciliation_charge_id: The consignment_reconciliation_charge_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: int
        """

        self._consignment_reconciliation_charge_id = consignment_reconciliation_charge_id

    @property
    def carrier_invoice_id(self):
        """Gets the carrier_invoice_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The carrier_invoice_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: int
        """
        return self._carrier_invoice_id

    @carrier_invoice_id.setter
    def carrier_invoice_id(self, carrier_invoice_id):
        """Sets the carrier_invoice_id of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param carrier_invoice_id: The carrier_invoice_id of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: int
        """

        self._carrier_invoice_id = carrier_invoice_id

    @property
    def carrier_invoice_number(self):
        """Gets the carrier_invoice_number of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The carrier_invoice_number of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: str
        """
        return self._carrier_invoice_number

    @carrier_invoice_number.setter
    def carrier_invoice_number(self, carrier_invoice_number):
        """Sets the carrier_invoice_number of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param carrier_invoice_number: The carrier_invoice_number of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: str
        """

        self._carrier_invoice_number = carrier_invoice_number

    @property
    def date_time_reconciled_utc(self):
        """Gets the date_time_reconciled_utc of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The date_time_reconciled_utc of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_reconciled_utc

    @date_time_reconciled_utc.setter
    def date_time_reconciled_utc(self, date_time_reconciled_utc):
        """Sets the date_time_reconciled_utc of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param date_time_reconciled_utc: The date_time_reconciled_utc of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: datetime
        """

        self._date_time_reconciled_utc = date_time_reconciled_utc

    @property
    def base_cost(self):
        """Gets the base_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The base_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: float
        """
        return self._base_cost

    @base_cost.setter
    def base_cost(self, base_cost):
        """Sets the base_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param base_cost: The base_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: float
        """

        self._base_cost = base_cost

    @property
    def tax_cost(self):
        """Gets the tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: float
        """
        return self._tax_cost

    @tax_cost.setter
    def tax_cost(self, tax_cost):
        """Sets the tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param tax_cost: The tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: float
        """

        self._tax_cost = tax_cost

    @property
    def fuel_cost(self):
        """Gets the fuel_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The fuel_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: float
        """
        return self._fuel_cost

    @fuel_cost.setter
    def fuel_cost(self, fuel_cost):
        """Sets the fuel_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param fuel_cost: The fuel_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: float
        """

        self._fuel_cost = fuel_cost

    @property
    def total_cost(self):
        """Gets the total_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The total_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param total_cost: The total_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def before_tax_cost(self):
        """Gets the before_tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The before_tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: float
        """
        return self._before_tax_cost

    @before_tax_cost.setter
    def before_tax_cost(self, before_tax_cost):
        """Sets the before_tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param before_tax_cost: The before_tax_cost of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: float
        """

        self._before_tax_cost = before_tax_cost

    @property
    def automatic(self):
        """Gets the automatic of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501


        :return: The automatic of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :rtype: bool
        """
        return self._automatic

    @automatic.setter
    def automatic(self, automatic):
        """Sets the automatic of this CarrierInvoiceEntryReconciliationChargeDisplay.


        :param automatic: The automatic of this CarrierInvoiceEntryReconciliationChargeDisplay.  # noqa: E501
        :type: bool
        """

        self._automatic = automatic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierInvoiceEntryReconciliationChargeDisplay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierInvoiceEntryReconciliationChargeDisplay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
