# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsignmentReconciliationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consignment_reconciliation_charges': 'list[ConsignmentReconciliationChargeDisplay]',
        'carrier_invoice_entries': 'list[CarrierInvoiceEntryInfo]',
        'cost_price_base': 'float',
        'cost_price_fuel': 'float',
        'cost_price_gst': 'float',
        'cost_price_total': 'float',
        'sell_price_base': 'float',
        'sell_price_fuel': 'float',
        'sell_price_gst': 'float',
        'sell_price_total': 'float',
        'closed': 'bool',
        'reconciled': 'CarrierInvoiceEntryStatus',
        'is_reconciled': 'bool',
        'reconciled_cost_price_base': 'float',
        'reconciled_cost_price_fuel': 'float',
        'reconciled_cost_price_gst': 'float',
        'reconciled_cost_price_total': 'float',
        'reconciled_sell_price_base': 'float',
        'reconciled_sell_price_fuel': 'float',
        'reconciled_sell_price_gst': 'float',
        'reconciled_sell_price_total': 'float',
        'reconciled_cost_difference': 'float',
        'reconciled_sell_difference': 'float'
    }

    attribute_map = {
        'consignment_reconciliation_charges': 'consignmentReconciliationCharges',
        'carrier_invoice_entries': 'carrierInvoiceEntries',
        'cost_price_base': 'costPriceBase',
        'cost_price_fuel': 'costPriceFuel',
        'cost_price_gst': 'costPriceGst',
        'cost_price_total': 'costPriceTotal',
        'sell_price_base': 'sellPriceBase',
        'sell_price_fuel': 'sellPriceFuel',
        'sell_price_gst': 'sellPriceGst',
        'sell_price_total': 'sellPriceTotal',
        'closed': 'closed',
        'reconciled': 'reconciled',
        'is_reconciled': 'isReconciled',
        'reconciled_cost_price_base': 'reconciledCostPriceBase',
        'reconciled_cost_price_fuel': 'reconciledCostPriceFuel',
        'reconciled_cost_price_gst': 'reconciledCostPriceGst',
        'reconciled_cost_price_total': 'reconciledCostPriceTotal',
        'reconciled_sell_price_base': 'reconciledSellPriceBase',
        'reconciled_sell_price_fuel': 'reconciledSellPriceFuel',
        'reconciled_sell_price_gst': 'reconciledSellPriceGst',
        'reconciled_sell_price_total': 'reconciledSellPriceTotal',
        'reconciled_cost_difference': 'reconciledCostDifference',
        'reconciled_sell_difference': 'reconciledSellDifference'
    }

    def __init__(self, consignment_reconciliation_charges=None, carrier_invoice_entries=None, cost_price_base=None, cost_price_fuel=None, cost_price_gst=None, cost_price_total=None, sell_price_base=None, sell_price_fuel=None, sell_price_gst=None, sell_price_total=None, closed=None, reconciled=None, is_reconciled=None, reconciled_cost_price_base=None, reconciled_cost_price_fuel=None, reconciled_cost_price_gst=None, reconciled_cost_price_total=None, reconciled_sell_price_base=None, reconciled_sell_price_fuel=None, reconciled_sell_price_gst=None, reconciled_sell_price_total=None, reconciled_cost_difference=None, reconciled_sell_difference=None):  # noqa: E501
        """ConsignmentReconciliationData - a model defined in Swagger"""  # noqa: E501
        self._consignment_reconciliation_charges = None
        self._carrier_invoice_entries = None
        self._cost_price_base = None
        self._cost_price_fuel = None
        self._cost_price_gst = None
        self._cost_price_total = None
        self._sell_price_base = None
        self._sell_price_fuel = None
        self._sell_price_gst = None
        self._sell_price_total = None
        self._closed = None
        self._reconciled = None
        self._is_reconciled = None
        self._reconciled_cost_price_base = None
        self._reconciled_cost_price_fuel = None
        self._reconciled_cost_price_gst = None
        self._reconciled_cost_price_total = None
        self._reconciled_sell_price_base = None
        self._reconciled_sell_price_fuel = None
        self._reconciled_sell_price_gst = None
        self._reconciled_sell_price_total = None
        self._reconciled_cost_difference = None
        self._reconciled_sell_difference = None
        self.discriminator = None
        if consignment_reconciliation_charges is not None:
            self.consignment_reconciliation_charges = consignment_reconciliation_charges
        if carrier_invoice_entries is not None:
            self.carrier_invoice_entries = carrier_invoice_entries
        if cost_price_base is not None:
            self.cost_price_base = cost_price_base
        if cost_price_fuel is not None:
            self.cost_price_fuel = cost_price_fuel
        if cost_price_gst is not None:
            self.cost_price_gst = cost_price_gst
        if cost_price_total is not None:
            self.cost_price_total = cost_price_total
        if sell_price_base is not None:
            self.sell_price_base = sell_price_base
        if sell_price_fuel is not None:
            self.sell_price_fuel = sell_price_fuel
        if sell_price_gst is not None:
            self.sell_price_gst = sell_price_gst
        if sell_price_total is not None:
            self.sell_price_total = sell_price_total
        if closed is not None:
            self.closed = closed
        if reconciled is not None:
            self.reconciled = reconciled
        if is_reconciled is not None:
            self.is_reconciled = is_reconciled
        if reconciled_cost_price_base is not None:
            self.reconciled_cost_price_base = reconciled_cost_price_base
        if reconciled_cost_price_fuel is not None:
            self.reconciled_cost_price_fuel = reconciled_cost_price_fuel
        if reconciled_cost_price_gst is not None:
            self.reconciled_cost_price_gst = reconciled_cost_price_gst
        if reconciled_cost_price_total is not None:
            self.reconciled_cost_price_total = reconciled_cost_price_total
        if reconciled_sell_price_base is not None:
            self.reconciled_sell_price_base = reconciled_sell_price_base
        if reconciled_sell_price_fuel is not None:
            self.reconciled_sell_price_fuel = reconciled_sell_price_fuel
        if reconciled_sell_price_gst is not None:
            self.reconciled_sell_price_gst = reconciled_sell_price_gst
        if reconciled_sell_price_total is not None:
            self.reconciled_sell_price_total = reconciled_sell_price_total
        if reconciled_cost_difference is not None:
            self.reconciled_cost_difference = reconciled_cost_difference
        if reconciled_sell_difference is not None:
            self.reconciled_sell_difference = reconciled_sell_difference

    @property
    def consignment_reconciliation_charges(self):
        """Gets the consignment_reconciliation_charges of this ConsignmentReconciliationData.  # noqa: E501


        :return: The consignment_reconciliation_charges of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: list[ConsignmentReconciliationChargeDisplay]
        """
        return self._consignment_reconciliation_charges

    @consignment_reconciliation_charges.setter
    def consignment_reconciliation_charges(self, consignment_reconciliation_charges):
        """Sets the consignment_reconciliation_charges of this ConsignmentReconciliationData.


        :param consignment_reconciliation_charges: The consignment_reconciliation_charges of this ConsignmentReconciliationData.  # noqa: E501
        :type: list[ConsignmentReconciliationChargeDisplay]
        """

        self._consignment_reconciliation_charges = consignment_reconciliation_charges

    @property
    def carrier_invoice_entries(self):
        """Gets the carrier_invoice_entries of this ConsignmentReconciliationData.  # noqa: E501


        :return: The carrier_invoice_entries of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: list[CarrierInvoiceEntryInfo]
        """
        return self._carrier_invoice_entries

    @carrier_invoice_entries.setter
    def carrier_invoice_entries(self, carrier_invoice_entries):
        """Sets the carrier_invoice_entries of this ConsignmentReconciliationData.


        :param carrier_invoice_entries: The carrier_invoice_entries of this ConsignmentReconciliationData.  # noqa: E501
        :type: list[CarrierInvoiceEntryInfo]
        """

        self._carrier_invoice_entries = carrier_invoice_entries

    @property
    def cost_price_base(self):
        """Gets the cost_price_base of this ConsignmentReconciliationData.  # noqa: E501


        :return: The cost_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_base

    @cost_price_base.setter
    def cost_price_base(self, cost_price_base):
        """Sets the cost_price_base of this ConsignmentReconciliationData.


        :param cost_price_base: The cost_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._cost_price_base = cost_price_base

    @property
    def cost_price_fuel(self):
        """Gets the cost_price_fuel of this ConsignmentReconciliationData.  # noqa: E501


        :return: The cost_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_fuel

    @cost_price_fuel.setter
    def cost_price_fuel(self, cost_price_fuel):
        """Sets the cost_price_fuel of this ConsignmentReconciliationData.


        :param cost_price_fuel: The cost_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._cost_price_fuel = cost_price_fuel

    @property
    def cost_price_gst(self):
        """Gets the cost_price_gst of this ConsignmentReconciliationData.  # noqa: E501


        :return: The cost_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_gst

    @cost_price_gst.setter
    def cost_price_gst(self, cost_price_gst):
        """Sets the cost_price_gst of this ConsignmentReconciliationData.


        :param cost_price_gst: The cost_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._cost_price_gst = cost_price_gst

    @property
    def cost_price_total(self):
        """Gets the cost_price_total of this ConsignmentReconciliationData.  # noqa: E501


        :return: The cost_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._cost_price_total

    @cost_price_total.setter
    def cost_price_total(self, cost_price_total):
        """Sets the cost_price_total of this ConsignmentReconciliationData.


        :param cost_price_total: The cost_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._cost_price_total = cost_price_total

    @property
    def sell_price_base(self):
        """Gets the sell_price_base of this ConsignmentReconciliationData.  # noqa: E501


        :return: The sell_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_base

    @sell_price_base.setter
    def sell_price_base(self, sell_price_base):
        """Sets the sell_price_base of this ConsignmentReconciliationData.


        :param sell_price_base: The sell_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._sell_price_base = sell_price_base

    @property
    def sell_price_fuel(self):
        """Gets the sell_price_fuel of this ConsignmentReconciliationData.  # noqa: E501


        :return: The sell_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_fuel

    @sell_price_fuel.setter
    def sell_price_fuel(self, sell_price_fuel):
        """Sets the sell_price_fuel of this ConsignmentReconciliationData.


        :param sell_price_fuel: The sell_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._sell_price_fuel = sell_price_fuel

    @property
    def sell_price_gst(self):
        """Gets the sell_price_gst of this ConsignmentReconciliationData.  # noqa: E501


        :return: The sell_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_gst

    @sell_price_gst.setter
    def sell_price_gst(self, sell_price_gst):
        """Sets the sell_price_gst of this ConsignmentReconciliationData.


        :param sell_price_gst: The sell_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._sell_price_gst = sell_price_gst

    @property
    def sell_price_total(self):
        """Gets the sell_price_total of this ConsignmentReconciliationData.  # noqa: E501


        :return: The sell_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._sell_price_total

    @sell_price_total.setter
    def sell_price_total(self, sell_price_total):
        """Sets the sell_price_total of this ConsignmentReconciliationData.


        :param sell_price_total: The sell_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._sell_price_total = sell_price_total

    @property
    def closed(self):
        """Gets the closed of this ConsignmentReconciliationData.  # noqa: E501


        :return: The closed of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this ConsignmentReconciliationData.


        :param closed: The closed of this ConsignmentReconciliationData.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def reconciled(self):
        """Gets the reconciled of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: CarrierInvoiceEntryStatus
        """
        return self._reconciled

    @reconciled.setter
    def reconciled(self, reconciled):
        """Sets the reconciled of this ConsignmentReconciliationData.


        :param reconciled: The reconciled of this ConsignmentReconciliationData.  # noqa: E501
        :type: CarrierInvoiceEntryStatus
        """

        self._reconciled = reconciled

    @property
    def is_reconciled(self):
        """Gets the is_reconciled of this ConsignmentReconciliationData.  # noqa: E501


        :return: The is_reconciled of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: bool
        """
        return self._is_reconciled

    @is_reconciled.setter
    def is_reconciled(self, is_reconciled):
        """Sets the is_reconciled of this ConsignmentReconciliationData.


        :param is_reconciled: The is_reconciled of this ConsignmentReconciliationData.  # noqa: E501
        :type: bool
        """

        self._is_reconciled = is_reconciled

    @property
    def reconciled_cost_price_base(self):
        """Gets the reconciled_cost_price_base of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_cost_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_cost_price_base

    @reconciled_cost_price_base.setter
    def reconciled_cost_price_base(self, reconciled_cost_price_base):
        """Sets the reconciled_cost_price_base of this ConsignmentReconciliationData.


        :param reconciled_cost_price_base: The reconciled_cost_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_cost_price_base = reconciled_cost_price_base

    @property
    def reconciled_cost_price_fuel(self):
        """Gets the reconciled_cost_price_fuel of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_cost_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_cost_price_fuel

    @reconciled_cost_price_fuel.setter
    def reconciled_cost_price_fuel(self, reconciled_cost_price_fuel):
        """Sets the reconciled_cost_price_fuel of this ConsignmentReconciliationData.


        :param reconciled_cost_price_fuel: The reconciled_cost_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_cost_price_fuel = reconciled_cost_price_fuel

    @property
    def reconciled_cost_price_gst(self):
        """Gets the reconciled_cost_price_gst of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_cost_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_cost_price_gst

    @reconciled_cost_price_gst.setter
    def reconciled_cost_price_gst(self, reconciled_cost_price_gst):
        """Sets the reconciled_cost_price_gst of this ConsignmentReconciliationData.


        :param reconciled_cost_price_gst: The reconciled_cost_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_cost_price_gst = reconciled_cost_price_gst

    @property
    def reconciled_cost_price_total(self):
        """Gets the reconciled_cost_price_total of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_cost_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_cost_price_total

    @reconciled_cost_price_total.setter
    def reconciled_cost_price_total(self, reconciled_cost_price_total):
        """Sets the reconciled_cost_price_total of this ConsignmentReconciliationData.


        :param reconciled_cost_price_total: The reconciled_cost_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_cost_price_total = reconciled_cost_price_total

    @property
    def reconciled_sell_price_base(self):
        """Gets the reconciled_sell_price_base of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_sell_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_sell_price_base

    @reconciled_sell_price_base.setter
    def reconciled_sell_price_base(self, reconciled_sell_price_base):
        """Sets the reconciled_sell_price_base of this ConsignmentReconciliationData.


        :param reconciled_sell_price_base: The reconciled_sell_price_base of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_sell_price_base = reconciled_sell_price_base

    @property
    def reconciled_sell_price_fuel(self):
        """Gets the reconciled_sell_price_fuel of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_sell_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_sell_price_fuel

    @reconciled_sell_price_fuel.setter
    def reconciled_sell_price_fuel(self, reconciled_sell_price_fuel):
        """Sets the reconciled_sell_price_fuel of this ConsignmentReconciliationData.


        :param reconciled_sell_price_fuel: The reconciled_sell_price_fuel of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_sell_price_fuel = reconciled_sell_price_fuel

    @property
    def reconciled_sell_price_gst(self):
        """Gets the reconciled_sell_price_gst of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_sell_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_sell_price_gst

    @reconciled_sell_price_gst.setter
    def reconciled_sell_price_gst(self, reconciled_sell_price_gst):
        """Sets the reconciled_sell_price_gst of this ConsignmentReconciliationData.


        :param reconciled_sell_price_gst: The reconciled_sell_price_gst of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_sell_price_gst = reconciled_sell_price_gst

    @property
    def reconciled_sell_price_total(self):
        """Gets the reconciled_sell_price_total of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_sell_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_sell_price_total

    @reconciled_sell_price_total.setter
    def reconciled_sell_price_total(self, reconciled_sell_price_total):
        """Sets the reconciled_sell_price_total of this ConsignmentReconciliationData.


        :param reconciled_sell_price_total: The reconciled_sell_price_total of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_sell_price_total = reconciled_sell_price_total

    @property
    def reconciled_cost_difference(self):
        """Gets the reconciled_cost_difference of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_cost_difference of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_cost_difference

    @reconciled_cost_difference.setter
    def reconciled_cost_difference(self, reconciled_cost_difference):
        """Sets the reconciled_cost_difference of this ConsignmentReconciliationData.


        :param reconciled_cost_difference: The reconciled_cost_difference of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_cost_difference = reconciled_cost_difference

    @property
    def reconciled_sell_difference(self):
        """Gets the reconciled_sell_difference of this ConsignmentReconciliationData.  # noqa: E501


        :return: The reconciled_sell_difference of this ConsignmentReconciliationData.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_sell_difference

    @reconciled_sell_difference.setter
    def reconciled_sell_difference(self, reconciled_sell_difference):
        """Sets the reconciled_sell_difference of this ConsignmentReconciliationData.


        :param reconciled_sell_difference: The reconciled_sell_difference of this ConsignmentReconciliationData.  # noqa: E501
        :type: float
        """

        self._reconciled_sell_difference = reconciled_sell_difference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsignmentReconciliationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsignmentReconciliationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
