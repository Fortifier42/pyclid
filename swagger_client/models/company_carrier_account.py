# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyCarrierAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company_id': 'int',
        'company': 'Company',
        'carrier_id': 'int',
        'carrier_account': 'CarrierAccount',
        'carrier_account_id': 'int',
        'markup': 'float',
        'total_markup_type': 'SellRateType',
        'minimum_markup': 'float',
        'minimum_markup_type': 'SellRateType',
        'basic_markup': 'float',
        'basic_markup_type': 'SellRateType',
        'break_markup': 'float',
        'break_markup_type': 'SellRateType',
        'name': 'str',
        'abbreviation': 'str',
        'total_rows': 'int',
        'carrier_service_overrides': 'list[CompanyCarrierAccountServiceOverride]',
        'sell_lane_rates': 'list[CompanyCarrierAccountSellLaneRateWithBreakSets]',
        'cubic_conversion_rate': 'float',
        'fuel_surcharge_id': 'int',
        'enable_receiver_pays': 'bool',
        'disabled': 'bool',
        'valid_services': 'bool',
        'company_carrier_account_services': 'list[CompanyCarrierAccountService]',
        'dg_enabled': 'bool',
        'limit_to_ratecard_sell_rates': 'bool',
        'is_inheritable': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'company': 'company',
        'carrier_id': 'carrierId',
        'carrier_account': 'carrierAccount',
        'carrier_account_id': 'carrierAccountId',
        'markup': 'markup',
        'total_markup_type': 'totalMarkupType',
        'minimum_markup': 'minimumMarkup',
        'minimum_markup_type': 'minimumMarkupType',
        'basic_markup': 'basicMarkup',
        'basic_markup_type': 'basicMarkupType',
        'break_markup': 'breakMarkup',
        'break_markup_type': 'breakMarkupType',
        'name': 'name',
        'abbreviation': 'abbreviation',
        'total_rows': 'totalRows',
        'carrier_service_overrides': 'carrierServiceOverrides',
        'sell_lane_rates': 'sellLaneRates',
        'cubic_conversion_rate': 'cubicConversionRate',
        'fuel_surcharge_id': 'fuelSurchargeId',
        'enable_receiver_pays': 'enableReceiverPays',
        'disabled': 'disabled',
        'valid_services': 'validServices',
        'company_carrier_account_services': 'companyCarrierAccountServices',
        'dg_enabled': 'dgEnabled',
        'limit_to_ratecard_sell_rates': 'limitToRatecardSellRates',
        'is_inheritable': 'isInheritable'
    }

    def __init__(self, id=None, company_id=None, company=None, carrier_id=None, carrier_account=None, carrier_account_id=None, markup=None, total_markup_type=None, minimum_markup=None, minimum_markup_type=None, basic_markup=None, basic_markup_type=None, break_markup=None, break_markup_type=None, name=None, abbreviation=None, total_rows=None, carrier_service_overrides=None, sell_lane_rates=None, cubic_conversion_rate=None, fuel_surcharge_id=None, enable_receiver_pays=None, disabled=None, valid_services=None, company_carrier_account_services=None, dg_enabled=None, limit_to_ratecard_sell_rates=None, is_inheritable=None):  # noqa: E501
        """CompanyCarrierAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._company_id = None
        self._company = None
        self._carrier_id = None
        self._carrier_account = None
        self._carrier_account_id = None
        self._markup = None
        self._total_markup_type = None
        self._minimum_markup = None
        self._minimum_markup_type = None
        self._basic_markup = None
        self._basic_markup_type = None
        self._break_markup = None
        self._break_markup_type = None
        self._name = None
        self._abbreviation = None
        self._total_rows = None
        self._carrier_service_overrides = None
        self._sell_lane_rates = None
        self._cubic_conversion_rate = None
        self._fuel_surcharge_id = None
        self._enable_receiver_pays = None
        self._disabled = None
        self._valid_services = None
        self._company_carrier_account_services = None
        self._dg_enabled = None
        self._limit_to_ratecard_sell_rates = None
        self._is_inheritable = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if company is not None:
            self.company = company
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier_account is not None:
            self.carrier_account = carrier_account
        if carrier_account_id is not None:
            self.carrier_account_id = carrier_account_id
        if markup is not None:
            self.markup = markup
        if total_markup_type is not None:
            self.total_markup_type = total_markup_type
        if minimum_markup is not None:
            self.minimum_markup = minimum_markup
        if minimum_markup_type is not None:
            self.minimum_markup_type = minimum_markup_type
        if basic_markup is not None:
            self.basic_markup = basic_markup
        if basic_markup_type is not None:
            self.basic_markup_type = basic_markup_type
        if break_markup is not None:
            self.break_markup = break_markup
        if break_markup_type is not None:
            self.break_markup_type = break_markup_type
        self.name = name
        self.abbreviation = abbreviation
        if total_rows is not None:
            self.total_rows = total_rows
        if carrier_service_overrides is not None:
            self.carrier_service_overrides = carrier_service_overrides
        if sell_lane_rates is not None:
            self.sell_lane_rates = sell_lane_rates
        if cubic_conversion_rate is not None:
            self.cubic_conversion_rate = cubic_conversion_rate
        if fuel_surcharge_id is not None:
            self.fuel_surcharge_id = fuel_surcharge_id
        if enable_receiver_pays is not None:
            self.enable_receiver_pays = enable_receiver_pays
        if disabled is not None:
            self.disabled = disabled
        if valid_services is not None:
            self.valid_services = valid_services
        if company_carrier_account_services is not None:
            self.company_carrier_account_services = company_carrier_account_services
        if dg_enabled is not None:
            self.dg_enabled = dg_enabled
        if limit_to_ratecard_sell_rates is not None:
            self.limit_to_ratecard_sell_rates = limit_to_ratecard_sell_rates
        if is_inheritable is not None:
            self.is_inheritable = is_inheritable

    @property
    def id(self):
        """Gets the id of this CompanyCarrierAccount.  # noqa: E501


        :return: The id of this CompanyCarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyCarrierAccount.


        :param id: The id of this CompanyCarrierAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this CompanyCarrierAccount.  # noqa: E501


        :return: The company_id of this CompanyCarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyCarrierAccount.


        :param company_id: The company_id of this CompanyCarrierAccount.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def company(self):
        """Gets the company of this CompanyCarrierAccount.  # noqa: E501


        :return: The company of this CompanyCarrierAccount.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CompanyCarrierAccount.


        :param company: The company of this CompanyCarrierAccount.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CompanyCarrierAccount.  # noqa: E501


        :return: The carrier_id of this CompanyCarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CompanyCarrierAccount.


        :param carrier_id: The carrier_id of this CompanyCarrierAccount.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier_account(self):
        """Gets the carrier_account of this CompanyCarrierAccount.  # noqa: E501


        :return: The carrier_account of this CompanyCarrierAccount.  # noqa: E501
        :rtype: CarrierAccount
        """
        return self._carrier_account

    @carrier_account.setter
    def carrier_account(self, carrier_account):
        """Sets the carrier_account of this CompanyCarrierAccount.


        :param carrier_account: The carrier_account of this CompanyCarrierAccount.  # noqa: E501
        :type: CarrierAccount
        """

        self._carrier_account = carrier_account

    @property
    def carrier_account_id(self):
        """Gets the carrier_account_id of this CompanyCarrierAccount.  # noqa: E501


        :return: The carrier_account_id of this CompanyCarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._carrier_account_id

    @carrier_account_id.setter
    def carrier_account_id(self, carrier_account_id):
        """Sets the carrier_account_id of this CompanyCarrierAccount.


        :param carrier_account_id: The carrier_account_id of this CompanyCarrierAccount.  # noqa: E501
        :type: int
        """

        self._carrier_account_id = carrier_account_id

    @property
    def markup(self):
        """Gets the markup of this CompanyCarrierAccount.  # noqa: E501


        :return: The markup of this CompanyCarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this CompanyCarrierAccount.


        :param markup: The markup of this CompanyCarrierAccount.  # noqa: E501
        :type: float
        """

        self._markup = markup

    @property
    def total_markup_type(self):
        """Gets the total_markup_type of this CompanyCarrierAccount.  # noqa: E501


        :return: The total_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :rtype: SellRateType
        """
        return self._total_markup_type

    @total_markup_type.setter
    def total_markup_type(self, total_markup_type):
        """Sets the total_markup_type of this CompanyCarrierAccount.


        :param total_markup_type: The total_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :type: SellRateType
        """

        self._total_markup_type = total_markup_type

    @property
    def minimum_markup(self):
        """Gets the minimum_markup of this CompanyCarrierAccount.  # noqa: E501


        :return: The minimum_markup of this CompanyCarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._minimum_markup

    @minimum_markup.setter
    def minimum_markup(self, minimum_markup):
        """Sets the minimum_markup of this CompanyCarrierAccount.


        :param minimum_markup: The minimum_markup of this CompanyCarrierAccount.  # noqa: E501
        :type: float
        """

        self._minimum_markup = minimum_markup

    @property
    def minimum_markup_type(self):
        """Gets the minimum_markup_type of this CompanyCarrierAccount.  # noqa: E501


        :return: The minimum_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :rtype: SellRateType
        """
        return self._minimum_markup_type

    @minimum_markup_type.setter
    def minimum_markup_type(self, minimum_markup_type):
        """Sets the minimum_markup_type of this CompanyCarrierAccount.


        :param minimum_markup_type: The minimum_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :type: SellRateType
        """

        self._minimum_markup_type = minimum_markup_type

    @property
    def basic_markup(self):
        """Gets the basic_markup of this CompanyCarrierAccount.  # noqa: E501


        :return: The basic_markup of this CompanyCarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._basic_markup

    @basic_markup.setter
    def basic_markup(self, basic_markup):
        """Sets the basic_markup of this CompanyCarrierAccount.


        :param basic_markup: The basic_markup of this CompanyCarrierAccount.  # noqa: E501
        :type: float
        """

        self._basic_markup = basic_markup

    @property
    def basic_markup_type(self):
        """Gets the basic_markup_type of this CompanyCarrierAccount.  # noqa: E501


        :return: The basic_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :rtype: SellRateType
        """
        return self._basic_markup_type

    @basic_markup_type.setter
    def basic_markup_type(self, basic_markup_type):
        """Sets the basic_markup_type of this CompanyCarrierAccount.


        :param basic_markup_type: The basic_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :type: SellRateType
        """

        self._basic_markup_type = basic_markup_type

    @property
    def break_markup(self):
        """Gets the break_markup of this CompanyCarrierAccount.  # noqa: E501


        :return: The break_markup of this CompanyCarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._break_markup

    @break_markup.setter
    def break_markup(self, break_markup):
        """Sets the break_markup of this CompanyCarrierAccount.


        :param break_markup: The break_markup of this CompanyCarrierAccount.  # noqa: E501
        :type: float
        """

        self._break_markup = break_markup

    @property
    def break_markup_type(self):
        """Gets the break_markup_type of this CompanyCarrierAccount.  # noqa: E501


        :return: The break_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :rtype: SellRateType
        """
        return self._break_markup_type

    @break_markup_type.setter
    def break_markup_type(self, break_markup_type):
        """Sets the break_markup_type of this CompanyCarrierAccount.


        :param break_markup_type: The break_markup_type of this CompanyCarrierAccount.  # noqa: E501
        :type: SellRateType
        """

        self._break_markup_type = break_markup_type

    @property
    def name(self):
        """Gets the name of this CompanyCarrierAccount.  # noqa: E501


        :return: The name of this CompanyCarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyCarrierAccount.


        :param name: The name of this CompanyCarrierAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CompanyCarrierAccount.  # noqa: E501


        :return: The abbreviation of this CompanyCarrierAccount.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CompanyCarrierAccount.


        :param abbreviation: The abbreviation of this CompanyCarrierAccount.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def total_rows(self):
        """Gets the total_rows of this CompanyCarrierAccount.  # noqa: E501


        :return: The total_rows of this CompanyCarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this CompanyCarrierAccount.


        :param total_rows: The total_rows of this CompanyCarrierAccount.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def carrier_service_overrides(self):
        """Gets the carrier_service_overrides of this CompanyCarrierAccount.  # noqa: E501


        :return: The carrier_service_overrides of this CompanyCarrierAccount.  # noqa: E501
        :rtype: list[CompanyCarrierAccountServiceOverride]
        """
        return self._carrier_service_overrides

    @carrier_service_overrides.setter
    def carrier_service_overrides(self, carrier_service_overrides):
        """Sets the carrier_service_overrides of this CompanyCarrierAccount.


        :param carrier_service_overrides: The carrier_service_overrides of this CompanyCarrierAccount.  # noqa: E501
        :type: list[CompanyCarrierAccountServiceOverride]
        """

        self._carrier_service_overrides = carrier_service_overrides

    @property
    def sell_lane_rates(self):
        """Gets the sell_lane_rates of this CompanyCarrierAccount.  # noqa: E501


        :return: The sell_lane_rates of this CompanyCarrierAccount.  # noqa: E501
        :rtype: list[CompanyCarrierAccountSellLaneRateWithBreakSets]
        """
        return self._sell_lane_rates

    @sell_lane_rates.setter
    def sell_lane_rates(self, sell_lane_rates):
        """Sets the sell_lane_rates of this CompanyCarrierAccount.


        :param sell_lane_rates: The sell_lane_rates of this CompanyCarrierAccount.  # noqa: E501
        :type: list[CompanyCarrierAccountSellLaneRateWithBreakSets]
        """

        self._sell_lane_rates = sell_lane_rates

    @property
    def cubic_conversion_rate(self):
        """Gets the cubic_conversion_rate of this CompanyCarrierAccount.  # noqa: E501


        :return: The cubic_conversion_rate of this CompanyCarrierAccount.  # noqa: E501
        :rtype: float
        """
        return self._cubic_conversion_rate

    @cubic_conversion_rate.setter
    def cubic_conversion_rate(self, cubic_conversion_rate):
        """Sets the cubic_conversion_rate of this CompanyCarrierAccount.


        :param cubic_conversion_rate: The cubic_conversion_rate of this CompanyCarrierAccount.  # noqa: E501
        :type: float
        """

        self._cubic_conversion_rate = cubic_conversion_rate

    @property
    def fuel_surcharge_id(self):
        """Gets the fuel_surcharge_id of this CompanyCarrierAccount.  # noqa: E501


        :return: The fuel_surcharge_id of this CompanyCarrierAccount.  # noqa: E501
        :rtype: int
        """
        return self._fuel_surcharge_id

    @fuel_surcharge_id.setter
    def fuel_surcharge_id(self, fuel_surcharge_id):
        """Sets the fuel_surcharge_id of this CompanyCarrierAccount.


        :param fuel_surcharge_id: The fuel_surcharge_id of this CompanyCarrierAccount.  # noqa: E501
        :type: int
        """

        self._fuel_surcharge_id = fuel_surcharge_id

    @property
    def enable_receiver_pays(self):
        """Gets the enable_receiver_pays of this CompanyCarrierAccount.  # noqa: E501


        :return: The enable_receiver_pays of this CompanyCarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._enable_receiver_pays

    @enable_receiver_pays.setter
    def enable_receiver_pays(self, enable_receiver_pays):
        """Sets the enable_receiver_pays of this CompanyCarrierAccount.


        :param enable_receiver_pays: The enable_receiver_pays of this CompanyCarrierAccount.  # noqa: E501
        :type: bool
        """

        self._enable_receiver_pays = enable_receiver_pays

    @property
    def disabled(self):
        """Gets the disabled of this CompanyCarrierAccount.  # noqa: E501


        :return: The disabled of this CompanyCarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CompanyCarrierAccount.


        :param disabled: The disabled of this CompanyCarrierAccount.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def valid_services(self):
        """Gets the valid_services of this CompanyCarrierAccount.  # noqa: E501


        :return: The valid_services of this CompanyCarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._valid_services

    @valid_services.setter
    def valid_services(self, valid_services):
        """Sets the valid_services of this CompanyCarrierAccount.


        :param valid_services: The valid_services of this CompanyCarrierAccount.  # noqa: E501
        :type: bool
        """

        self._valid_services = valid_services

    @property
    def company_carrier_account_services(self):
        """Gets the company_carrier_account_services of this CompanyCarrierAccount.  # noqa: E501


        :return: The company_carrier_account_services of this CompanyCarrierAccount.  # noqa: E501
        :rtype: list[CompanyCarrierAccountService]
        """
        return self._company_carrier_account_services

    @company_carrier_account_services.setter
    def company_carrier_account_services(self, company_carrier_account_services):
        """Sets the company_carrier_account_services of this CompanyCarrierAccount.


        :param company_carrier_account_services: The company_carrier_account_services of this CompanyCarrierAccount.  # noqa: E501
        :type: list[CompanyCarrierAccountService]
        """

        self._company_carrier_account_services = company_carrier_account_services

    @property
    def dg_enabled(self):
        """Gets the dg_enabled of this CompanyCarrierAccount.  # noqa: E501


        :return: The dg_enabled of this CompanyCarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._dg_enabled

    @dg_enabled.setter
    def dg_enabled(self, dg_enabled):
        """Sets the dg_enabled of this CompanyCarrierAccount.


        :param dg_enabled: The dg_enabled of this CompanyCarrierAccount.  # noqa: E501
        :type: bool
        """

        self._dg_enabled = dg_enabled

    @property
    def limit_to_ratecard_sell_rates(self):
        """Gets the limit_to_ratecard_sell_rates of this CompanyCarrierAccount.  # noqa: E501

        When set to true, prices will only price when there is a sell rate for that lane (and the breaks cover the consignment's items)  # noqa: E501

        :return: The limit_to_ratecard_sell_rates of this CompanyCarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._limit_to_ratecard_sell_rates

    @limit_to_ratecard_sell_rates.setter
    def limit_to_ratecard_sell_rates(self, limit_to_ratecard_sell_rates):
        """Sets the limit_to_ratecard_sell_rates of this CompanyCarrierAccount.

        When set to true, prices will only price when there is a sell rate for that lane (and the breaks cover the consignment's items)  # noqa: E501

        :param limit_to_ratecard_sell_rates: The limit_to_ratecard_sell_rates of this CompanyCarrierAccount.  # noqa: E501
        :type: bool
        """

        self._limit_to_ratecard_sell_rates = limit_to_ratecard_sell_rates

    @property
    def is_inheritable(self):
        """Gets the is_inheritable of this CompanyCarrierAccount.  # noqa: E501


        :return: The is_inheritable of this CompanyCarrierAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_inheritable

    @is_inheritable.setter
    def is_inheritable(self, is_inheritable):
        """Sets the is_inheritable of this CompanyCarrierAccount.


        :param is_inheritable: The is_inheritable of this CompanyCarrierAccount.  # noqa: E501
        :type: bool
        """

        self._is_inheritable = is_inheritable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyCarrierAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyCarrierAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
