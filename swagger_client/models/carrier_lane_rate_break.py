# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarrierLaneRateBreak(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'carrier_lane_rate_id': 'int',
        'carrier_item_type_id': 'int',
        'carrier_item_type': 'CarrierItemType',
        'calculation_type': 'CalculationType',
        'break_from': 'int',
        'break_to': 'int',
        'price': 'float'
    }

    attribute_map = {
        'id': 'id',
        'carrier_lane_rate_id': 'carrierLaneRateId',
        'carrier_item_type_id': 'carrierItemTypeId',
        'carrier_item_type': 'carrierItemType',
        'calculation_type': 'calculationType',
        'break_from': 'breakFrom',
        'break_to': 'breakTo',
        'price': 'price'
    }

    def __init__(self, id=None, carrier_lane_rate_id=None, carrier_item_type_id=None, carrier_item_type=None, calculation_type=None, break_from=None, break_to=None, price=None):  # noqa: E501
        """CarrierLaneRateBreak - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_lane_rate_id = None
        self._carrier_item_type_id = None
        self._carrier_item_type = None
        self._calculation_type = None
        self._break_from = None
        self._break_to = None
        self._price = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if carrier_lane_rate_id is not None:
            self.carrier_lane_rate_id = carrier_lane_rate_id
        if carrier_item_type_id is not None:
            self.carrier_item_type_id = carrier_item_type_id
        if carrier_item_type is not None:
            self.carrier_item_type = carrier_item_type
        if calculation_type is not None:
            self.calculation_type = calculation_type
        if break_from is not None:
            self.break_from = break_from
        if break_to is not None:
            self.break_to = break_to
        if price is not None:
            self.price = price

    @property
    def id(self):
        """Gets the id of this CarrierLaneRateBreak.  # noqa: E501


        :return: The id of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarrierLaneRateBreak.


        :param id: The id of this CarrierLaneRateBreak.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def carrier_lane_rate_id(self):
        """Gets the carrier_lane_rate_id of this CarrierLaneRateBreak.  # noqa: E501


        :return: The carrier_lane_rate_id of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: int
        """
        return self._carrier_lane_rate_id

    @carrier_lane_rate_id.setter
    def carrier_lane_rate_id(self, carrier_lane_rate_id):
        """Sets the carrier_lane_rate_id of this CarrierLaneRateBreak.


        :param carrier_lane_rate_id: The carrier_lane_rate_id of this CarrierLaneRateBreak.  # noqa: E501
        :type: int
        """

        self._carrier_lane_rate_id = carrier_lane_rate_id

    @property
    def carrier_item_type_id(self):
        """Gets the carrier_item_type_id of this CarrierLaneRateBreak.  # noqa: E501

        if a carrier item type is not provided then this is the default breaks  # noqa: E501

        :return: The carrier_item_type_id of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: int
        """
        return self._carrier_item_type_id

    @carrier_item_type_id.setter
    def carrier_item_type_id(self, carrier_item_type_id):
        """Sets the carrier_item_type_id of this CarrierLaneRateBreak.

        if a carrier item type is not provided then this is the default breaks  # noqa: E501

        :param carrier_item_type_id: The carrier_item_type_id of this CarrierLaneRateBreak.  # noqa: E501
        :type: int
        """

        self._carrier_item_type_id = carrier_item_type_id

    @property
    def carrier_item_type(self):
        """Gets the carrier_item_type of this CarrierLaneRateBreak.  # noqa: E501


        :return: The carrier_item_type of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: CarrierItemType
        """
        return self._carrier_item_type

    @carrier_item_type.setter
    def carrier_item_type(self, carrier_item_type):
        """Sets the carrier_item_type of this CarrierLaneRateBreak.


        :param carrier_item_type: The carrier_item_type of this CarrierLaneRateBreak.  # noqa: E501
        :type: CarrierItemType
        """

        self._carrier_item_type = carrier_item_type

    @property
    def calculation_type(self):
        """Gets the calculation_type of this CarrierLaneRateBreak.  # noqa: E501


        :return: The calculation_type of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: CalculationType
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this CarrierLaneRateBreak.


        :param calculation_type: The calculation_type of this CarrierLaneRateBreak.  # noqa: E501
        :type: CalculationType
        """

        self._calculation_type = calculation_type

    @property
    def break_from(self):
        """Gets the break_from of this CarrierLaneRateBreak.  # noqa: E501


        :return: The break_from of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: int
        """
        return self._break_from

    @break_from.setter
    def break_from(self, break_from):
        """Sets the break_from of this CarrierLaneRateBreak.


        :param break_from: The break_from of this CarrierLaneRateBreak.  # noqa: E501
        :type: int
        """

        self._break_from = break_from

    @property
    def break_to(self):
        """Gets the break_to of this CarrierLaneRateBreak.  # noqa: E501

        the maximum for this current break. If this is null, it is infinite  # noqa: E501

        :return: The break_to of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: int
        """
        return self._break_to

    @break_to.setter
    def break_to(self, break_to):
        """Sets the break_to of this CarrierLaneRateBreak.

        the maximum for this current break. If this is null, it is infinite  # noqa: E501

        :param break_to: The break_to of this CarrierLaneRateBreak.  # noqa: E501
        :type: int
        """

        self._break_to = break_to

    @property
    def price(self):
        """Gets the price of this CarrierLaneRateBreak.  # noqa: E501


        :return: The price of this CarrierLaneRateBreak.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CarrierLaneRateBreak.


        :param price: The price of this CarrierLaneRateBreak.  # noqa: E501
        :type: float
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierLaneRateBreak, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierLaneRateBreak):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
