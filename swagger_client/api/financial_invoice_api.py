# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FinancialInvoiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apiv2_financial_invoice_get_all_posted_get(self, **kwargs):  # noqa: E501
        """Return the basic information about invoices that are in a posted state. It will return at most 100 records,  in the order of most recently imported to oldest.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_financial_invoice_get_all_posted_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Optional parameter - when supplied it will filter the results to invoices which have an invoice date which is greater or equal to the supplied date
        :param datetime end_date: Optional parameter - when supplied it will filter the results to invoices which have an invoice date which is earlier or equal to the supplied date
        :param int start_index:
        :param int retrieve_size:
        :return: InvoiceV2LiteICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_financial_invoice_get_all_posted_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_financial_invoice_get_all_posted_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_financial_invoice_get_all_posted_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return the basic information about invoices that are in a posted state. It will return at most 100 records,  in the order of most recently imported to oldest.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_financial_invoice_get_all_posted_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: Optional parameter - when supplied it will filter the results to invoices which have an invoice date which is greater or equal to the supplied date
        :param datetime end_date: Optional parameter - when supplied it will filter the results to invoices which have an invoice date which is earlier or equal to the supplied date
        :param int start_index:
        :param int retrieve_size:
        :return: InvoiceV2LiteICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'start_index', 'retrieve_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_financial_invoice_get_all_posted_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/financialInvoice/getAllPosted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoiceV2LiteICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_financial_invoice_get_posted_invoice_by_document_number_get(self, **kwargs):  # noqa: E501
        """Returns invoice details with the invoice pdf as a byte array  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_financial_invoice_get_posted_invoice_by_document_number_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str document_number: Machship Invoice Document Number
        :param bool return_pdf_file_bytes: Optional parameter - When supplied and true, the invoice pdf as a byte array will be returned as the Pdf property
        :return: InvoiceV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_financial_invoice_get_posted_invoice_by_document_number_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_financial_invoice_get_posted_invoice_by_document_number_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_financial_invoice_get_posted_invoice_by_document_number_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns invoice details with the invoice pdf as a byte array  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_financial_invoice_get_posted_invoice_by_document_number_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str document_number: Machship Invoice Document Number
        :param bool return_pdf_file_bytes: Optional parameter - When supplied and true, the invoice pdf as a byte array will be returned as the Pdf property
        :return: InvoiceV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_number', 'return_pdf_file_bytes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_financial_invoice_get_posted_invoice_by_document_number_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'document_number' in params:
            query_params.append(('documentNumber', params['document_number']))  # noqa: E501
        if 'return_pdf_file_bytes' in params:
            query_params.append(('returnPdfFileBytes', params['return_pdf_file_bytes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/financialInvoice/getPostedInvoiceByDocumentNumber', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoiceV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
