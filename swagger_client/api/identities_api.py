# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IdentitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apiv2_identities_create_identities_post(self, **kwargs):  # noqa: E501
        """Create Identities in MachShip and assign companies and roles to identities to give them access to the system. Note that all identities provided must belong to the same identityProvider and organisation    You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_create_identities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateIdentityV2] body: The identities to create
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_create_identities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_create_identities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_create_identities_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Identities in MachShip and assign companies and roles to identities to give them access to the system. Note that all identities provided must belong to the same identityProvider and organisation    You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_create_identities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateIdentityV2] body: The identities to create
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_create_identities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/createIdentities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_identities_disable_identities_post(self, **kwargs):  # noqa: E501
        """apiv2_identities_disable_identities_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_disable_identities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_disable_identities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_disable_identities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_disable_identities_post_with_http_info(self, **kwargs):  # noqa: E501
        """apiv2_identities_disable_identities_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_disable_identities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_disable_identities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/disableIdentities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_identities_get_identities_get(self, **kwargs):  # noqa: E501
        """Get all identities owned by an organisation, along with details on which company they are  linked to. You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_get_identities_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_id: Optional. The ID in MachShip of the organisation.  Only relevant if you are an administrator of more than one organisation in MachShip. If omitted, your current organisation will be returned
        :param bool only_unlinked_identities: Optional - whether or not to filter the results to identities that have not been linked to  any companies in the system
        :param int identity_provider_id: Optional - whether or not to filter by identities who are authenticated by a certain identity. If not provided, all identities will be returned  provider
        :return: IdentityV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_get_identities_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_get_identities_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_get_identities_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all identities owned by an organisation, along with details on which company they are  linked to. You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_get_identities_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organisation_id: Optional. The ID in MachShip of the organisation.  Only relevant if you are an administrator of more than one organisation in MachShip. If omitted, your current organisation will be returned
        :param bool only_unlinked_identities: Optional - whether or not to filter the results to identities that have not been linked to  any companies in the system
        :param int identity_provider_id: Optional - whether or not to filter by identities who are authenticated by a certain identity. If not provided, all identities will be returned  provider
        :return: IdentityV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id', 'only_unlinked_identities', 'identity_provider_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_get_identities_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organisation_id' in params:
            query_params.append(('organisationId', params['organisation_id']))  # noqa: E501
        if 'only_unlinked_identities' in params:
            query_params.append(('onlyUnlinkedIdentities', params['only_unlinked_identities']))  # noqa: E501
        if 'identity_provider_id' in params:
            query_params.append(('identityProviderId', params['identity_provider_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/getIdentities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_identities_link_identities_to_companies_post(self, **kwargs):  # noqa: E501
        """Assign companies and roles to identities to give them access to the system.    You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_link_identities_to_companies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentityCompanyLinkSetterRequestObject body: One or more identities to provision access for
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_link_identities_to_companies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_link_identities_to_companies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_link_identities_to_companies_post_with_http_info(self, **kwargs):  # noqa: E501
        """Assign companies and roles to identities to give them access to the system.    You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_link_identities_to_companies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentityCompanyLinkSetterRequestObject body: One or more identities to provision access for
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_link_identities_to_companies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/linkIdentitiesToCompanies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_identities_reenable_identities_post(self, **kwargs):  # noqa: E501
        """apiv2_identities_reenable_identities_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_reenable_identities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_reenable_identities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_reenable_identities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_reenable_identities_post_with_http_info(self, **kwargs):  # noqa: E501
        """apiv2_identities_reenable_identities_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_reenable_identities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_reenable_identities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/reenableIdentities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_identities_return_identity_public_keys_post(self, **kwargs):  # noqa: E501
        """Get the \"public keys\" of the supplied identities that can be used by another organisation  (that has been linked to the organisation owning the identity) to give that identity  access to a company in their organisation.    You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_return_identity_public_keys_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The IDs in MachShip of the identities
        :return: IdentityPublicKeyV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_return_identity_public_keys_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_return_identity_public_keys_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_return_identity_public_keys_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get the \"public keys\" of the supplied identities that can be used by another organisation  (that has been linked to the organisation owning the identity) to give that identity  access to a company in their organisation.    You must be an administrator of the organisation in question to be able to access  this endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_return_identity_public_keys_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The IDs in MachShip of the identities
        :return: IdentityPublicKeyV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_return_identity_public_keys_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/returnIdentityPublicKeys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentityPublicKeyV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_identities_unlink_identities_from_companies_post(self, **kwargs):  # noqa: E501
        """apiv2_identities_unlink_identities_from_companies_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_unlink_identities_from_companies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[IdentityCompanyUnsetter] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_identities_unlink_identities_from_companies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_identities_unlink_identities_from_companies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_identities_unlink_identities_from_companies_post_with_http_info(self, **kwargs):  # noqa: E501
        """apiv2_identities_unlink_identities_from_companies_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_identities_unlink_identities_from_companies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[IdentityCompanyUnsetter] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_identities_unlink_identities_from_companies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/identities/unlinkIdentitiesFromCompanies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
