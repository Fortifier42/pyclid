# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CarrierInvoicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apiv2_carrier_invoices_attempt_auto_reconciliation_post(self, **kwargs):  # noqa: E501
        """Attempt to auto reconcile consignments based on the thresholds defined in the carrier account associated with the consignment.  Note that a successful response from this function will not indicate whether the consignments did or did not auto-reconcile - you  will need to establish that from the consignments and their notes instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_attempt_auto_reconciliation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoReconcileRequest body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_carrier_invoices_attempt_auto_reconciliation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_carrier_invoices_attempt_auto_reconciliation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_carrier_invoices_attempt_auto_reconciliation_post_with_http_info(self, **kwargs):  # noqa: E501
        """Attempt to auto reconcile consignments based on the thresholds defined in the carrier account associated with the consignment.  Note that a successful response from this function will not indicate whether the consignments did or did not auto-reconcile - you  will need to establish that from the consignments and their notes instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_attempt_auto_reconciliation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoReconcileRequest body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_carrier_invoices_attempt_auto_reconciliation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/carrierInvoices/attemptAutoReconciliation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_carrier_invoices_get_all_get(self, **kwargs):  # noqa: E501
        """Return the basic information about carrier invoices that have been imported into Machship. It will return at most 100 records,  in the order of most recently imported to oldest.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_get_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional parameter to limit invoices to those imported against a certain MachShip company ID
        :param int carrier_id: Optional parameter to limit invoices to those imported against a certain MachShip carrier ID
        :param str file_name: Optional parameter - when supplied it will filter the results to invoices which match the supplied file name
        :param str invoice_id: Optional parameter - when supplied it will filter the results to invoices which match the supplied invoice ID
        :return: CarrierInvoiceInformationICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_carrier_invoices_get_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_carrier_invoices_get_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_carrier_invoices_get_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return the basic information about carrier invoices that have been imported into Machship. It will return at most 100 records,  in the order of most recently imported to oldest.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_get_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional parameter to limit invoices to those imported against a certain MachShip company ID
        :param int carrier_id: Optional parameter to limit invoices to those imported against a certain MachShip carrier ID
        :param str file_name: Optional parameter - when supplied it will filter the results to invoices which match the supplied file name
        :param str invoice_id: Optional parameter - when supplied it will filter the results to invoices which match the supplied invoice ID
        :return: CarrierInvoiceInformationICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'carrier_id', 'file_name', 'invoice_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_carrier_invoices_get_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'carrier_id' in params:
            query_params.append(('carrierId', params['carrier_id']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'invoice_id' in params:
            query_params.append(('invoiceId', params['invoice_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/carrierInvoices/getAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CarrierInvoiceInformationICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_carrier_invoices_get_entries_for_invoice_get(self, **kwargs):  # noqa: E501
        """Get a listing of carrier invoice entries for a particular carrier invoice, with the option to filter by the status of the entries.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_get_entries_for_invoice_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int carrier_invoice_id: The Machship ID of an imported carrier invoice
        :param CarrierInvoiceEntryStatus status: An optional status filter for the entries
        :return: CarrierInvoiceEntryV2ForGetEntriesEndpointICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_carrier_invoices_get_entries_for_invoice_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_carrier_invoices_get_entries_for_invoice_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_carrier_invoices_get_entries_for_invoice_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a listing of carrier invoice entries for a particular carrier invoice, with the option to filter by the status of the entries.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_get_entries_for_invoice_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int carrier_invoice_id: The Machship ID of an imported carrier invoice
        :param CarrierInvoiceEntryStatus status: An optional status filter for the entries
        :return: CarrierInvoiceEntryV2ForGetEntriesEndpointICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['carrier_invoice_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_carrier_invoices_get_entries_for_invoice_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'carrier_invoice_id' in params:
            query_params.append(('carrierInvoiceId', params['carrier_invoice_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/carrierInvoices/getEntriesForInvoice', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CarrierInvoiceEntryV2ForGetEntriesEndpointICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_carrier_invoices_update_and_reprice_consignment_post(self, **kwargs):  # noqa: E501
        """Update a consignment's items and trigger Machship to reprice it using the new item weights / dimensions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_update_and_reprice_consignment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepriceConsignmentV2Model body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_carrier_invoices_update_and_reprice_consignment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_carrier_invoices_update_and_reprice_consignment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_carrier_invoices_update_and_reprice_consignment_post_with_http_info(self, **kwargs):  # noqa: E501
        """Update a consignment's items and trigger Machship to reprice it using the new item weights / dimensions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_carrier_invoices_update_and_reprice_consignment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepriceConsignmentV2Model body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_carrier_invoices_update_and_reprice_consignment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/carrierInvoices/updateAndRepriceConsignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
