# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConsignmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apiv2_consignments_create_consignment_post(self, **kwargs):  # noqa: E501
        """Creates an unmanifested consignment in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_create_consignment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConsignmentV2 body: Details of the consignment to create
        :return: CreateConsignmentResponseV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_create_consignment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_create_consignment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_create_consignment_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an unmanifested consignment in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_create_consignment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConsignmentV2 body: Details of the consignment to create
        :return: CreateConsignmentResponseV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_create_consignment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/createConsignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateConsignmentResponseV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_create_consignmentwith_complex_items_post(self, **kwargs):  # noqa: E501
        """Creates an unmanifested consignment in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_create_consignmentwith_complex_items_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConsignmentComplexItemsV2 body: Details of the consignment to create
        :return: CreateConsignmentResponseV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_create_consignmentwith_complex_items_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_create_consignmentwith_complex_items_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_create_consignmentwith_complex_items_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an unmanifested consignment in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_create_consignmentwith_complex_items_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConsignmentComplexItemsV2 body: Details of the consignment to create
        :return: CreateConsignmentResponseV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_create_consignmentwith_complex_items_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/createConsignmentwithComplexItems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateConsignmentResponseV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_create_existing_consignment_post(self, **kwargs):  # noqa: E501
        """Creates an unmanifested consignment in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_create_existing_consignment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConsignmentExistingV2 body: Details of the consignment to create
        :return: Int32BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_create_existing_consignment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_create_existing_consignment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_create_existing_consignment_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an unmanifested consignment in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_create_existing_consignment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConsignmentExistingV2 body: Details of the consignment to create
        :return: Int32BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_create_existing_consignment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/createExistingConsignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Int32BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_delete_unmanifested_consignments_post(self, **kwargs):  # noqa: E501
        """Deletes the specified Unmanifested Consignments in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_delete_unmanifested_consignments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: Ids of the consignments to be deleted
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_delete_unmanifested_consignments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_delete_unmanifested_consignments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_delete_unmanifested_consignments_post_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes the specified Unmanifested Consignments in Machship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_delete_unmanifested_consignments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: Ids of the consignments to be deleted
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_delete_unmanifested_consignments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/deleteUnmanifestedConsignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_edit_unmanifested_consignment_post(self, **kwargs):  # noqa: E501
        """Edit a consignment - note that it must be in an \"unmanifested\" state for this to be a valid operation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_edit_unmanifested_consignment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EditConsignmentV2 body: Details of the consignment to edit
        :return: CreateConsignmentResponseV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_edit_unmanifested_consignment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_edit_unmanifested_consignment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_edit_unmanifested_consignment_post_with_http_info(self, **kwargs):  # noqa: E501
        """Edit a consignment - note that it must be in an \"unmanifested\" state for this to be a valid operation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_edit_unmanifested_consignment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EditConsignmentV2 body: Details of the consignment to edit
        :return: CreateConsignmentResponseV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_edit_unmanifested_consignment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/editUnmanifestedConsignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateConsignmentResponseV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_active_get(self, **kwargs):  # noqa: E501
        """Return all consignments for a company, regardless of status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_active_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param int start_index: Defaults to 1. Can be used to \"page\" through subsequent requests
        :param int retrieve_size: The number of consignments to return at one time.
        :param int carrier_id: Optional carrier ID to restrict consignments to those of this carrier
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :return: ConsignmentsForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_active_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_active_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_active_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return all consignments for a company, regardless of status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_active_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param int start_index: Defaults to 1. Can be used to \"page\" through subsequent requests
        :param int retrieve_size: The number of consignments to return at one time.
        :param int carrier_id: Optional carrier ID to restrict consignments to those of this carrier
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :return: ConsignmentsForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'start_index', 'retrieve_size', 'carrier_id', 'include_child_companies']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_active_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501
        if 'carrier_id' in params:
            query_params.append(('carrierId', params['carrier_id']))  # noqa: E501
        if 'include_child_companies' in params:
            query_params.append(('includeChildCompanies', params['include_child_companies']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getActive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentsForListGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_all_get(self, **kwargs):  # noqa: E501
        """Return all consignments for a company, regardless of status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param int start_index: Defaults to 1. Can be used to \"page\" through subsequent requests
        :param int retrieve_size: The number of consignments to return. Defaults to 40, will return a maximum of 200 rows
        :param int carrier_id: Optional carrier ID to restrict consignments to those of this carrier
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :param bool include_deleted_consignments: Optional - when set to true consignments that have been deleted will return
        :param datetime from_date_time_local: Optional - Local time to filter consignments on. Set filterByEtaCompletedOrDespatch to switch between despatch date and ETA/Completed date
        :param datetime to_date_time_local: Optional - Local time to filter consignments on. Set filterByEtaCompletedOrDespatch to switch between despatch date and ETA/Completed date
        :param bool filter_by_eta_completed_or_despatch: Optional - if times are provided, false = Despatch Date, true = ETA/Completed Date. Defaults to despatch date if omitted
        :return: ConsignmentsForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return all consignments for a company, regardless of status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param int start_index: Defaults to 1. Can be used to \"page\" through subsequent requests
        :param int retrieve_size: The number of consignments to return. Defaults to 40, will return a maximum of 200 rows
        :param int carrier_id: Optional carrier ID to restrict consignments to those of this carrier
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :param bool include_deleted_consignments: Optional - when set to true consignments that have been deleted will return
        :param datetime from_date_time_local: Optional - Local time to filter consignments on. Set filterByEtaCompletedOrDespatch to switch between despatch date and ETA/Completed date
        :param datetime to_date_time_local: Optional - Local time to filter consignments on. Set filterByEtaCompletedOrDespatch to switch between despatch date and ETA/Completed date
        :param bool filter_by_eta_completed_or_despatch: Optional - if times are provided, false = Despatch Date, true = ETA/Completed Date. Defaults to despatch date if omitted
        :return: ConsignmentsForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'start_index', 'retrieve_size', 'carrier_id', 'include_child_companies', 'include_deleted_consignments', 'from_date_time_local', 'to_date_time_local', 'filter_by_eta_completed_or_despatch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501
        if 'carrier_id' in params:
            query_params.append(('carrierId', params['carrier_id']))  # noqa: E501
        if 'include_child_companies' in params:
            query_params.append(('includeChildCompanies', params['include_child_companies']))  # noqa: E501
        if 'include_deleted_consignments' in params:
            query_params.append(('includeDeletedConsignments', params['include_deleted_consignments']))  # noqa: E501
        if 'from_date_time_local' in params:
            query_params.append(('fromDateTimeLocal', params['from_date_time_local']))  # noqa: E501
        if 'to_date_time_local' in params:
            query_params.append(('toDateTimeLocal', params['to_date_time_local']))  # noqa: E501
        if 'filter_by_eta_completed_or_despatch' in params:
            query_params.append(('filterByEtaCompletedOrDespatch', params['filter_by_eta_completed_or_despatch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentsForListGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_attachments_post(self, **kwargs):  # noqa: E501
        """Gets attachment information for a given consignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_attachments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int consignment_id: id of the consignment
        :return: ConsignmentAttachmentDetailV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_attachments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_attachments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_attachments_post_with_http_info(self, **kwargs):  # noqa: E501
        """Gets attachment information for a given consignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_attachments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int consignment_id: id of the consignment
        :return: ConsignmentAttachmentDetailV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_attachments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consignment_id' in params:
            query_params.append(('consignmentId', params['consignment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getAttachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentAttachmentDetailV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_completed_get(self, **kwargs):  # noqa: E501
        """Returns consignments for the given company that were completed within the provided start and end date range. Limited to 2000 consignments at a time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_completed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param datetime start_date: Start Date which is compared against the consignment's Completed Date (all date times are local to the delivery location)
        :param datetime end_date: End Date which is compared against the consignment's Completed Date (all date times are local to the delivery location)
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :return: ConsignmentsForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_completed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_completed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_completed_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns consignments for the given company that were completed within the provided start and end date range. Limited to 2000 consignments at a time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_completed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param datetime start_date: Start Date which is compared against the consignment's Completed Date (all date times are local to the delivery location)
        :param datetime end_date: End Date which is compared against the consignment's Completed Date (all date times are local to the delivery location)
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :return: ConsignmentsForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'start_date', 'end_date', 'include_child_companies']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_completed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'include_child_companies' in params:
            query_params.append(('includeChildCompanies', params['include_child_companies']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getCompleted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentsForListGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_consignment_by_pending_consignment_id_get(self, **kwargs):  # noqa: E501
        """Get a Consignment Details (if it exists) for a single consignment, using a pending consignment ID that  has been transformed (linked) into a consignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_consignment_by_pending_consignment_id_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :return: ConsignmentV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_consignment_by_pending_consignment_id_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_consignment_by_pending_consignment_id_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_consignment_by_pending_consignment_id_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a Consignment Details (if it exists) for a single consignment, using a pending consignment ID that  has been transformed (linked) into a consignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_consignment_by_pending_consignment_id_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :return: ConsignmentV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_consignment_by_pending_consignment_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getConsignmentByPendingConsignmentId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_consignment_for_clone_get(self, **kwargs):  # noqa: E501
        """Get the details of an existing consignment in a format that can be passed to the createConsignmentWithComplexItems endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_consignment_for_clone_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The MachShip ID of a consignment
        :return: CreateConsignmentComplexItemsV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_consignment_for_clone_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_consignment_for_clone_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_consignment_for_clone_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the details of an existing consignment in a format that can be passed to the createConsignmentWithComplexItems endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_consignment_for_clone_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The MachShip ID of a consignment
        :return: CreateConsignmentComplexItemsV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_consignment_for_clone_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getConsignmentForClone', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateConsignmentComplexItemsV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_consignment_get(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a single consignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_consignment_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param bool include_deleted: If true, will also return details for deleted consignments
        :return: ConsignmentV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_consignment_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_consignment_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_consignment_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a single consignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_consignment_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param bool include_deleted: If true, will also return details for deleted consignments
        :return: ConsignmentV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include_deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_consignment_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'include_deleted' in params:
            query_params.append(('includeDeleted', params['include_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getConsignment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_recently_created_or_updated_consignments_get(self, **kwargs):  # noqa: E501
        """Return consignments for a company that have been created or updated within the timeframe specified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_recently_created_or_updated_consignments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - The company id for the consignments that are being queried
        :param datetime from_date_utc: Required - This time period from which the consignment updates are to be queried from
        :param datetime to_date_utc: Optional - This max time period which the consignment updates are to be queried from
        :param int start_index: Defaults to 1 - MachShip will return a maximum of 200 entries per request. Should there be more than 200 updated or created consignments  during the requested time period then you can utilise this index to obtain the next 200 entries by setting this to be 201. This can be  repeated until all updates have been obtained.
        :param int retrieve_size: This will be between 40 and 200 and will be the number of consignments returned in the request. If not provided the default returned will be 40.
        :param int carrier_id: Optional - If you wish to restrict the updates to a set carrier then you can set the id of that carrier in the request
        :param bool include_child_companies: if the query is desired to be made for an organisation that has multiple companies you can set this field to be true
        :param bool get_notes: whether the query should return notes for the consignments or not
        :param bool get_reconciliation_data: whether the query should return reconciliation data for the consignments or not
        :return: ConsignmentsForListWithPendingConsignmentIdsGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_recently_created_or_updated_consignments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_recently_created_or_updated_consignments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_recently_created_or_updated_consignments_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return consignments for a company that have been created or updated within the timeframe specified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_recently_created_or_updated_consignments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - The company id for the consignments that are being queried
        :param datetime from_date_utc: Required - This time period from which the consignment updates are to be queried from
        :param datetime to_date_utc: Optional - This max time period which the consignment updates are to be queried from
        :param int start_index: Defaults to 1 - MachShip will return a maximum of 200 entries per request. Should there be more than 200 updated or created consignments  during the requested time period then you can utilise this index to obtain the next 200 entries by setting this to be 201. This can be  repeated until all updates have been obtained.
        :param int retrieve_size: This will be between 40 and 200 and will be the number of consignments returned in the request. If not provided the default returned will be 40.
        :param int carrier_id: Optional - If you wish to restrict the updates to a set carrier then you can set the id of that carrier in the request
        :param bool include_child_companies: if the query is desired to be made for an organisation that has multiple companies you can set this field to be true
        :param bool get_notes: whether the query should return notes for the consignments or not
        :param bool get_reconciliation_data: whether the query should return reconciliation data for the consignments or not
        :return: ConsignmentsForListWithPendingConsignmentIdsGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'from_date_utc', 'to_date_utc', 'start_index', 'retrieve_size', 'carrier_id', 'include_child_companies', 'get_notes', 'get_reconciliation_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_recently_created_or_updated_consignments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'from_date_utc' in params:
            query_params.append(('fromDateUtc', params['from_date_utc']))  # noqa: E501
        if 'to_date_utc' in params:
            query_params.append(('toDateUtc', params['to_date_utc']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501
        if 'carrier_id' in params:
            query_params.append(('carrierId', params['carrier_id']))  # noqa: E501
        if 'include_child_companies' in params:
            query_params.append(('includeChildCompanies', params['include_child_companies']))  # noqa: E501
        if 'get_notes' in params:
            query_params.append(('getNotes', params['get_notes']))  # noqa: E501
        if 'get_reconciliation_data' in params:
            query_params.append(('getReconciliationData', params['get_reconciliation_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getRecentlyCreatedOrUpdatedConsignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentsForListWithPendingConsignmentIdsGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_unmanifested_consignment_for_edit_get(self, **kwargs):  # noqa: E501
        """Get an unmanifested consignment in the same format required to perform an update in the edit endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_unmanifested_consignment_for_edit_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the consignment in MachShip
        :return: EditConsignmentV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_unmanifested_consignment_for_edit_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_unmanifested_consignment_for_edit_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_unmanifested_consignment_for_edit_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get an unmanifested consignment in the same format required to perform an update in the edit endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_unmanifested_consignment_for_edit_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the consignment in MachShip
        :return: EditConsignmentV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_unmanifested_consignment_for_edit_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getUnmanifestedConsignmentForEdit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EditConsignmentV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_get_unmanifested_get(self, **kwargs):  # noqa: E501
        """Get all consignments for a company that are in an \"unmanifested\" state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_unmanifested_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param int start_index: Defaults to 1. Can be used to \"page\" through subsequent requests
        :param int retrieve_size: The number of consignments to return. Defaults to 40, will return a maximum of 200 rows
        :param int carrier_id: Optional carrier ID to restrict consignments to those of this carrier
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :return: UnmanifestedConsignmentForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_get_unmanifested_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_get_unmanifested_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_get_unmanifested_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all consignments for a company that are in an \"unmanifested\" state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_get_unmanifested_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: Optional - defaults to your company. Must be a valid company ID in MachShip
        :param int start_index: Defaults to 1. Can be used to \"page\" through subsequent requests
        :param int retrieve_size: The number of consignments to return. Defaults to 40, will return a maximum of 200 rows
        :param int carrier_id: Optional carrier ID to restrict consignments to those of this carrier
        :param bool include_child_companies: Whether to include companies that are \"children\" below companyId
        :return: UnmanifestedConsignmentForListGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'start_index', 'retrieve_size', 'carrier_id', 'include_child_companies']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_get_unmanifested_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501
        if 'carrier_id' in params:
            query_params.append(('carrierId', params['carrier_id']))  # noqa: E501
        if 'include_child_companies' in params:
            query_params.append(('includeChildCompanies', params['include_child_companies']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/getUnmanifested', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnmanifestedConsignmentForListGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_return_consignment_statuses_post(self, **kwargs):  # noqa: E501
        """Return all statuses recorded in the system with an option to specify a cutoff date to limit the statuses returned to ones saved in Machship  after a certain date. Maximum of 100 consignments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignment_statuses_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsContainer body: The list of Machship consignment IDs to return statuses for
        :param datetime since_date_created_utc: The (optional) date/time in UTC to limit statuses by. If supplied only statuses recorded that are newer or equal to the date will be returned.             When not suplied all statuses for each consignment are returned
        :return: ConsignmentIdWithTrackingHistoryV2IEnumerableBaseDomainEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_return_consignment_statuses_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_return_consignment_statuses_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_return_consignment_statuses_post_with_http_info(self, **kwargs):  # noqa: E501
        """Return all statuses recorded in the system with an option to specify a cutoff date to limit the statuses returned to ones saved in Machship  after a certain date. Maximum of 100 consignments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignment_statuses_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsContainer body: The list of Machship consignment IDs to return statuses for
        :param datetime since_date_created_utc: The (optional) date/time in UTC to limit statuses by. If supplied only statuses recorded that are newer or equal to the date will be returned.             When not suplied all statuses for each consignment are returned
        :return: ConsignmentIdWithTrackingHistoryV2IEnumerableBaseDomainEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'since_date_created_utc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_return_consignment_statuses_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'since_date_created_utc' in params:
            query_params.append(('sinceDateCreatedUtc', params['since_date_created_utc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/returnConsignmentStatuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentIdWithTrackingHistoryV2IEnumerableBaseDomainEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_return_consignments_by_carrier_consignment_id_post(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments using the Carrier Consignment ID as the lookup. Maximum of 10 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_carrier_consignment_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The Carrier Consignment ids of the consignments. Maximum of 10 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_return_consignments_by_carrier_consignment_id_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_return_consignments_by_carrier_consignment_id_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_return_consignments_by_carrier_consignment_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments using the Carrier Consignment ID as the lookup. Maximum of 10 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_carrier_consignment_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The Carrier Consignment ids of the consignments. Maximum of 10 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_return_consignments_by_carrier_consignment_id_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/returnConsignmentsByCarrierConsignmentId', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_return_consignments_by_pending_consignment_ids_post(self, **kwargs):  # noqa: E501
        """Get Consignment Details for multiple consignments using the Pending Consignment Id as the lookup. Maximum of 100 consignments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_pending_consignment_ids_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsContainer body: List of Pending Consignment Ids from Pending Consignment. Maximum of 100 consignments per request.
        :return: ConsignmentResponseV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_return_consignments_by_pending_consignment_ids_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_return_consignments_by_pending_consignment_ids_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_return_consignments_by_pending_consignment_ids_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get Consignment Details for multiple consignments using the Pending Consignment Id as the lookup. Maximum of 100 consignments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_pending_consignment_ids_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsContainer body: List of Pending Consignment Ids from Pending Consignment. Maximum of 100 consignments per request.
        :return: ConsignmentResponseV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_return_consignments_by_pending_consignment_ids_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/returnConsignmentsByPendingConsignmentIds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentResponseV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_return_consignments_by_reference1_post(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments using Reference 1 as the lookup. Maximum of 10 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_reference1_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The Reference 1's of the consignments. Maximum of 10 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_return_consignments_by_reference1_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_return_consignments_by_reference1_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_return_consignments_by_reference1_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments using Reference 1 as the lookup. Maximum of 10 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_reference1_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The Reference 1's of the consignments. Maximum of 10 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_return_consignments_by_reference1_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/returnConsignmentsByReference1', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_return_consignments_by_reference2_post(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments using Reference 2 as the lookup. Maximum of 10 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_reference2_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The Reference 2's of the consignments. Maximum of 10 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_return_consignments_by_reference2_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_return_consignments_by_reference2_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_return_consignments_by_reference2_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments using Reference 2 as the lookup. Maximum of 10 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_by_reference2_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The Reference 2's of the consignments. Maximum of 10 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_return_consignments_by_reference2_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/returnConsignmentsByReference2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_return_consignments_post(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments. Maximum of 100 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsContainer body: The Machship ids of the consignments. Maximum of 100 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_return_consignments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_return_consignments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_return_consignments_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get Consignment Details for a multiple consignments. Maximum of 100 consignments per request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_return_consignments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdsContainer body: The Machship ids of the consignments. Maximum of 100 consignments per request
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_return_consignments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/returnConsignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_search_consignments_post(self, **kwargs):  # noqa: E501
        """Get the details of related consignments based on the provided list of consignment or item references  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_search_consignments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The list of references to use to search for the related consignments
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_search_consignments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_search_consignments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_search_consignments_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get the details of related consignments based on the provided list of consignment or item references  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_search_consignments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The list of references to use to search for the related consignments
        :return: ConsignmentV2ICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_search_consignments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/searchConsignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsignmentV2ICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_consignments_update_consignment_statuses_post(self, **kwargs):  # noqa: E501
        """apiv2_consignments_update_consignment_statuses_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_update_consignment_statuses_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ManualTrackingStatus] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_consignments_update_consignment_statuses_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_consignments_update_consignment_statuses_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_consignments_update_consignment_statuses_post_with_http_info(self, **kwargs):  # noqa: E501
        """apiv2_consignments_update_consignment_statuses_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_consignments_update_consignment_statuses_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ManualTrackingStatus] body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_consignments_update_consignment_statuses_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/consignments/updateConsignmentStatuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
