# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CompanyItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apiv2_items_create_complex_post(self, **kwargs):  # noqa: E501
        """apiv2_items_create_complex_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_create_complex_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyItemComplexV2 body:
        :param int company_id:
        :return: Int32BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_create_complex_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_create_complex_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_create_complex_post_with_http_info(self, **kwargs):  # noqa: E501
        """apiv2_items_create_complex_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_create_complex_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyItemComplexV2 body:
        :param int company_id:
        :return: Int32BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_create_complex_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/createComplex', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Int32BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_delete_delete(self, **kwargs):  # noqa: E501
        """apiv2_items_delete_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_delete_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_item_id:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_delete_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_delete_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_delete_delete_with_http_info(self, **kwargs):  # noqa: E501
        """apiv2_items_delete_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_delete_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_item_id:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_delete_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_item_id' in params:
            query_params.append(('companyItemId', params['company_item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_get_all_complex_get(self, **kwargs):  # noqa: E501
        """Returns a list of items for a given company. By default, it will return the top 200 items. If you have more than 200, you will need to enter a different startIndex. Eg. 201, 401, etc. Returns all items as complex items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_all_complex_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: The company whose items you want want to get
        :param int start_index: The start Index of the get (Optional. By default this is 1)
        :param int retrieve_size: The number of results to retrieve (Optional. Max number is 200)
        :return: CompanyItemComplexV2GridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_get_all_complex_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_get_all_complex_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_get_all_complex_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of items for a given company. By default, it will return the top 200 items. If you have more than 200, you will need to enter a different startIndex. Eg. 201, 401, etc. Returns all items as complex items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_all_complex_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: The company whose items you want want to get
        :param int start_index: The start Index of the get (Optional. By default this is 1)
        :param int retrieve_size: The number of results to retrieve (Optional. Max number is 200)
        :return: CompanyItemComplexV2GridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'start_index', 'retrieve_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_get_all_complex_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/getAllComplex', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyItemComplexV2GridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_get_all_get(self, **kwargs):  # noqa: E501
        """Returns a list of items for a given company. By default, it will return the top 200 items. If you have more than 200, you will need to enter a different startIndex. Eg. 201, 401, etc. This only returns standard items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: The company whose items you want want to get
        :param int start_index: The start Index of the get (Optional. By default this is 1)
        :param int retrieve_size: The number of results to retrieve (Optional. Max number is 200)
        :return: CompanyItemV2GridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_get_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_get_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_get_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of items for a given company. By default, it will return the top 200 items. If you have more than 200, you will need to enter a different startIndex. Eg. 201, 401, etc. This only returns standard items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: The company whose items you want want to get
        :param int start_index: The start Index of the get (Optional. By default this is 1)
        :param int retrieve_size: The number of results to retrieve (Optional. Max number is 200)
        :return: CompanyItemV2GridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'start_index', 'retrieve_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_get_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/getAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyItemV2GridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_get_by_sku_complex_get(self, **kwargs):  # noqa: E501
        """Returns a saved item that has the matching Sku. Returns complex items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_by_sku_complex_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id:
        :param str sku:
        :return: CompanyItemComplexV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_get_by_sku_complex_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_get_by_sku_complex_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_get_by_sku_complex_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a saved item that has the matching Sku. Returns complex items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_by_sku_complex_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id:
        :param str sku:
        :return: CompanyItemComplexV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_get_by_sku_complex_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('sku', params['sku']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/getBySkuComplex', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyItemComplexV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_get_by_sku_get(self, **kwargs):  # noqa: E501
        """Returns a saved item that has the matching Sku. This only returns simple items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_by_sku_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id:
        :param str sku:
        :return: CompanyItemV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_get_by_sku_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_get_by_sku_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_get_by_sku_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a saved item that has the matching Sku. This only returns simple items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_by_sku_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id:
        :param str sku:
        :return: CompanyItemV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'sku']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_get_by_sku_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('sku', params['sku']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/getBySku', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyItemV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_get_complex_get(self, **kwargs):  # noqa: E501
        """Returns a saved complex item with all its dimensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_complex_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Machship Id of the saved item
        :return: CompanyItemComplexV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_get_complex_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_get_complex_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_get_complex_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a saved complex item with all its dimensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_complex_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Machship Id of the saved item
        :return: CompanyItemComplexV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_get_complex_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/getComplex', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyItemComplexV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_items_get_get(self, **kwargs):  # noqa: E501
        """Returns a saved item with all its dimensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Machship Id of the saved item
        :return: CompanyItemV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_items_get_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_items_get_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_items_get_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a saved item with all its dimensions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_items_get_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Machship Id of the saved item
        :return: CompanyItemV2BaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_items_get_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/items/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyItemV2BaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
