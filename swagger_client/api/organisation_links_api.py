# coding: utf-8

"""
    Machship API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OrganisationLinksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apiv2_organisation_links_add_post(self, **kwargs):  # noqa: E501
        """Take the public key of an organisation and \"link it into\" an organisation you  are an administrator of. Doing this allows you to assign users from the other  organisation into companies in your organisation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_add_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganisationLinkRequest body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_add_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_add_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_add_post_with_http_info(self, **kwargs):  # noqa: E501
        """Take the public key of an organisation and \"link it into\" an organisation you  are an administrator of. Doing this allows you to assign users from the other  organisation into companies in your organisation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_add_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganisationLinkRequest body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_add_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_get_for_organisation_get(self, **kwargs):  # noqa: E501
        """Returns all the links that exist for the organisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_for_organisation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Organisation Id. Leave blank to use your current organisation
        :return: OrganisationLinkDetailICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_get_for_organisation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_get_for_organisation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_get_for_organisation_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the links that exist for the organisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_for_organisation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Organisation Id. Leave blank to use your current organisation
        :return: OrganisationLinkDetailICollectionBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_get_for_organisation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/getForOrganisation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganisationLinkDetailICollectionBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_get_linked_from_organisations_get(self, **kwargs):  # noqa: E501
        """Returns all the from linked organisations that exist for the organisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_linked_from_organisations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_index:
        :param int retrieve_size:
        :param str sort:
        :param str search_text:
        :return: OrganisationDetailsForGridGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_get_linked_from_organisations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_get_linked_from_organisations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_get_linked_from_organisations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the from linked organisations that exist for the organisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_linked_from_organisations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_index:
        :param int retrieve_size:
        :param str sort:
        :param str search_text:
        :return: OrganisationDetailsForGridGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'retrieve_size', 'sort', 'search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_get_linked_from_organisations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/getLinkedFromOrganisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganisationDetailsForGridGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_get_linked_to_organisations_get(self, **kwargs):  # noqa: E501
        """Returns all the to linked organisations that exist for the organisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_linked_to_organisations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_index:
        :param int retrieve_size:
        :param str sort:
        :param str search_text:
        :return: OrganisationDetailsForGridGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_get_linked_to_organisations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_get_linked_to_organisations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_get_linked_to_organisations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the to linked organisations that exist for the organisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_linked_to_organisations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_index:
        :param int retrieve_size:
        :param str sort:
        :param str search_text:
        :return: OrganisationDetailsForGridGridDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'retrieve_size', 'sort', 'search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_get_linked_to_organisations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'retrieve_size' in params:
            query_params.append(('retrieveSize', params['retrieve_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/getLinkedToOrganisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganisationDetailsForGridGridDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_get_organisation_details_by_public_key_get(self, **kwargs):  # noqa: E501
        """Test a public key and, if it is correct, return details on which organisation it corresponds to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_organisation_details_by_public_key_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key:
        :return: OrganisationDetailBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_get_organisation_details_by_public_key_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_get_organisation_details_by_public_key_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_get_organisation_details_by_public_key_get_with_http_info(self, **kwargs):  # noqa: E501
        """Test a public key and, if it is correct, return details on which organisation it corresponds to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_organisation_details_by_public_key_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key:
        :return: OrganisationDetailBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_get_organisation_details_by_public_key_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'public_key' in params:
            query_params.append(('publicKey', params['public_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/getOrganisationDetailsByPublicKey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganisationDetailBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_get_public_key_for_organisation_get(self, **kwargs):  # noqa: E501
        """Return this organisation's \"public key\" - which can be given to other organisations to link  the organisation \"into\" the other - meaning that users can be invited into the other organisation  to access their data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_public_key_for_organisation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of the Organisation that you are requesting the public key for. Leave blank to use the organisation linked to the current user
        :return: StringBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_get_public_key_for_organisation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_get_public_key_for_organisation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_get_public_key_for_organisation_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return this organisation's \"public key\" - which can be given to other organisations to link  the organisation \"into\" the other - meaning that users can be invited into the other organisation  to access their data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_get_public_key_for_organisation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of the Organisation that you are requesting the public key for. Leave blank to use the organisation linked to the current user
        :return: StringBaseDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_get_public_key_for_organisation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/getPublicKeyForOrganisation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringBaseDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_remove_post(self, **kwargs):  # noqa: E501
        """Remove an existing link between organisations. Note that doing this will remove access to the  \"to\" organisation from any users of the \"from\" organisation, and that this is irreversable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_remove_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganisationUnlinkRequest body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_remove_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_remove_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_remove_post_with_http_info(self, **kwargs):  # noqa: E501
        """Remove an existing link between organisations. Note that doing this will remove access to the  \"to\" organisation from any users of the \"from\" organisation, and that this is irreversable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_remove_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrganisationUnlinkRequest body:
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_remove_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiv2_organisation_links_reset_public_key_for_organisation_get(self, **kwargs):  # noqa: E501
        """Resets the organisation's public key. Note that this will not reset any organisation links set up  via the old public key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_reset_public_key_for_organisation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of the Organisation that you are requesting to reset the public key for. Leave blank to use the organisation linked to the current user
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apiv2_organisation_links_reset_public_key_for_organisation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiv2_organisation_links_reset_public_key_for_organisation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiv2_organisation_links_reset_public_key_for_organisation_get_with_http_info(self, **kwargs):  # noqa: E501
        """Resets the organisation's public key. Note that this will not reset any organisation links set up  via the old public key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apiv2_organisation_links_reset_public_key_for_organisation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of the Organisation that you are requesting to reset the public key for. Leave blank to use the organisation linked to the current user
        :return: EmptyDomainEntityV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiv2_organisation_links_reset_public_key_for_organisation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User API Token']  # noqa: E501

        return self.api_client.call_api(
            '/apiv2/organisationLinks/resetPublicKeyForOrganisation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyDomainEntityV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
